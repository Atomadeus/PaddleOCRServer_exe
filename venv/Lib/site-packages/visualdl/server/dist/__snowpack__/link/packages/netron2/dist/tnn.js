var tnn=tnn||{},base=base||require("./base");tnn.ModelFactory=class{match(t){const e=t.identifier.toLowerCase();if(e.endsWith(".tnnproto")){let e=t.text;e=e.substring(0,Math.min(e.length,128));const n=e.split("\n").shift().trim();if(n.startsWith('"')&&n.endsWith('"')){const t=n.replace(/(^")|("$)/g,"").split(",").shift().trim().split(" ");if(3===t.length||t.length>=4&&"4206624770"===t[3])return!0}}if(e.endsWith(".tnnmodel")){const e=t.buffer;if(e.length>4&&4206624770==(e[0]|e[1]<<8|e[2]<<16|e[3]<<24)>>>0)return!0}return!1}open(t,e){return tnn.Metadata.open(e).then((e=>{const n=t.identifier.toLowerCase();if(n.endsWith(".tnnproto")){const s=t.identifier.substring(0,t.identifier.length-9)+".tnnmodel";return t.request(s,null).then((n=>new tnn.Model(e,t.text,n))).catch((()=>new tnn.Model(e,t.text,null))).catch((t=>{const e=t&&t.message?t.message:t.toString();throw new tnn.Error(e.replace(/\.$/,"")+" in '"+n+"'.")}))}if(n.endsWith(".tnnmodel")){const s=t.identifier.substring(0,t.identifier.length-9)+".tnnproto";return t.request(s,"utf-8").then((n=>new tnn.Model(e,n,t.buffer))).catch((t=>{const e=t&&t.message?t.message:t.toString();throw new tnn.Error(e.replace(/\.$/,"")+" in '"+n+"'.")}))}}))}},tnn.Model=class{constructor(t,e,n){this._graphs=[],this._graphs.push(new tnn.Graph(t,e,n))}get format(){return"TNN"}get graphs(){return this._graphs}},tnn.Graph=class{constructor(t,e,n){this._inputs=[],this._outputs=[],this._nodes=[];const s=new tnn.LayerResourceReader(n),i=new tnn.TextProtoReader(e);for(const t of i.inputs){const e=new tnn.TensorShape(t.shape),n=new tnn.TensorType("float32",e);this._inputs.push(new tnn.Parameter(t.name,[new tnn.Argument(t.name,n,null)]))}for(const t of i.outputs)this._outputs.push(new tnn.Parameter(t.name,[new tnn.Argument(t.name,null,null)]));for(const e of i.layers)this._nodes.push(new tnn.Node(t,s,e))}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},tnn.Parameter=class{constructor(t,e){this._name=t,this._arguments=e}get name(){return this._name}get visible(){return!0}get arguments(){return this._arguments}},tnn.Argument=class{constructor(t,e,n){if("string"!=typeof t)throw new tnn.Error("Invalid argument identifier '"+JSON.stringify(t)+"'.");this._name=t,this._type=e||null,this._initializer=n||null}get name(){return this._name}get type(){return this._initializer?this._initializer.type:this._type}get initializer(){return this._initializer}},tnn.Node=class{constructor(t,e,n){this._metadata=t,this._inputs=[],this._outputs=[],this._attributes=[],this._type=n.type,this._name=n.name;const s=t.operator(this._type);s&&(this._type=s);const i=t.type(this._type),a=i&&i.attributes?i&&i.attributes.slice():[],r=n.attributes.slice();for(;r.length>0;){const t=a.shift();let e=null,s="";if(t&&"int32[]"===t.type&&t.size)s=t.name,e=r.splice(0,n.attr[t.size]).map((t=>parseInt(t.value,10)));else{const t=r.shift();s=t.key,e=t.value}this._attributes.push(new tnn.Attribute(t,s,e))}const o=n.inputs;let h=0;if(i&&i.inputs){for(const t of i.inputs)if(h<o.length||"optional"!=t.option){const e="variadic"==t.option?o.length-h:1,n=o.slice(h,h+e).filter((e=>""!=e||"optional"!=t.option)).map((t=>new tnn.Argument(t,null,null)));this._inputs.push(new tnn.Parameter(t.name,n)),h+=e}}else this._inputs=this._inputs.concat(o.slice(h).map(((t,e)=>{const n=h+e==0?"input":(h+e).toString();return new tnn.Parameter(n,[new tnn.Argument(t,null,null)])})));const u=n.outputs;let l=0;if(i&&i.outputs){for(const t of i.outputs)if(l<u.length||"optional"!=t.option){const e="variadic"==t.option?u.length-l:1,n=u.slice(l,l+e).map((t=>new tnn.Argument(t,null,null)));this._outputs.push(new tnn.Parameter(t.name,n)),l+=e}}else this._outputs=this._outputs.concat(u.slice(l).map(((t,e)=>{const n=l+e==0?"output":(l+e).toString();return new tnn.Parameter(n,[new tnn.Argument(t,null,null)])})));switch(this._type){case"Convolution":case"ConvolutionDepthWise":case"Deconvolution":case"DeconvolutionDepthWise":{const t=e.read(this._name);if(t){const e=parseInt(n.attr[2]||0,10),s=parseInt(n.attr[3]||0,10),i=parseInt(n.attr[4]||s,10),a=t.filter.length;this._weight(t,"filter",[e,a/(e*s*i),s,i]),t.bias&&this._weight(t,"bias",[e]),t.quantized&&this._weight(t,"quantized",[e])}break}case"Conv3D":{const t=e.read(this._name);if(t){const s=parseInt(n.attr[2]||0,10),i=parseInt(n.attr[3]||0,10),a=parseInt(n.attr[4]||i,10),r=parseInt(n.attr[5]||i,10),o=t.filter.length;this._weight(t,"weight",[s,o/(s*i*a*r),i,a,r]),t.bias&&this._weight(e,"bias",[s])}break}case"InnerProduct":{const t=e.read(this._name);if(t){const e=parseInt(n.attr[0]||0,10),s=t.weight.length;this._weight(t,"weight",[e,s/e]),this._weight(t,"bias",[e]),"int8"===t.weight.dataType&&this._weight(t,"scale",[e])}break}case"PReLU":{const t=e.read(this._name);t&&this._weight(t,"slope",[t.slope.length]);break}case"BatchNormCxx":{const t=e.read(this._name);t&&(this._weight(t,"scale",[t.scale.length]),this._weight(t,"bias",[t.bias.length]));break}case"Div":case"Sub":case"Add":case"Mul":if(1===this._inputs.length){const t=e.read(this._name);if(t){const e=t.slope.length;this._weight(t,"slope",[e])}}break;case"HdrGuide":{const t=e.read(this._name);if(t){const e=t.ccm_weight.length;this._weight(t,"ccm_weight",[e]),this._weight(t,"ccm_bias",[e]),this._weight(t,"shifts",[e]),this._weight(t,"slopes",[e]),this._weight(t,"projection_weight",[e]),this._weight(t,"projection_bias",[e])}break}case"BlobScale":{const t=e.read(this._name);if(t){const e=t.scale.length;this._weight(t,"scale",[e]),this._weight(t,"bias",[e])}break}}}get type(){return this._type}get name(){return this._name}get metadata(){return this._metadata.type(this._type)}get attributes(){return this._attributes}get inputs(){return this._inputs}get outputs(){return this._outputs}_weight(t,e,n){const s=t[e];if(!s)throw new tnn.Error("Layer initializer'"+t.type+"."+e+"' not found '");const i=new tnn.Tensor(new tnn.TensorType(s.dataType,new tnn.TensorShape(n)),s.value);this._inputs.push(new tnn.Parameter(e,[new tnn.Argument("",null,i)]))}},tnn.Attribute=class{constructor(t,e,n){if(this._type="",this._name=e.toString(),this._value=n,t){switch(this._name=t.name,t.type&&(this._type=t.type),this._type){case"int32":this._value=parseInt(this._value,10);break;case"float32":this._value=parseFloat(this._value);break;case"float32[]":this._value=this._value.map((t=>parseFloat(t)))}(Object.prototype.hasOwnProperty.call(t,"visible")&&!t.visible||Object.prototype.hasOwnProperty.call(t,"default")&&(this._value==t.default||this._value&&this._value.toString()==t.default.toString()))&&(this._visible=!1)}}get type(){return this._type}get name(){return this._name}get value(){return this._value}get visible(){return 0!=this._visible}},tnn.Tensor=class{constructor(t,e){this._type=t,this._data=e}get kind(){return"Weight"}get type(){return this._type}get state(){return this._context().state||null}get value(){const t=this._context();return t.state?null:(t.limit=Number.MAX_SAFE_INTEGER,this._decode(t,0))}toString(){const t=this._context();if(t.state)return"";t.limit=1e4;const e=this._decode(t,0);return JSON.stringify(e,null,4)}_context(){const t={index:0,count:0,state:null};if("?"==this._type.dataType)return t.state="Tensor has unknown data type.",t;if(!this._type.shape)return t.state="Tensor has no dimensions.",t;if(!this._data)return t.state="Tensor data is empty.",t;switch(this._type.dataType){case"float16":case"float32":t.data=new DataView(this._data.buffer,this._data.byteOffset,this._data.byteLength);break;default:t.state="Tensor data type is not implemented."}return t.dataType=this._type.dataType,t.shape=this._type.shape.dimensions,t}_decode(t,e){const n=0!==t.shape.length?t.shape:[1],s=[],i=n[e];if(e==n.length-1)for(let e=0;e<i;e++){if(t.count>t.limit)return s.push("..."),s;switch(this._type.dataType){case"float32":s.push(t.data.getFloat32(t.index,!0)),t.index+=4,t.count++;break;case"float16":s.push(t.data.getFloat16(t.index,!0)),t.index+=2,t.count++}}else for(let n=0;n<i;n++){if(t.count>t.limit)return s.push("..."),s;s.push(this._decode(t,e+1))}return 0==t.shape.length?s[0]:s}},tnn.TensorType=class{constructor(t,e){this._dataType=t||"?",this._shape=e}get dataType(){return this._dataType}get shape(){return this._shape}toString(){return this._dataType+this._shape.toString()}},tnn.TensorShape=class{constructor(t){this._dimensions=t}get dimensions(){return this._dimensions}toString(){return this._dimensions?"["+this._dimensions.map((t=>t?t.toString():"?")).join(",")+"]":""}},tnn.Metadata=class{static open(t){return tnn.Metadata._metadata?Promise.resolve(tnn.Metadata._metadata):t.request(null,"tnn-metadata.json","utf-8").then((t=>(tnn.Metadata._metadata=new tnn.Metadata(t),tnn.Metadata._metadata))).catch((()=>(tnn.Metadata._metadata=new tnn.Metadata(null),tnn.Metadata._metadatas)))}constructor(t){if(this._operatorMap=new Map,this._map=new Map,this._attributeCache=new Map,t){const e=JSON.parse(t);if(e)for(const t of e)t.name&&t.schema&&(t.schema.name=t.name,this._map.set(t.name,t.schema),Object.prototype.hasOwnProperty.call(t.schema,"operator")&&this._operatorMap.set(t.schema.operator,t.name))}}operator(t){return this._operatorMap.get(t)}type(t){return this._map.get(t)}attribute(t,e){const n=t+":"+e;if(!this._attributeCache.has(n)){const e=this.type(t);if(e&&e.attributes&&e.attributes.length>0)for(const n of e.attributes)this._attributeCache.set(t+":"+n.name,n);this._attributeCache.has(n)||this._attributeCache.set(n,null)}return this._attributeCache.get(n)}},tnn.TextProtoReader=class{constructor(t){const e=(t,e,n,s)=>t.split(e).map((t=>n?t.trim():t)).filter((t=>!s||t)),n=e(t.replace(/\r?\n|"/g,""),",",!0,!1);if(n.length<=5)throw new tnn.Error("Invalid line count.");const s=e(n.shift()," ",!0,!1);if(s.length<3)throw new tnn.Error("Invalid header size.");if(s.length>3&&"4206624770"!==s[3])throw new tnn.Error("Invalid signature '"+s[3]+"'.");for(this._inputs=e(n.shift(),":",!0,!1).map((t=>{const n=e(t," ",!0,!1);return{name:n.shift(),shape:n.map((t=>parseInt(t,10)))}})),n.shift(),this._outputs=e(n.shift()," ",!0,!1).map((t=>({name:t}))),n.shift(),this._layers=[];n.length>0;){const t=n.shift().trim();if(t.length>0){const n=e(t," ",!0,!0),s={};s.type=n.shift(),s.name=n.shift();const i=parseInt(n.shift(),10),a=parseInt(n.shift(),10);s.inputs=n.splice(0,i),s.outputs=n.splice(0,a),s.attr={},s.attributes=[];let r=0;for(const t of n){const e=t.split(" ");if(1===e.length){let t=r,n=e.toString();const i=parseInt(t,10);i<0&&(n=n.split(",").map((t=>t.trim())),n.shift(),t=(-(i+23300)).toString()),s.attr[t]=n,s.attributes.push({key:t,value:n}),r++}}this._layers.push(s)}}}get inputs(){return this._inputs}get outputs(){return this._outputs}get layers(){return this._layers}},tnn.LayerResourceReader=class{constructor(t){if(this._layerResources=[],t){const e=new tnn.BinaryReader(t),n=e.uint32();if(4206624770!==n)throw new tnn.Error("Invalid blob header signature '"+n.toString()+"'.");const s=536870911&e.int32(),i=t=>{const e=t.uint32();if(4206624770!==e)throw new tnn.Error("Invalid raw signature '"+e.toString()+"'.");const n=t.int32();if(n>4)throw new tnn.Error("Unknown data type '"+n+"'.");const s=t.int32();return s<=0?null:{dataType:["float32","float16","int8","int32","bfloat16"][n],length:s/[4,2,1,4,2][n],value:t.bytes(s)}};for(let t=0;t<s;t++){const t={};switch(t.operator=e.int32(),t.type=e.string(),t.name=e.string(),t.type){case"Convolution":case"ConvolutionDepthWise":case"Deconvolution":case"DeconvolutionDepthWise":{e.expect(t.name);const n=e.int32();t.filter=i(e),n&&(t.bias=i(e)),"int8"===t.filter.dataType&&(t.quantized=i());break}case"Conv3D":{e.expect(t.name);const n=e.int32();t.filter=i(e),n&&(t.bias=i(e));break}case"InnerProduct":e.expect(t.name),t.weight=i(e),t.bias=i(e),"int8"===t.weight.dataType&&(t.scale=i());break;case"PReLU":e.expect(t.name),t.slope=i(e);break;case"Add":case"Div":case"Mul":case"Sub":t.slope=i(e);break;case"BatchNormCxx":t.scale=i(e),t.bias=i(e);break;case"HdrGuide":t.ccm_weight=i(e),t.ccm_bias=i(e),t.shifts=i(e),t.slopes=i(e),t.projection_weight=i(e),t.projection_bias=i(e);break;case"BlobScale":t.scale=i(e),t.bias=i(e);break;default:throw new tnn.Error("Unknown layer resource type '"+t.type+"'.")}this._layerResources.push(t)}if(!e.end())throw new tnn.Error("Invalid blob size.")}}read(t){const e=this._layerResources.shift();if(e&&e.name!==t)throw new tnn.Error("Invalid blob layer name '"+t+"'.");return e}},tnn.BinaryReader=class{constructor(t){this._buffer=t,this._dataView=new DataView(t.buffer,t.byteOffset,t.byteLength),this._position=0}end(){return this._position===this._buffer.length}skip(t){if(this._position+=t,this._position>this._buffer.length)throw new tnn.Error("Expected "+(this._position-this._buffer.length)+" more bytes. The file might be corrupted. Unexpected end of file.")}bytes(t){const e=this._position;return this.skip(t),this._buffer.subarray(e,this._position)}uint32(){const t=this._position;return this.skip(4),this._dataView.getUint32(t,!0)}int32(){const t=this._position;return this.skip(4),this._dataView.getInt32(t,!0)}string(){const t=this.int32(),e=this._position;this.skip(t);const n=this._buffer.subarray(e,this._position);return new TextDecoder("utf-8").decode(n)}expect(t){const e=this.string();if(t!==e)throw new tnn.Error("Invalid string '"+e+"' instead of '"+t+"'.")}},tnn.Error=class extends Error{constructor(t){super(t),this.name="Error loading TNN model."}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.ModelFactory=tnn.ModelFactory);