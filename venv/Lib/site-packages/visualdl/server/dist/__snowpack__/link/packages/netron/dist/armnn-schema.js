var $root=flatbuffers.get("armnn");$root.armnnSerializer=$root.armnnSerializer||{},$root.armnnSerializer.ActivationFunction={Sigmoid:0,TanH:1,Linear:2,ReLu:3,BoundedReLu:4,SoftReLu:5,LeakyReLu:6,Abs:7,Sqrt:8,Square:9,Elu:10,HardSwish:11},$root.armnnSerializer.ArgMinMaxFunction={Min:0,Max:1},$root.armnnSerializer.DataType={Float16:0,Float32:1,QuantisedAsymm8:2,Signed32:3,Boolean:4,QuantisedSymm16:5,QAsymmU8:6,QSymmS16:7,QAsymmS8:8,QSymmS8:9},$root.armnnSerializer.DataLayout={NHWC:0,NCHW:1},$root.armnnSerializer.ResizeMethod={NearestNeighbor:0,Bilinear:1},$root.armnnSerializer.TensorInfo=class{static decode(e,r){const t=new $root.armnnSerializer.TensorInfo;return t.dimensions=e.typedArray(r,4,Uint32Array),t.dataType=e.int8_(r,6,0),t.quantizationScale=e.float32_(r,8,1),t.quantizationOffset=e.int32_(r,10,0),t.quantizationScales=e.typedArray(r,12,Float32Array),t.quantizationDim=e.uint32_(r,14,0),t.dimensionality=e.uint32_(r,16,1),t}static decodeText(e,r){const t=new $root.armnnSerializer.TensorInfo;return t.dimensions=e.typedArray(r.dimensions,Uint32Array),t.dataType=$root.armnnSerializer.DataType[r.dataType],t.quantizationScale=e.value(r.quantizationScale,1),t.quantizationOffset=e.value(r.quantizationOffset,0),t.quantizationScales=e.typedArray(r.quantizationScales,Float32Array),t.quantizationDim=e.value(r.quantizationDim,0),t.dimensionality=e.value(r.dimensionality,1),t}},$root.armnnSerializer.Connection=class{static decode(e,r){const t=new $root.armnnSerializer.Connection;return t.sourceLayerIndex=e.uint32(r+0),t.outputSlotIndex=e.uint32(r+4),t}static decodeText(e,r){const t=new $root.armnnSerializer.Connection;return t.sourceLayerIndex=r.sourceLayerIndex,t.outputSlotIndex=r.outputSlotIndex,t}},$root.armnnSerializer.ByteData=class{static decode(e,r){const t=new $root.armnnSerializer.ByteData;return t.data=e.typedArray(r,4,Int8Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.ByteData;return t.data=e.typedArray(r.data,Int8Array),t}},$root.armnnSerializer.ShortData=class{static decode(e,r){const t=new $root.armnnSerializer.ShortData;return t.data=e.typedArray(r,4,Int16Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.ShortData;return t.data=e.typedArray(r.data,Int16Array),t}},$root.armnnSerializer.IntData=class{static decode(e,r){const t=new $root.armnnSerializer.IntData;return t.data=e.typedArray(r,4,Int32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.IntData;return t.data=e.typedArray(r.data,Int32Array),t}},$root.armnnSerializer.LongData=class{static decode(e,r){const t=new $root.armnnSerializer.LongData;return t.data=e.int64s_(r,4),t}static decodeText(e,r){const t=new $root.armnnSerializer.LongData;return t.data=e.array(r.data),t}},$root.armnnSerializer.ConstTensorData=class{static decode(e,r,t){switch(t){case 1:return $root.armnnSerializer.ByteData.decode(e,r);case 2:return $root.armnnSerializer.ShortData.decode(e,r);case 3:return $root.armnnSerializer.IntData.decode(e,r);case 4:return $root.armnnSerializer.LongData.decode(e,r)}}static decodeText(e,r,t){switch(t){case"ByteData":return $root.armnnSerializer.ByteData.decodeText(e,r);case"ShortData":return $root.armnnSerializer.ShortData.decodeText(e,r);case"IntData":return $root.armnnSerializer.IntData.decodeText(e,r);case"LongData":return $root.armnnSerializer.LongData.decodeText(e,r)}}},$root.armnnSerializer.ConstTensor=class{static decode(e,r){const t=new $root.armnnSerializer.ConstTensor;return t.info=e.table(r,4,$root.armnnSerializer.TensorInfo.decode),t.data=e.union(r,6,$root.armnnSerializer.ConstTensorData.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ConstTensor;return t.info=e.object(r.info,$root.armnnSerializer.TensorInfo.decodeText),t.data=$root.armnnSerializer.ConstTensorData.decodeText(e,r.data,r.data_type),t}},$root.armnnSerializer.InputSlot=class{static decode(e,r){const t=new $root.armnnSerializer.InputSlot;return t.index=e.uint32_(r,4,0),t.connection=e.struct(r,6,$root.armnnSerializer.Connection.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.InputSlot;return t.index=e.value(r.index,0),t.connection=e.object(r.connection,$root.armnnSerializer.Connection.decodeText),t}},$root.armnnSerializer.OutputSlot=class{static decode(e,r){const t=new $root.armnnSerializer.OutputSlot;return t.index=e.uint32_(r,4,0),t.tensorInfo=e.table(r,6,$root.armnnSerializer.TensorInfo.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.OutputSlot;return t.index=e.value(r.index,0),t.tensorInfo=e.object(r.tensorInfo,$root.armnnSerializer.TensorInfo.decodeText),t}},$root.armnnSerializer.LayerType={Addition:0,Input:1,Multiplication:2,Output:3,Pooling2d:4,Reshape:5,Softmax:6,Convolution2d:7,DepthwiseConvolution2d:8,Activation:9,Permute:10,FullyConnected:11,Constant:12,SpaceToBatchNd:13,BatchToSpaceNd:14,Division:15,Minimum:16,Equal:17,Maximum:18,Normalization:19,Pad:20,Rsqrt:21,Floor:22,BatchNormalization:23,Greater:24,ResizeBilinear:25,Subtraction:26,StridedSlice:27,Gather:28,Mean:29,Merger:30,L2Normalization:31,Splitter:32,DetectionPostProcess:33,Lstm:34,Quantize:35,Dequantize:36,Merge:37,Switch:38,Concat:39,SpaceToDepth:40,Prelu:41,TransposeConvolution2d:42,Resize:43,Stack:44,QuantizedLstm:45,Abs:46,ArgMinMax:47,Slice:48,DepthToSpace:49,InstanceNormalization:50,LogSoftmax:51,Comparison:52,StandIn:53,ElementwiseUnary:54,Transpose:55,QLstm:56,Fill:57,Rank:58},$root.armnnSerializer.LayerBase=class{static decode(e,r){const t=new $root.armnnSerializer.LayerBase;return t.index=e.uint32_(r,4,0),t.layerName=e.string_(r,6,null),t.layerType=e.uint32_(r,8,0),t.inputSlots=e.tableArray(r,10,$root.armnnSerializer.InputSlot.decode),t.outputSlots=e.tableArray(r,12,$root.armnnSerializer.OutputSlot.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.LayerBase;return t.index=e.value(r.index,0),t.layerName=e.value(r.layerName,null),t.layerType=$root.armnnSerializer.LayerType[r.layerType],t.inputSlots=e.objectArray(r.inputSlots,$root.armnnSerializer.InputSlot.decodeText),t.outputSlots=e.objectArray(r.outputSlots,$root.armnnSerializer.OutputSlot.decodeText),t}},$root.armnnSerializer.BindableLayerBase=class{static decode(e,r){const t=new $root.armnnSerializer.BindableLayerBase;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.layerBindingId=e.int32_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.BindableLayerBase;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.layerBindingId=e.value(r.layerBindingId,0),t}},$root.armnnSerializer.AbsLayer=class{static decode(e,r){const t=new $root.armnnSerializer.AbsLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.AbsLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.ActivationLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ActivationLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ActivationDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ActivationLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ActivationDescriptor.decodeText),t}},$root.armnnSerializer.ActivationDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ActivationDescriptor;return t.activationFunction=e.int8_(r,4,0),t.a=e.float32_(r,6,0),t.b=e.float32_(r,8,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.ActivationDescriptor;return t.activationFunction=$root.armnnSerializer.ActivationFunction[r.activationFunction],t.a=e.value(r.a,0),t.b=e.value(r.b,0),t}},$root.armnnSerializer.AdditionLayer=class{static decode(e,r){const t=new $root.armnnSerializer.AdditionLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.AdditionLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.ArgMinMaxLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ArgMinMaxLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ArgMinMaxDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ArgMinMaxLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ArgMinMaxDescriptor.decodeText),t}},$root.armnnSerializer.ArgMinMaxDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ArgMinMaxDescriptor;return t.argMinMaxFunction=e.int8_(r,4,0),t.axis=e.int32_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.ArgMinMaxDescriptor;return t.argMinMaxFunction=$root.armnnSerializer.ArgMinMaxFunction[r.argMinMaxFunction],t.axis=e.value(r.axis,0),t}},$root.armnnSerializer.ComparisonOperation={Equal:0,Greater:1,GreaterOrEqual:2,Less:3,LessOrEqual:4,NotEqual:5},$root.armnnSerializer.ComparisonDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ComparisonDescriptor;return t.operation=e.int8_(r,4,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.ComparisonDescriptor;return t.operation=$root.armnnSerializer.ComparisonOperation[r.operation],t}},$root.armnnSerializer.ComparisonLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ComparisonLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ComparisonDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ComparisonLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ComparisonDescriptor.decodeText),t}},$root.armnnSerializer.ConstantLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ConstantLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.input=e.table(r,6,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ConstantLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.input=e.object(r.input,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.Convolution2dLayer=class{static decode(e,r){const t=new $root.armnnSerializer.Convolution2dLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.Convolution2dDescriptor.decode),t.weights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.biases=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.Convolution2dLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.Convolution2dDescriptor.decodeText),t.weights=e.object(r.weights,$root.armnnSerializer.ConstTensor.decodeText),t.biases=e.object(r.biases,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.Convolution2dDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.Convolution2dDescriptor;return t.padLeft=e.uint32_(r,4,0),t.padRight=e.uint32_(r,6,0),t.padTop=e.uint32_(r,8,0),t.padBottom=e.uint32_(r,10,0),t.strideX=e.uint32_(r,12,0),t.strideY=e.uint32_(r,14,0),t.dilationX=e.uint32_(r,16,1),t.dilationY=e.uint32_(r,18,1),t.biasEnabled=e.bool_(r,20,!1),t.dataLayout=e.int8_(r,22,1),t}static decodeText(e,r){const t=new $root.armnnSerializer.Convolution2dDescriptor;return t.padLeft=e.value(r.padLeft,0),t.padRight=e.value(r.padRight,0),t.padTop=e.value(r.padTop,0),t.padBottom=e.value(r.padBottom,0),t.strideX=e.value(r.strideX,0),t.strideY=e.value(r.strideY,0),t.dilationX=e.value(r.dilationX,1),t.dilationY=e.value(r.dilationY,1),t.biasEnabled=e.value(r.biasEnabled,!1),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.DepthToSpaceLayer=class{static decode(e,r){const t=new $root.armnnSerializer.DepthToSpaceLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.DepthToSpaceDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.DepthToSpaceLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.DepthToSpaceDescriptor.decodeText),t}},$root.armnnSerializer.DepthToSpaceDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.DepthToSpaceDescriptor;return t.blockSize=e.uint32_(r,4,0),t.dataLayout=e.int8_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.DepthToSpaceDescriptor;return t.blockSize=e.value(r.blockSize,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.DivisionLayer=class{static decode(e,r){const t=new $root.armnnSerializer.DivisionLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.DivisionLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.UnaryOperation={Abs:0,Rsqrt:1,Sqrt:2,Exp:3,Neg:4},$root.armnnSerializer.ElementwiseUnaryDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ElementwiseUnaryDescriptor;return t.operation=e.int8_(r,4,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.ElementwiseUnaryDescriptor;return t.operation=$root.armnnSerializer.UnaryOperation[r.operation],t}},$root.armnnSerializer.ElementwiseUnaryLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ElementwiseUnaryLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ElementwiseUnaryDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ElementwiseUnaryLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ElementwiseUnaryDescriptor.decodeText),t}},$root.armnnSerializer.EqualLayer=class{static decode(e,r){const t=new $root.armnnSerializer.EqualLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.EqualLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.FillLayer=class{static decode(e,r){const t=new $root.armnnSerializer.FillLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.FillDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.FillLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.FillDescriptor.decodeText),t}},$root.armnnSerializer.FillDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.FillDescriptor;return t.value=e.float32_(r,4,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.FillDescriptor;return t.value=e.value(r.value,0),t}},$root.armnnSerializer.FloorLayer=class{static decode(e,r){const t=new $root.armnnSerializer.FloorLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.FloorLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.FullyConnectedLayer=class{static decode(e,r){const t=new $root.armnnSerializer.FullyConnectedLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.FullyConnectedDescriptor.decode),t.weights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.biases=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.FullyConnectedLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.FullyConnectedDescriptor.decodeText),t.weights=e.object(r.weights,$root.armnnSerializer.ConstTensor.decodeText),t.biases=e.object(r.biases,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.FullyConnectedDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.FullyConnectedDescriptor;return t.biasEnabled=e.bool_(r,4,!1),t.transposeWeightsMatrix=e.bool_(r,6,!1),t}static decodeText(e,r){const t=new $root.armnnSerializer.FullyConnectedDescriptor;return t.biasEnabled=e.value(r.biasEnabled,!1),t.transposeWeightsMatrix=e.value(r.transposeWeightsMatrix,!1),t}},$root.armnnSerializer.GatherLayer=class{static decode(e,r){const t=new $root.armnnSerializer.GatherLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.GatherDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.GatherLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.GatherDescriptor.decodeText),t}},$root.armnnSerializer.GatherDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.GatherDescriptor;return t.axis=e.int32_(r,4,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.GatherDescriptor;return t.axis=e.value(r.axis,0),t}},$root.armnnSerializer.GreaterLayer=class{static decode(e,r){const t=new $root.armnnSerializer.GreaterLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.GreaterLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.InputLayer=class{static decode(e,r){const t=new $root.armnnSerializer.InputLayer;return t.base=e.table(r,4,$root.armnnSerializer.BindableLayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.InputLayer;return t.base=e.object(r.base,$root.armnnSerializer.BindableLayerBase.decodeText),t}},$root.armnnSerializer.InstanceNormalizationLayer=class{static decode(e,r){const t=new $root.armnnSerializer.InstanceNormalizationLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.InstanceNormalizationDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.InstanceNormalizationLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.InstanceNormalizationDescriptor.decodeText),t}},$root.armnnSerializer.InstanceNormalizationDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.InstanceNormalizationDescriptor;return t.gamma=e.float32_(r,4,0),t.beta=e.float32_(r,6,0),t.eps=e.float32_(r,8,0),t.dataLayout=e.int8_(r,10,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.InstanceNormalizationDescriptor;return t.gamma=e.value(r.gamma,0),t.beta=e.value(r.beta,0),t.eps=e.value(r.eps,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.LogSoftmaxLayer=class{static decode(e,r){const t=new $root.armnnSerializer.LogSoftmaxLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.LogSoftmaxDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.LogSoftmaxLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.LogSoftmaxDescriptor.decodeText),t}},$root.armnnSerializer.LogSoftmaxDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.LogSoftmaxDescriptor;return t.beta=e.float32_(r,4,1),t.axis=e.int32_(r,6,-1),t}static decodeText(e,r){const t=new $root.armnnSerializer.LogSoftmaxDescriptor;return t.beta=e.value(r.beta,1),t.axis=e.value(r.axis,-1),t}},$root.armnnSerializer.L2NormalizationLayer=class{static decode(e,r){const t=new $root.armnnSerializer.L2NormalizationLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.L2NormalizationDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.L2NormalizationLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.L2NormalizationDescriptor.decodeText),t}},$root.armnnSerializer.L2NormalizationDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.L2NormalizationDescriptor;return t.dataLayout=e.int8_(r,4,1),t.eps=e.float32_(r,6,1e-12),t}static decodeText(e,r){const t=new $root.armnnSerializer.L2NormalizationDescriptor;return t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t.eps=e.value(r.eps,1e-12),t}},$root.armnnSerializer.MinimumLayer=class{static decode(e,r){const t=new $root.armnnSerializer.MinimumLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.MinimumLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.MaximumLayer=class{static decode(e,r){const t=new $root.armnnSerializer.MaximumLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.MaximumLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.MultiplicationLayer=class{static decode(e,r){const t=new $root.armnnSerializer.MultiplicationLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.MultiplicationLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.Pooling2dLayer=class{static decode(e,r){const t=new $root.armnnSerializer.Pooling2dLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.Pooling2dDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.Pooling2dLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.Pooling2dDescriptor.decodeText),t}},$root.armnnSerializer.PoolingAlgorithm={Max:0,Average:1,L2:2},$root.armnnSerializer.OutputShapeRounding={Floor:0,Ceiling:1},$root.armnnSerializer.PaddingMethod={IgnoreValue:0,Exclude:1},$root.armnnSerializer.Pooling2dDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.Pooling2dDescriptor;return t.poolType=e.int8_(r,4,0),t.padLeft=e.uint32_(r,6,0),t.padRight=e.uint32_(r,8,0),t.padTop=e.uint32_(r,10,0),t.padBottom=e.uint32_(r,12,0),t.poolWidth=e.uint32_(r,14,0),t.poolHeight=e.uint32_(r,16,0),t.strideX=e.uint32_(r,18,0),t.strideY=e.uint32_(r,20,0),t.outputShapeRounding=e.int8_(r,22,0),t.paddingMethod=e.int8_(r,24,0),t.dataLayout=e.int8_(r,26,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.Pooling2dDescriptor;return t.poolType=$root.armnnSerializer.PoolingAlgorithm[r.poolType],t.padLeft=e.value(r.padLeft,0),t.padRight=e.value(r.padRight,0),t.padTop=e.value(r.padTop,0),t.padBottom=e.value(r.padBottom,0),t.poolWidth=e.value(r.poolWidth,0),t.poolHeight=e.value(r.poolHeight,0),t.strideX=e.value(r.strideX,0),t.strideY=e.value(r.strideY,0),t.outputShapeRounding=$root.armnnSerializer.OutputShapeRounding[r.outputShapeRounding],t.paddingMethod=$root.armnnSerializer.PaddingMethod[r.paddingMethod],t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.QuantizeLayer=class{static decode(e,r){const t=new $root.armnnSerializer.QuantizeLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.QuantizeLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.SoftmaxLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SoftmaxLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.SoftmaxDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SoftmaxLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.SoftmaxDescriptor.decodeText),t}},$root.armnnSerializer.SoftmaxDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.SoftmaxDescriptor;return t.beta=e.float32_(r,4,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.SoftmaxDescriptor;return t.beta=e.value(r.beta,0),t}},$root.armnnSerializer.DepthwiseConvolution2dLayer=class{static decode(e,r){const t=new $root.armnnSerializer.DepthwiseConvolution2dLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.DepthwiseConvolution2dDescriptor.decode),t.weights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.biases=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.DepthwiseConvolution2dLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.DepthwiseConvolution2dDescriptor.decodeText),t.weights=e.object(r.weights,$root.armnnSerializer.ConstTensor.decodeText),t.biases=e.object(r.biases,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.DepthwiseConvolution2dDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.DepthwiseConvolution2dDescriptor;return t.padLeft=e.uint32_(r,4,0),t.padRight=e.uint32_(r,6,0),t.padTop=e.uint32_(r,8,0),t.padBottom=e.uint32_(r,10,0),t.strideX=e.uint32_(r,12,0),t.strideY=e.uint32_(r,14,0),t.dilationX=e.uint32_(r,16,1),t.dilationY=e.uint32_(r,18,1),t.biasEnabled=e.bool_(r,20,!1),t.dataLayout=e.int8_(r,22,1),t}static decodeText(e,r){const t=new $root.armnnSerializer.DepthwiseConvolution2dDescriptor;return t.padLeft=e.value(r.padLeft,0),t.padRight=e.value(r.padRight,0),t.padTop=e.value(r.padTop,0),t.padBottom=e.value(r.padBottom,0),t.strideX=e.value(r.strideX,0),t.strideY=e.value(r.strideY,0),t.dilationX=e.value(r.dilationX,1),t.dilationY=e.value(r.dilationY,1),t.biasEnabled=e.value(r.biasEnabled,!1),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.OutputLayer=class{static decode(e,r){const t=new $root.armnnSerializer.OutputLayer;return t.base=e.table(r,4,$root.armnnSerializer.BindableLayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.OutputLayer;return t.base=e.object(r.base,$root.armnnSerializer.BindableLayerBase.decodeText),t}},$root.armnnSerializer.ReshapeLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ReshapeLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ReshapeDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ReshapeLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ReshapeDescriptor.decodeText),t}},$root.armnnSerializer.ReshapeDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ReshapeDescriptor;return t.targetShape=e.typedArray(r,4,Uint32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.ReshapeDescriptor;return t.targetShape=e.typedArray(r.targetShape,Uint32Array),t}},$root.armnnSerializer.PermuteLayer=class{static decode(e,r){const t=new $root.armnnSerializer.PermuteLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.PermuteDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.PermuteLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.PermuteDescriptor.decodeText),t}},$root.armnnSerializer.PermuteDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.PermuteDescriptor;return t.dimMappings=e.typedArray(r,4,Uint32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.PermuteDescriptor;return t.dimMappings=e.typedArray(r.dimMappings,Uint32Array),t}},$root.armnnSerializer.SpaceToBatchNdLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SpaceToBatchNdLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.SpaceToBatchNdDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SpaceToBatchNdLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.SpaceToBatchNdDescriptor.decodeText),t}},$root.armnnSerializer.SpaceToBatchNdDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.SpaceToBatchNdDescriptor;return t.blockShape=e.typedArray(r,4,Uint32Array),t.padList=e.typedArray(r,6,Uint32Array),t.dataLayout=e.int8_(r,8,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.SpaceToBatchNdDescriptor;return t.blockShape=e.typedArray(r.blockShape,Uint32Array),t.padList=e.typedArray(r.padList,Uint32Array),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.SpaceToDepthLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SpaceToDepthLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.SpaceToDepthDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SpaceToDepthLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.SpaceToDepthDescriptor.decodeText),t}},$root.armnnSerializer.SpaceToDepthDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.SpaceToDepthDescriptor;return t.blockSize=e.uint32_(r,4,0),t.dataLayout=e.int8_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.SpaceToDepthDescriptor;return t.blockSize=e.value(r.blockSize,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.SubtractionLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SubtractionLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SubtractionLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.BatchToSpaceNdLayer=class{static decode(e,r){const t=new $root.armnnSerializer.BatchToSpaceNdLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.BatchToSpaceNdDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.BatchToSpaceNdLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.BatchToSpaceNdDescriptor.decodeText),t}},$root.armnnSerializer.BatchToSpaceNdDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.BatchToSpaceNdDescriptor;return t.blockShape=e.typedArray(r,4,Uint32Array),t.crops=e.typedArray(r,6,Uint32Array),t.dataLayout=e.int8_(r,8,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.BatchToSpaceNdDescriptor;return t.blockShape=e.typedArray(r.blockShape,Uint32Array),t.crops=e.typedArray(r.crops,Uint32Array),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.NormalizationAlgorithmChannel={Across:0,Within:1},$root.armnnSerializer.NormalizationAlgorithmMethod={LocalBrightness:0,LocalContrast:1},$root.armnnSerializer.NormalizationLayer=class{static decode(e,r){const t=new $root.armnnSerializer.NormalizationLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.NormalizationDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.NormalizationLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.NormalizationDescriptor.decodeText),t}},$root.armnnSerializer.NormalizationDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.NormalizationDescriptor;return t.normChannelType=e.int8_(r,4,0),t.normMethodType=e.int8_(r,6,0),t.normSize=e.uint32_(r,8,0),t.alpha=e.float32_(r,10,0),t.beta=e.float32_(r,12,0),t.k=e.float32_(r,14,0),t.dataLayout=e.int8_(r,16,1),t}static decodeText(e,r){const t=new $root.armnnSerializer.NormalizationDescriptor;return t.normChannelType=$root.armnnSerializer.NormalizationAlgorithmChannel[r.normChannelType],t.normMethodType=$root.armnnSerializer.NormalizationAlgorithmMethod[r.normMethodType],t.normSize=e.value(r.normSize,0),t.alpha=e.value(r.alpha,0),t.beta=e.value(r.beta,0),t.k=e.value(r.k,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.MeanLayer=class{static decode(e,r){const t=new $root.armnnSerializer.MeanLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.MeanDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.MeanLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.MeanDescriptor.decodeText),t}},$root.armnnSerializer.MeanDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.MeanDescriptor;return t.axis=e.typedArray(r,4,Uint32Array),t.keepDims=e.bool_(r,6,!1),t}static decodeText(e,r){const t=new $root.armnnSerializer.MeanDescriptor;return t.axis=e.typedArray(r.axis,Uint32Array),t.keepDims=e.value(r.keepDims,!1),t}},$root.armnnSerializer.PadLayer=class{static decode(e,r){const t=new $root.armnnSerializer.PadLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.PadDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.PadLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.PadDescriptor.decodeText),t}},$root.armnnSerializer.PadDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.PadDescriptor;return t.padList=e.typedArray(r,4,Uint32Array),t.padValue=e.float32_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.PadDescriptor;return t.padList=e.typedArray(r.padList,Uint32Array),t.padValue=e.value(r.padValue,0),t}},$root.armnnSerializer.RsqrtLayer=class{static decode(e,r){const t=new $root.armnnSerializer.RsqrtLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.RsqrtLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.BatchNormalizationLayer=class{static decode(e,r){const t=new $root.armnnSerializer.BatchNormalizationLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.BatchNormalizationDescriptor.decode),t.mean=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.variance=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t.beta=e.table(r,12,$root.armnnSerializer.ConstTensor.decode),t.gamma=e.table(r,14,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.BatchNormalizationLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.BatchNormalizationDescriptor.decodeText),t.mean=e.object(r.mean,$root.armnnSerializer.ConstTensor.decodeText),t.variance=e.object(r.variance,$root.armnnSerializer.ConstTensor.decodeText),t.beta=e.object(r.beta,$root.armnnSerializer.ConstTensor.decodeText),t.gamma=e.object(r.gamma,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.BatchNormalizationDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.BatchNormalizationDescriptor;return t.eps=e.float32_(r,4,0),t.dataLayout=e.int8_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.BatchNormalizationDescriptor;return t.eps=e.value(r.eps,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.ResizeBilinearLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ResizeBilinearLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ResizeBilinearDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ResizeBilinearLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ResizeBilinearDescriptor.decodeText),t}},$root.armnnSerializer.ResizeBilinearDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ResizeBilinearDescriptor;return t.targetWidth=e.uint32_(r,4,0),t.targetHeight=e.uint32_(r,6,0),t.dataLayout=e.int8_(r,8,0),t.alignCorners=e.bool_(r,10,!1),t.halfPixelCenters=e.bool_(r,12,!1),t}static decodeText(e,r){const t=new $root.armnnSerializer.ResizeBilinearDescriptor;return t.targetWidth=e.value(r.targetWidth,0),t.targetHeight=e.value(r.targetHeight,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t.alignCorners=e.value(r.alignCorners,!1),t.halfPixelCenters=e.value(r.halfPixelCenters,!1),t}},$root.armnnSerializer.SliceLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SliceLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.SliceDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SliceLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.SliceDescriptor.decodeText),t}},$root.armnnSerializer.SliceDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.SliceDescriptor;return t.begin=e.typedArray(r,4,Uint32Array),t.size=e.typedArray(r,6,Uint32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.SliceDescriptor;return t.begin=e.typedArray(r.begin,Uint32Array),t.size=e.typedArray(r.size,Uint32Array),t}},$root.armnnSerializer.StridedSliceLayer=class{static decode(e,r){const t=new $root.armnnSerializer.StridedSliceLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.StridedSliceDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.StridedSliceLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.StridedSliceDescriptor.decodeText),t}},$root.armnnSerializer.StridedSliceDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.StridedSliceDescriptor;return t.begin=e.typedArray(r,4,Int32Array),t.end=e.typedArray(r,6,Int32Array),t.stride=e.typedArray(r,8,Int32Array),t.beginMask=e.int32_(r,10,0),t.endMask=e.int32_(r,12,0),t.shrinkAxisMask=e.int32_(r,14,0),t.ellipsisMask=e.int32_(r,16,0),t.newAxisMask=e.int32_(r,18,0),t.dataLayout=e.int8_(r,20,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.StridedSliceDescriptor;return t.begin=e.typedArray(r.begin,Int32Array),t.end=e.typedArray(r.end,Int32Array),t.stride=e.typedArray(r.stride,Int32Array),t.beginMask=e.value(r.beginMask,0),t.endMask=e.value(r.endMask,0),t.shrinkAxisMask=e.value(r.shrinkAxisMask,0),t.ellipsisMask=e.value(r.ellipsisMask,0),t.newAxisMask=e.value(r.newAxisMask,0),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.ConcatLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ConcatLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.OriginsDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ConcatLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.OriginsDescriptor.decodeText),t}},$root.armnnSerializer.MergerLayer=class{static decode(e,r){const t=new $root.armnnSerializer.MergerLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.OriginsDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.MergerLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.OriginsDescriptor.decodeText),t}},$root.armnnSerializer.UintVector=class{static decode(e,r){const t=new $root.armnnSerializer.UintVector;return t.data=e.typedArray(r,4,Uint32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.UintVector;return t.data=e.typedArray(r.data,Uint32Array),t}},$root.armnnSerializer.OriginsDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.OriginsDescriptor;return t.concatAxis=e.uint32_(r,4,0),t.numViews=e.uint32_(r,6,0),t.numDimensions=e.uint32_(r,8,0),t.viewOrigins=e.tableArray(r,10,$root.armnnSerializer.UintVector.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.OriginsDescriptor;return t.concatAxis=e.value(r.concatAxis,0),t.numViews=e.value(r.numViews,0),t.numDimensions=e.value(r.numDimensions,0),t.viewOrigins=e.objectArray(r.viewOrigins,$root.armnnSerializer.UintVector.decodeText),t}},$root.armnnSerializer.ViewsDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ViewsDescriptor;return t.origins=e.table(r,4,$root.armnnSerializer.OriginsDescriptor.decode),t.viewSizes=e.tableArray(r,6,$root.armnnSerializer.UintVector.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ViewsDescriptor;return t.origins=e.object(r.origins,$root.armnnSerializer.OriginsDescriptor.decodeText),t.viewSizes=e.objectArray(r.viewSizes,$root.armnnSerializer.UintVector.decodeText),t}},$root.armnnSerializer.SplitterLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SplitterLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ViewsDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SplitterLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ViewsDescriptor.decodeText),t}},$root.armnnSerializer.DetectionPostProcessLayer=class{static decode(e,r){const t=new $root.armnnSerializer.DetectionPostProcessLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.DetectionPostProcessDescriptor.decode),t.anchors=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.DetectionPostProcessLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.DetectionPostProcessDescriptor.decodeText),t.anchors=e.object(r.anchors,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.DetectionPostProcessDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.DetectionPostProcessDescriptor;return t.maxDetections=e.uint32_(r,4,0),t.maxClassesPerDetection=e.uint32_(r,6,0),t.detectionsPerClass=e.uint32_(r,8,0),t.nmsScoreThreshold=e.float32_(r,10,0),t.nmsIouThreshold=e.float32_(r,12,0),t.numClasses=e.uint32_(r,14,0),t.useRegularNms=e.bool_(r,16,!1),t.scaleX=e.float32_(r,18,0),t.scaleY=e.float32_(r,20,0),t.scaleW=e.float32_(r,22,0),t.scaleH=e.float32_(r,24,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.DetectionPostProcessDescriptor;return t.maxDetections=e.value(r.maxDetections,0),t.maxClassesPerDetection=e.value(r.maxClassesPerDetection,0),t.detectionsPerClass=e.value(r.detectionsPerClass,0),t.nmsScoreThreshold=e.value(r.nmsScoreThreshold,0),t.nmsIouThreshold=e.value(r.nmsIouThreshold,0),t.numClasses=e.value(r.numClasses,0),t.useRegularNms=e.value(r.useRegularNms,!1),t.scaleX=e.value(r.scaleX,0),t.scaleY=e.value(r.scaleY,0),t.scaleW=e.value(r.scaleW,0),t.scaleH=e.value(r.scaleH,0),t}},$root.armnnSerializer.LstmInputParams=class{static decode(e,r){const t=new $root.armnnSerializer.LstmInputParams;return t.inputToForgetWeights=e.table(r,4,$root.armnnSerializer.ConstTensor.decode),t.inputToCellWeights=e.table(r,6,$root.armnnSerializer.ConstTensor.decode),t.inputToOutputWeights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.recurrentToForgetWeights=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t.recurrentToCellWeights=e.table(r,12,$root.armnnSerializer.ConstTensor.decode),t.recurrentToOutputWeights=e.table(r,14,$root.armnnSerializer.ConstTensor.decode),t.forgetGateBias=e.table(r,16,$root.armnnSerializer.ConstTensor.decode),t.cellBias=e.table(r,18,$root.armnnSerializer.ConstTensor.decode),t.outputGateBias=e.table(r,20,$root.armnnSerializer.ConstTensor.decode),t.inputToInputWeights=e.table(r,22,$root.armnnSerializer.ConstTensor.decode),t.recurrentToInputWeights=e.table(r,24,$root.armnnSerializer.ConstTensor.decode),t.cellToInputWeights=e.table(r,26,$root.armnnSerializer.ConstTensor.decode),t.inputGateBias=e.table(r,28,$root.armnnSerializer.ConstTensor.decode),t.projectionWeights=e.table(r,30,$root.armnnSerializer.ConstTensor.decode),t.projectionBias=e.table(r,32,$root.armnnSerializer.ConstTensor.decode),t.cellToForgetWeights=e.table(r,34,$root.armnnSerializer.ConstTensor.decode),t.cellToOutputWeights=e.table(r,36,$root.armnnSerializer.ConstTensor.decode),t.inputLayerNormWeights=e.table(r,38,$root.armnnSerializer.ConstTensor.decode),t.forgetLayerNormWeights=e.table(r,40,$root.armnnSerializer.ConstTensor.decode),t.cellLayerNormWeights=e.table(r,42,$root.armnnSerializer.ConstTensor.decode),t.outputLayerNormWeights=e.table(r,44,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.LstmInputParams;return t.inputToForgetWeights=e.object(r.inputToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToCellWeights=e.object(r.inputToCellWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToOutputWeights=e.object(r.inputToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToForgetWeights=e.object(r.recurrentToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToCellWeights=e.object(r.recurrentToCellWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToOutputWeights=e.object(r.recurrentToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.forgetGateBias=e.object(r.forgetGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.cellBias=e.object(r.cellBias,$root.armnnSerializer.ConstTensor.decodeText),t.outputGateBias=e.object(r.outputGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.inputToInputWeights=e.object(r.inputToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToInputWeights=e.object(r.recurrentToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.cellToInputWeights=e.object(r.cellToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputGateBias=e.object(r.inputGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.projectionWeights=e.object(r.projectionWeights,$root.armnnSerializer.ConstTensor.decodeText),t.projectionBias=e.object(r.projectionBias,$root.armnnSerializer.ConstTensor.decodeText),t.cellToForgetWeights=e.object(r.cellToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.cellToOutputWeights=e.object(r.cellToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputLayerNormWeights=e.object(r.inputLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t.forgetLayerNormWeights=e.object(r.forgetLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t.cellLayerNormWeights=e.object(r.cellLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t.outputLayerNormWeights=e.object(r.outputLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.LstmDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.LstmDescriptor;return t.activationFunc=e.uint32_(r,4,0),t.clippingThresCell=e.float32_(r,6,0),t.clippingThresProj=e.float32_(r,8,0),t.cifgEnabled=e.bool_(r,10,!0),t.peepholeEnabled=e.bool_(r,12,!1),t.projectionEnabled=e.bool_(r,14,!1),t.layerNormEnabled=e.bool_(r,16,!1),t}static decodeText(e,r){const t=new $root.armnnSerializer.LstmDescriptor;return t.activationFunc=e.value(r.activationFunc,0),t.clippingThresCell=e.value(r.clippingThresCell,0),t.clippingThresProj=e.value(r.clippingThresProj,0),t.cifgEnabled=e.value(r.cifgEnabled,!0),t.peepholeEnabled=e.value(r.peepholeEnabled,!1),t.projectionEnabled=e.value(r.projectionEnabled,!1),t.layerNormEnabled=e.value(r.layerNormEnabled,!1),t}},$root.armnnSerializer.LstmLayer=class{static decode(e,r){const t=new $root.armnnSerializer.LstmLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.LstmDescriptor.decode),t.inputParams=e.table(r,8,$root.armnnSerializer.LstmInputParams.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.LstmLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.LstmDescriptor.decodeText),t.inputParams=e.object(r.inputParams,$root.armnnSerializer.LstmInputParams.decodeText),t}},$root.armnnSerializer.QLstmInputParams=class{static decode(e,r){const t=new $root.armnnSerializer.QLstmInputParams;return t.inputToForgetWeights=e.table(r,4,$root.armnnSerializer.ConstTensor.decode),t.inputToCellWeights=e.table(r,6,$root.armnnSerializer.ConstTensor.decode),t.inputToOutputWeights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.recurrentToForgetWeights=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t.recurrentToCellWeights=e.table(r,12,$root.armnnSerializer.ConstTensor.decode),t.recurrentToOutputWeights=e.table(r,14,$root.armnnSerializer.ConstTensor.decode),t.forgetGateBias=e.table(r,16,$root.armnnSerializer.ConstTensor.decode),t.cellBias=e.table(r,18,$root.armnnSerializer.ConstTensor.decode),t.outputGateBias=e.table(r,20,$root.armnnSerializer.ConstTensor.decode),t.inputToInputWeights=e.table(r,22,$root.armnnSerializer.ConstTensor.decode),t.recurrentToInputWeights=e.table(r,24,$root.armnnSerializer.ConstTensor.decode),t.inputGateBias=e.table(r,26,$root.armnnSerializer.ConstTensor.decode),t.projectionWeights=e.table(r,28,$root.armnnSerializer.ConstTensor.decode),t.projectionBias=e.table(r,30,$root.armnnSerializer.ConstTensor.decode),t.cellToInputWeights=e.table(r,32,$root.armnnSerializer.ConstTensor.decode),t.cellToForgetWeights=e.table(r,34,$root.armnnSerializer.ConstTensor.decode),t.cellToOutputWeights=e.table(r,36,$root.armnnSerializer.ConstTensor.decode),t.inputLayerNormWeights=e.table(r,38,$root.armnnSerializer.ConstTensor.decode),t.forgetLayerNormWeights=e.table(r,40,$root.armnnSerializer.ConstTensor.decode),t.cellLayerNormWeights=e.table(r,42,$root.armnnSerializer.ConstTensor.decode),t.outputLayerNormWeights=e.table(r,44,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.QLstmInputParams;return t.inputToForgetWeights=e.object(r.inputToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToCellWeights=e.object(r.inputToCellWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToOutputWeights=e.object(r.inputToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToForgetWeights=e.object(r.recurrentToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToCellWeights=e.object(r.recurrentToCellWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToOutputWeights=e.object(r.recurrentToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.forgetGateBias=e.object(r.forgetGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.cellBias=e.object(r.cellBias,$root.armnnSerializer.ConstTensor.decodeText),t.outputGateBias=e.object(r.outputGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.inputToInputWeights=e.object(r.inputToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToInputWeights=e.object(r.recurrentToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputGateBias=e.object(r.inputGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.projectionWeights=e.object(r.projectionWeights,$root.armnnSerializer.ConstTensor.decodeText),t.projectionBias=e.object(r.projectionBias,$root.armnnSerializer.ConstTensor.decodeText),t.cellToInputWeights=e.object(r.cellToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.cellToForgetWeights=e.object(r.cellToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.cellToOutputWeights=e.object(r.cellToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputLayerNormWeights=e.object(r.inputLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t.forgetLayerNormWeights=e.object(r.forgetLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t.cellLayerNormWeights=e.object(r.cellLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t.outputLayerNormWeights=e.object(r.outputLayerNormWeights,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.QLstmDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.QLstmDescriptor;return t.cifgEnabled=e.bool_(r,4,!0),t.peepholeEnabled=e.bool_(r,6,!1),t.projectionEnabled=e.bool_(r,8,!1),t.layerNormEnabled=e.bool_(r,10,!1),t.cellClip=e.float32_(r,12,0),t.projectionClip=e.float32_(r,14,0),t.inputIntermediateScale=e.float32_(r,16,0),t.forgetIntermediateScale=e.float32_(r,18,0),t.cellIntermediateScale=e.float32_(r,20,0),t.outputIntermediateScale=e.float32_(r,22,0),t.hiddenStateZeroPoint=e.int32_(r,24,0),t.hiddenStateScale=e.float32_(r,26,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.QLstmDescriptor;return t.cifgEnabled=e.value(r.cifgEnabled,!0),t.peepholeEnabled=e.value(r.peepholeEnabled,!1),t.projectionEnabled=e.value(r.projectionEnabled,!1),t.layerNormEnabled=e.value(r.layerNormEnabled,!1),t.cellClip=e.value(r.cellClip,0),t.projectionClip=e.value(r.projectionClip,0),t.inputIntermediateScale=e.value(r.inputIntermediateScale,0),t.forgetIntermediateScale=e.value(r.forgetIntermediateScale,0),t.cellIntermediateScale=e.value(r.cellIntermediateScale,0),t.outputIntermediateScale=e.value(r.outputIntermediateScale,0),t.hiddenStateZeroPoint=e.value(r.hiddenStateZeroPoint,0),t.hiddenStateScale=e.value(r.hiddenStateScale,0),t}},$root.armnnSerializer.QLstmLayer=class{static decode(e,r){const t=new $root.armnnSerializer.QLstmLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.QLstmDescriptor.decode),t.inputParams=e.table(r,8,$root.armnnSerializer.QLstmInputParams.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.QLstmLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.QLstmDescriptor.decodeText),t.inputParams=e.object(r.inputParams,$root.armnnSerializer.QLstmInputParams.decodeText),t}},$root.armnnSerializer.QuantizedLstmInputParams=class{static decode(e,r){const t=new $root.armnnSerializer.QuantizedLstmInputParams;return t.inputToInputWeights=e.table(r,4,$root.armnnSerializer.ConstTensor.decode),t.inputToForgetWeights=e.table(r,6,$root.armnnSerializer.ConstTensor.decode),t.inputToCellWeights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.inputToOutputWeights=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t.recurrentToInputWeights=e.table(r,12,$root.armnnSerializer.ConstTensor.decode),t.recurrentToForgetWeights=e.table(r,14,$root.armnnSerializer.ConstTensor.decode),t.recurrentToCellWeights=e.table(r,16,$root.armnnSerializer.ConstTensor.decode),t.recurrentToOutputWeights=e.table(r,18,$root.armnnSerializer.ConstTensor.decode),t.inputGateBias=e.table(r,20,$root.armnnSerializer.ConstTensor.decode),t.forgetGateBias=e.table(r,22,$root.armnnSerializer.ConstTensor.decode),t.cellBias=e.table(r,24,$root.armnnSerializer.ConstTensor.decode),t.outputGateBias=e.table(r,26,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.QuantizedLstmInputParams;return t.inputToInputWeights=e.object(r.inputToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToForgetWeights=e.object(r.inputToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToCellWeights=e.object(r.inputToCellWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputToOutputWeights=e.object(r.inputToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToInputWeights=e.object(r.recurrentToInputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToForgetWeights=e.object(r.recurrentToForgetWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToCellWeights=e.object(r.recurrentToCellWeights,$root.armnnSerializer.ConstTensor.decodeText),t.recurrentToOutputWeights=e.object(r.recurrentToOutputWeights,$root.armnnSerializer.ConstTensor.decodeText),t.inputGateBias=e.object(r.inputGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.forgetGateBias=e.object(r.forgetGateBias,$root.armnnSerializer.ConstTensor.decodeText),t.cellBias=e.object(r.cellBias,$root.armnnSerializer.ConstTensor.decodeText),t.outputGateBias=e.object(r.outputGateBias,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.QuantizedLstmLayer=class{static decode(e,r){const t=new $root.armnnSerializer.QuantizedLstmLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.inputParams=e.table(r,6,$root.armnnSerializer.QuantizedLstmInputParams.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.QuantizedLstmLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.inputParams=e.object(r.inputParams,$root.armnnSerializer.QuantizedLstmInputParams.decodeText),t}},$root.armnnSerializer.DequantizeLayer=class{static decode(e,r){const t=new $root.armnnSerializer.DequantizeLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.DequantizeLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.MergeLayer=class{static decode(e,r){const t=new $root.armnnSerializer.MergeLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.MergeLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.SwitchLayer=class{static decode(e,r){const t=new $root.armnnSerializer.SwitchLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SwitchLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.PreluLayer=class{static decode(e,r){const t=new $root.armnnSerializer.PreluLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.PreluLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.TransposeConvolution2dLayer=class{static decode(e,r){const t=new $root.armnnSerializer.TransposeConvolution2dLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.TransposeConvolution2dDescriptor.decode),t.weights=e.table(r,8,$root.armnnSerializer.ConstTensor.decode),t.biases=e.table(r,10,$root.armnnSerializer.ConstTensor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.TransposeConvolution2dLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.TransposeConvolution2dDescriptor.decodeText),t.weights=e.object(r.weights,$root.armnnSerializer.ConstTensor.decodeText),t.biases=e.object(r.biases,$root.armnnSerializer.ConstTensor.decodeText),t}},$root.armnnSerializer.TransposeConvolution2dDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.TransposeConvolution2dDescriptor;return t.padLeft=e.uint32_(r,4,0),t.padRight=e.uint32_(r,6,0),t.padTop=e.uint32_(r,8,0),t.padBottom=e.uint32_(r,10,0),t.strideX=e.uint32_(r,12,0),t.strideY=e.uint32_(r,14,0),t.biasEnabled=e.bool_(r,16,!1),t.dataLayout=e.int8_(r,18,1),t}static decodeText(e,r){const t=new $root.armnnSerializer.TransposeConvolution2dDescriptor;return t.padLeft=e.value(r.padLeft,0),t.padRight=e.value(r.padRight,0),t.padTop=e.value(r.padTop,0),t.padBottom=e.value(r.padBottom,0),t.strideX=e.value(r.strideX,0),t.strideY=e.value(r.strideY,0),t.biasEnabled=e.value(r.biasEnabled,!1),t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t}},$root.armnnSerializer.TransposeLayer=class{static decode(e,r){const t=new $root.armnnSerializer.TransposeLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.TransposeDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.TransposeLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.TransposeDescriptor.decodeText),t}},$root.armnnSerializer.TransposeDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.TransposeDescriptor;return t.dimMappings=e.typedArray(r,4,Uint32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.TransposeDescriptor;return t.dimMappings=e.typedArray(r.dimMappings,Uint32Array),t}},$root.armnnSerializer.ResizeLayer=class{static decode(e,r){const t=new $root.armnnSerializer.ResizeLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.ResizeDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.ResizeLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.ResizeDescriptor.decodeText),t}},$root.armnnSerializer.ResizeDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.ResizeDescriptor;return t.targetHeight=e.uint32_(r,4,0),t.targetWidth=e.uint32_(r,6,0),t.method=e.int8_(r,8,0),t.dataLayout=e.int8_(r,10,0),t.alignCorners=e.bool_(r,12,!1),t.halfPixelCenters=e.bool_(r,14,!1),t}static decodeText(e,r){const t=new $root.armnnSerializer.ResizeDescriptor;return t.targetHeight=e.value(r.targetHeight,0),t.targetWidth=e.value(r.targetWidth,0),t.method=$root.armnnSerializer.ResizeMethod[r.method],t.dataLayout=$root.armnnSerializer.DataLayout[r.dataLayout],t.alignCorners=e.value(r.alignCorners,!1),t.halfPixelCenters=e.value(r.halfPixelCenters,!1),t}},$root.armnnSerializer.StackLayer=class{static decode(e,r){const t=new $root.armnnSerializer.StackLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.StackDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.StackLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.StackDescriptor.decodeText),t}},$root.armnnSerializer.StackDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.StackDescriptor;return t.axis=e.uint32_(r,4,0),t.numInputs=e.uint32_(r,6,0),t.inputShape=e.typedArray(r,8,Uint32Array),t}static decodeText(e,r){const t=new $root.armnnSerializer.StackDescriptor;return t.axis=e.value(r.axis,0),t.numInputs=e.value(r.numInputs,0),t.inputShape=e.typedArray(r.inputShape,Uint32Array),t}},$root.armnnSerializer.StandInDescriptor=class{static decode(e,r){const t=new $root.armnnSerializer.StandInDescriptor;return t.numInputs=e.uint32_(r,4,0),t.numOutputs=e.uint32_(r,6,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.StandInDescriptor;return t.numInputs=e.value(r.numInputs,0),t.numOutputs=e.value(r.numOutputs,0),t}},$root.armnnSerializer.StandInLayer=class{static decode(e,r){const t=new $root.armnnSerializer.StandInLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t.descriptor=e.table(r,6,$root.armnnSerializer.StandInDescriptor.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.StandInLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t.descriptor=e.object(r.descriptor,$root.armnnSerializer.StandInDescriptor.decodeText),t}},$root.armnnSerializer.RankLayer=class{static decode(e,r){const t=new $root.armnnSerializer.RankLayer;return t.base=e.table(r,4,$root.armnnSerializer.LayerBase.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.RankLayer;return t.base=e.object(r.base,$root.armnnSerializer.LayerBase.decodeText),t}},$root.armnnSerializer.Layer=class{static decode(e,r,t){switch(t){case 1:return $root.armnnSerializer.ActivationLayer.decode(e,r);case 2:return $root.armnnSerializer.AdditionLayer.decode(e,r);case 3:return $root.armnnSerializer.BatchToSpaceNdLayer.decode(e,r);case 4:return $root.armnnSerializer.BatchNormalizationLayer.decode(e,r);case 5:return $root.armnnSerializer.ConstantLayer.decode(e,r);case 6:return $root.armnnSerializer.Convolution2dLayer.decode(e,r);case 7:return $root.armnnSerializer.DepthwiseConvolution2dLayer.decode(e,r);case 8:return $root.armnnSerializer.FullyConnectedLayer.decode(e,r);case 9:return $root.armnnSerializer.InputLayer.decode(e,r);case 10:return $root.armnnSerializer.MultiplicationLayer.decode(e,r);case 11:return $root.armnnSerializer.OutputLayer.decode(e,r);case 12:return $root.armnnSerializer.PermuteLayer.decode(e,r);case 13:return $root.armnnSerializer.Pooling2dLayer.decode(e,r);case 14:return $root.armnnSerializer.ReshapeLayer.decode(e,r);case 15:return $root.armnnSerializer.SoftmaxLayer.decode(e,r);case 16:return $root.armnnSerializer.SpaceToBatchNdLayer.decode(e,r);case 17:return $root.armnnSerializer.DivisionLayer.decode(e,r);case 18:return $root.armnnSerializer.MinimumLayer.decode(e,r);case 19:return $root.armnnSerializer.EqualLayer.decode(e,r);case 20:return $root.armnnSerializer.MaximumLayer.decode(e,r);case 21:return $root.armnnSerializer.NormalizationLayer.decode(e,r);case 22:return $root.armnnSerializer.PadLayer.decode(e,r);case 23:return $root.armnnSerializer.RsqrtLayer.decode(e,r);case 24:return $root.armnnSerializer.FloorLayer.decode(e,r);case 25:return $root.armnnSerializer.GreaterLayer.decode(e,r);case 26:return $root.armnnSerializer.ResizeBilinearLayer.decode(e,r);case 27:return $root.armnnSerializer.SubtractionLayer.decode(e,r);case 28:return $root.armnnSerializer.StridedSliceLayer.decode(e,r);case 29:return $root.armnnSerializer.GatherLayer.decode(e,r);case 30:return $root.armnnSerializer.MeanLayer.decode(e,r);case 31:return $root.armnnSerializer.MergerLayer.decode(e,r);case 32:return $root.armnnSerializer.L2NormalizationLayer.decode(e,r);case 33:return $root.armnnSerializer.SplitterLayer.decode(e,r);case 34:return $root.armnnSerializer.DetectionPostProcessLayer.decode(e,r);case 35:return $root.armnnSerializer.LstmLayer.decode(e,r);case 36:return $root.armnnSerializer.QuantizedLstmLayer.decode(e,r);case 37:return $root.armnnSerializer.QuantizeLayer.decode(e,r);case 38:return $root.armnnSerializer.DequantizeLayer.decode(e,r);case 39:return $root.armnnSerializer.MergeLayer.decode(e,r);case 40:return $root.armnnSerializer.SwitchLayer.decode(e,r);case 41:return $root.armnnSerializer.ConcatLayer.decode(e,r);case 42:return $root.armnnSerializer.SpaceToDepthLayer.decode(e,r);case 43:return $root.armnnSerializer.PreluLayer.decode(e,r);case 44:return $root.armnnSerializer.TransposeConvolution2dLayer.decode(e,r);case 45:return $root.armnnSerializer.ResizeLayer.decode(e,r);case 46:return $root.armnnSerializer.StackLayer.decode(e,r);case 47:return $root.armnnSerializer.AbsLayer.decode(e,r);case 48:return $root.armnnSerializer.ArgMinMaxLayer.decode(e,r);case 49:return $root.armnnSerializer.SliceLayer.decode(e,r);case 50:return $root.armnnSerializer.DepthToSpaceLayer.decode(e,r);case 51:return $root.armnnSerializer.InstanceNormalizationLayer.decode(e,r);case 52:return $root.armnnSerializer.LogSoftmaxLayer.decode(e,r);case 53:return $root.armnnSerializer.ComparisonLayer.decode(e,r);case 54:return $root.armnnSerializer.StandInLayer.decode(e,r);case 55:return $root.armnnSerializer.ElementwiseUnaryLayer.decode(e,r);case 56:return $root.armnnSerializer.TransposeLayer.decode(e,r);case 57:return $root.armnnSerializer.QLstmLayer.decode(e,r);case 58:return $root.armnnSerializer.FillLayer.decode(e,r);case 59:return $root.armnnSerializer.RankLayer.decode(e,r)}}static decodeText(e,r,t){switch(t){case"ActivationLayer":return $root.armnnSerializer.ActivationLayer.decodeText(e,r);case"AdditionLayer":return $root.armnnSerializer.AdditionLayer.decodeText(e,r);case"BatchToSpaceNdLayer":return $root.armnnSerializer.BatchToSpaceNdLayer.decodeText(e,r);case"BatchNormalizationLayer":return $root.armnnSerializer.BatchNormalizationLayer.decodeText(e,r);case"ConstantLayer":return $root.armnnSerializer.ConstantLayer.decodeText(e,r);case"Convolution2dLayer":return $root.armnnSerializer.Convolution2dLayer.decodeText(e,r);case"DepthwiseConvolution2dLayer":return $root.armnnSerializer.DepthwiseConvolution2dLayer.decodeText(e,r);case"FullyConnectedLayer":return $root.armnnSerializer.FullyConnectedLayer.decodeText(e,r);case"InputLayer":return $root.armnnSerializer.InputLayer.decodeText(e,r);case"MultiplicationLayer":return $root.armnnSerializer.MultiplicationLayer.decodeText(e,r);case"OutputLayer":return $root.armnnSerializer.OutputLayer.decodeText(e,r);case"PermuteLayer":return $root.armnnSerializer.PermuteLayer.decodeText(e,r);case"Pooling2dLayer":return $root.armnnSerializer.Pooling2dLayer.decodeText(e,r);case"ReshapeLayer":return $root.armnnSerializer.ReshapeLayer.decodeText(e,r);case"SoftmaxLayer":return $root.armnnSerializer.SoftmaxLayer.decodeText(e,r);case"SpaceToBatchNdLayer":return $root.armnnSerializer.SpaceToBatchNdLayer.decodeText(e,r);case"DivisionLayer":return $root.armnnSerializer.DivisionLayer.decodeText(e,r);case"MinimumLayer":return $root.armnnSerializer.MinimumLayer.decodeText(e,r);case"EqualLayer":return $root.armnnSerializer.EqualLayer.decodeText(e,r);case"MaximumLayer":return $root.armnnSerializer.MaximumLayer.decodeText(e,r);case"NormalizationLayer":return $root.armnnSerializer.NormalizationLayer.decodeText(e,r);case"PadLayer":return $root.armnnSerializer.PadLayer.decodeText(e,r);case"RsqrtLayer":return $root.armnnSerializer.RsqrtLayer.decodeText(e,r);case"FloorLayer":return $root.armnnSerializer.FloorLayer.decodeText(e,r);case"GreaterLayer":return $root.armnnSerializer.GreaterLayer.decodeText(e,r);case"ResizeBilinearLayer":return $root.armnnSerializer.ResizeBilinearLayer.decodeText(e,r);case"SubtractionLayer":return $root.armnnSerializer.SubtractionLayer.decodeText(e,r);case"StridedSliceLayer":return $root.armnnSerializer.StridedSliceLayer.decodeText(e,r);case"GatherLayer":return $root.armnnSerializer.GatherLayer.decodeText(e,r);case"MeanLayer":return $root.armnnSerializer.MeanLayer.decodeText(e,r);case"MergerLayer":return $root.armnnSerializer.MergerLayer.decodeText(e,r);case"L2NormalizationLayer":return $root.armnnSerializer.L2NormalizationLayer.decodeText(e,r);case"SplitterLayer":return $root.armnnSerializer.SplitterLayer.decodeText(e,r);case"DetectionPostProcessLayer":return $root.armnnSerializer.DetectionPostProcessLayer.decodeText(e,r);case"LstmLayer":return $root.armnnSerializer.LstmLayer.decodeText(e,r);case"QuantizedLstmLayer":return $root.armnnSerializer.QuantizedLstmLayer.decodeText(e,r);case"QuantizeLayer":return $root.armnnSerializer.QuantizeLayer.decodeText(e,r);case"DequantizeLayer":return $root.armnnSerializer.DequantizeLayer.decodeText(e,r);case"MergeLayer":return $root.armnnSerializer.MergeLayer.decodeText(e,r);case"SwitchLayer":return $root.armnnSerializer.SwitchLayer.decodeText(e,r);case"ConcatLayer":return $root.armnnSerializer.ConcatLayer.decodeText(e,r);case"SpaceToDepthLayer":return $root.armnnSerializer.SpaceToDepthLayer.decodeText(e,r);case"PreluLayer":return $root.armnnSerializer.PreluLayer.decodeText(e,r);case"TransposeConvolution2dLayer":return $root.armnnSerializer.TransposeConvolution2dLayer.decodeText(e,r);case"ResizeLayer":return $root.armnnSerializer.ResizeLayer.decodeText(e,r);case"StackLayer":return $root.armnnSerializer.StackLayer.decodeText(e,r);case"AbsLayer":return $root.armnnSerializer.AbsLayer.decodeText(e,r);case"ArgMinMaxLayer":return $root.armnnSerializer.ArgMinMaxLayer.decodeText(e,r);case"SliceLayer":return $root.armnnSerializer.SliceLayer.decodeText(e,r);case"DepthToSpaceLayer":return $root.armnnSerializer.DepthToSpaceLayer.decodeText(e,r);case"InstanceNormalizationLayer":return $root.armnnSerializer.InstanceNormalizationLayer.decodeText(e,r);case"LogSoftmaxLayer":return $root.armnnSerializer.LogSoftmaxLayer.decodeText(e,r);case"ComparisonLayer":return $root.armnnSerializer.ComparisonLayer.decodeText(e,r);case"StandInLayer":return $root.armnnSerializer.StandInLayer.decodeText(e,r);case"ElementwiseUnaryLayer":return $root.armnnSerializer.ElementwiseUnaryLayer.decodeText(e,r);case"TransposeLayer":return $root.armnnSerializer.TransposeLayer.decodeText(e,r);case"QLstmLayer":return $root.armnnSerializer.QLstmLayer.decodeText(e,r);case"FillLayer":return $root.armnnSerializer.FillLayer.decodeText(e,r);case"RankLayer":return $root.armnnSerializer.RankLayer.decodeText(e,r)}}},$root.armnnSerializer.AnyLayer=class{static decode(e,r){const t=new $root.armnnSerializer.AnyLayer;return t.layer=e.union(r,4,$root.armnnSerializer.Layer.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.AnyLayer;return t.layer=$root.armnnSerializer.Layer.decodeText(e,r.layer,r.layer_type),t}},$root.armnnSerializer.FeatureCompatibilityVersions=class{static decode(e,r){const t=new $root.armnnSerializer.FeatureCompatibilityVersions;return t.bindingIdsScheme=e.uint32_(r,4,0),t}static decodeText(e,r){const t=new $root.armnnSerializer.FeatureCompatibilityVersions;return t.bindingIdsScheme=e.value(r.bindingIdsScheme,0),t}},$root.armnnSerializer.SerializedGraph=class{static identifier(e){return e.identifier("ARMN")}static create(e){return $root.armnnSerializer.SerializedGraph.decode(e,e.root)}static createText(e){return $root.armnnSerializer.SerializedGraph.decodeText(e,e.root)}static decode(e,r){const t=new $root.armnnSerializer.SerializedGraph;return t.layers=e.tableArray(r,4,$root.armnnSerializer.AnyLayer.decode),t.inputIds=e.typedArray(r,6,Int32Array),t.outputIds=e.typedArray(r,8,Int32Array),t.featureVersions=e.table(r,10,$root.armnnSerializer.FeatureCompatibilityVersions.decode),t}static decodeText(e,r){const t=new $root.armnnSerializer.SerializedGraph;return t.layers=e.objectArray(r.layers,$root.armnnSerializer.AnyLayer.decodeText),t.inputIds=e.typedArray(r.inputIds,Int32Array),t.outputIds=e.typedArray(r.outputIds,Int32Array),t.featureVersions=e.object(r.featureVersions,$root.armnnSerializer.FeatureCompatibilityVersions.decodeText),t}};