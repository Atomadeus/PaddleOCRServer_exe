var bson={},long=long||{Long:require("long")};bson.Reader=class{constructor(t){this._asciiDecoder=new TextDecoder("ascii"),this._utf8Decoder=new TextDecoder("utf-8"),this._buffer=t,this._position=0,this._view=new DataView(t.buffer,t.byteOffset,t.byteLength)}read(){return this.document()}document(t){const i=this._position,e=this.int32();if(e<5||i+e>this._buffer.length||0!=this._buffer[i+e-1])throw new bson.Reader("Invalid BSON size.");const s=t?[]:{};let n=0;for(;;){const i=this.byte();if(0==i)break;const e=this.cstring();let o=null;switch(i){case 1:o=this.double();break;case 2:o=this.string();break;case 3:o=this.document(!1);break;case 4:o=this.document(!0);break;case 5:o=this.binary();break;case 8:o=this.boolean();break;case 10:o=null;break;case 16:o=this.int32();break;case 17:o=this.uint64();break;case 18:o=this.int64();break;default:throw new bson.Error("Unknown value type '"+i+"'.")}if(t){if(n!==parseInt(e,10))throw new bson.Error("Invalid array index '"+e+"'.");s.push(o),n++}else s[e]=o}return s}cstring(){const t=this._buffer.indexOf(0,this._position),i=this._asciiDecoder.decode(this._buffer.subarray(this._position,t));return this._position=t+1,i}string(){const t=this.int32()+this._position-1,i=this._utf8Decoder.decode(this._buffer.subarray(this._position,t));if(this._position=t,"0x00"!=this.byte())throw new bson.Error("String missing terminal 0.");return i}binary(){const t=this.int32(),i=this.byte(),e=this._buffer.subarray(this._position,this._position+t);switch(this._position+=t,i){case 0:return e;default:throw new bson.Error("Unknown binary subtype '"+i+"'.")}}boolean(){const t=this.byte();switch(t){case 0:return!1;case 1:return!0;default:throw new bson.Error("Invalid boolean value '"+t+"'.")}}byte(){return this._buffer[this._position++]}int32(){const t=this._view.getInt32(this._position,!0);return this._position+=4,t}int64(){const t=this._view.getUint32(this._position,!0),i=this._view.getUint32(this._position+4,!0);return this._position+=8,new long.Long(t,i,!1).toNumber()}uint64(){const t=this._view.getUint32(this._position,!0),i=this._view.getUint32(this._position+4,!0);return this._position+=8,new long.Long(t,i,!0).toNumber()}},bson.Error=class extends Error{constructor(t){super(t),this.name="BSON Error"}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.Reader=bson.Reader);