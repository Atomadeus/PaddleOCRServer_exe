var $root=protobuf.get("cntk");$root.CNTK={},$root.CNTK.proto={},$root.CNTK.proto.NDShape=class{constructor(){this.shape_dim=[]}static decode(o,t){const e=new $root.CNTK.proto.NDShape,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.shape_dim=o.array(e.shape_dim,(()=>o.uint64()),t);break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.Axis=class{constructor(){}static decode(o,t){const e=new $root.CNTK.proto.Axis,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.static_axis_idx=o.int32();break;case 2:e.name=o.string();break;case 3:e.is_ordered_dynamic_axis=o.bool();break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.Axis.prototype.static_axis_idx=0,$root.CNTK.proto.Axis.prototype.name="",$root.CNTK.proto.Axis.prototype.is_ordered_dynamic_axis=!1,$root.CNTK.proto.NDArrayView=class{constructor(){}get values(){return $root.CNTK.proto.NDArrayView.valuesSet=$root.CNTK.proto.NDArrayView.valuesSet||new Set(["float_values","double_values","bytes_value","sint32_values"]),Object.keys(this).find((o=>$root.CNTK.proto.NDArrayView.valuesSet.has(o)&&null!=this[o]))}static decode(o,t){const e=new $root.CNTK.proto.NDArrayView,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.data_type=o.int32();break;case 2:e.storage_format=o.int32();break;case 3:e.shape=$root.CNTK.proto.NDShape.decode(o,o.uint32());break;case 4:e.float_values=$root.CNTK.proto.NDArrayView.FloatValues.decode(o,o.uint32());break;case 5:e.double_values=$root.CNTK.proto.NDArrayView.DoubleValues.decode(o,o.uint32());break;case 6:e.bytes_value=$root.CNTK.proto.NDArrayView.BytesValue.decode(o,o.uint32());break;case 7:e.sint32_values=$root.CNTK.proto.NDArrayView.IntValues.decode(o,o.uint32());break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.NDArrayView.prototype.data_type=0,$root.CNTK.proto.NDArrayView.prototype.storage_format=0,$root.CNTK.proto.NDArrayView.prototype.shape=null,$root.CNTK.proto.NDArrayView.DataType={Unknown:0,Float:1,Double:2,Float16:4,Int8:5,Int16:6},$root.CNTK.proto.NDArrayView.StorageFormat={Dense:0,SparseCSC:1,SparseBlockCol:2},$root.CNTK.proto.NDArrayView.FloatValues=class{constructor(){this.value=[]}static decode(o,t){const e=new $root.CNTK.proto.NDArrayView.FloatValues,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.value=o.floats(e.value,t);break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.NDArrayView.DoubleValues=class{constructor(){this.value=[]}static decode(o,t){const e=new $root.CNTK.proto.NDArrayView.DoubleValues,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.value=o.doubles(e.value,t);break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.NDArrayView.BytesValue=class{constructor(){}static decode(o,t){const e=new $root.CNTK.proto.NDArrayView.BytesValue,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.value=o.bytes();break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.NDArrayView.BytesValue.prototype.value=new Uint8Array([]),$root.CNTK.proto.NDArrayView.IntValues=class{constructor(){this.value=[]}static decode(o,t){const e=new $root.CNTK.proto.NDArrayView.IntValues,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.value=o.array(e.value,(()=>o.sint32()),t);break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.Vector=class{constructor(){this.value=[]}static decode(o,t){const e=new $root.CNTK.proto.Vector,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.value.push($root.CNTK.proto.DictionaryValue.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.Dictionary=class{constructor(){this.data={}}static decode(o,t){const e=new $root.CNTK.proto.Dictionary,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.version=o.uint64();break;case 2:o.pair(e.data,(()=>o.string()),(()=>$root.CNTK.proto.DictionaryValue.decode(o,o.uint32())));break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.Dictionary.prototype.version=protobuf.Long?protobuf.Long.fromBits(0,0,!0):0,$root.CNTK.proto.DictionaryValue=class{constructor(){}get value(){return $root.CNTK.proto.DictionaryValue.valueSet=$root.CNTK.proto.DictionaryValue.valueSet||new Set(["bool_value","int_value","size_t_value","float_value","double_value","string_value","nd_shape_value","axis_value","vector_value","dictionary_value","nd_array_view_value"]),Object.keys(this).find((o=>$root.CNTK.proto.DictionaryValue.valueSet.has(o)&&null!=this[o]))}static decode(o,t){const e=new $root.CNTK.proto.DictionaryValue,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.version=o.uint64();break;case 2:e.value_type=o.int32();break;case 3:e.bool_value=o.bool();break;case 4:e.int_value=o.int32();break;case 5:e.size_t_value=o.uint64();break;case 6:e.float_value=o.float();break;case 7:e.double_value=o.double();break;case 8:e.string_value=o.string();break;case 9:e.nd_shape_value=$root.CNTK.proto.NDShape.decode(o,o.uint32());break;case 10:e.axis_value=$root.CNTK.proto.Axis.decode(o,o.uint32());break;case 11:e.vector_value=$root.CNTK.proto.Vector.decode(o,o.uint32());break;case 12:e.dictionary_value=$root.CNTK.proto.Dictionary.decode(o,o.uint32());break;case 13:e.nd_array_view_value=$root.CNTK.proto.NDArrayView.decode(o,o.uint32());break;default:o.skipType(7&t)}}return e}},$root.CNTK.proto.DictionaryValue.prototype.version=protobuf.Long?protobuf.Long.fromBits(0,0,!0):0,$root.CNTK.proto.DictionaryValue.prototype.value_type=0,$root.CNTK.proto.DictionaryValue.Type={None:0,Bool:1,Int:2,SizeT:3,Float:4,Double:5,String:6,NDShape:7,Axis:8,Vector:9,Dictionary:10,NDArrayView:11};