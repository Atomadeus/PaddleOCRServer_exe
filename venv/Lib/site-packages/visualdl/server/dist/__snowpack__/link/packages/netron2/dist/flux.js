var flux=flux||{};flux.ModelFactory=class{match(t){return"bson"===t.identifier.split(".").pop().toLowerCase()}open(t,e){return e.require("./bson").then((a=>{let r=null;const o=t.identifier;try{const e=new a.Reader(t.buffer).read(),o=flux.ModelFactory._backref(e,e);if(r=o.model,!r)throw new flux.Error("File does not contain Flux model.")}catch(t){const e=t&&t.message?t.message:t.toString();throw new flux.Error(e.replace(/\.$/,"")+" in '"+o+"'.")}return flux.Metadata.open(e).then((t=>{try{return new flux.Model(t,r)}catch(t){const e=t&&t.message?t.message:t.toString();throw new flux.Error(e.replace(/\.$/,"")+" in '"+o+"'.")}}))}))}static _backref(t,e){if(Array.isArray(t))for(let a=0;a<t.length;a++)t[a]=flux.ModelFactory._backref(t[a],e);else if(t===Object(t)){if("backref"==t.tag&&t.ref){if(!e._backrefs[t.ref-1])throw new flux.Error("Invalid backref '"+t.ref+"'.");t=e._backrefs[t.ref-1]}for(const a of Object.keys(t))t===e&&"_backrefs"===a||(t[a]=flux.ModelFactory._backref(t[a],e))}return t}},flux.Model=class{constructor(){this._format="Flux",this._graphs=[]}get format(){return this._format}get graphs(){return this._graphs}},flux.Metadata=class{static open(t){return flux.Metadata._metadata?Promise.resolve(flux.Metadata._metadata):t.request(null,"flux-metadata.json","utf-8").then((t=>(flux.Metadata._metadata=new flux.Metadata(t),flux.Metadata._metadata))).catch((()=>(flux.Metadata._metadata=new flux.Metadata(null),flux.Metadata._metadatas)))}constructor(t){if(this._map={},this._attributeCache={},t){const e=JSON.parse(t);if(e)for(const t of e)t.name&&t.schema&&(this._map[t.name]=t.schema)}}type(t){return this._map[t]||null}attribute(t,e){let a=this._attributeCache[t];if(!a){a={};const e=this.type(t);if(e&&e.attributes&&e.attributes.length>0)for(const t of e.attributes)a[t.name]=t;this._attributeCache[t]=a}return a[e]||null}},flux.Error=class extends Error{constructor(t){super(t),this.name="Flux Error"}},module&&module.exports&&(module.exports.ModelFactory=flux.ModelFactory);