var onnx=onnx||{},base=base||require("./base"),long=long||{Long:require("long")},protobuf=protobuf||require("./protobuf");onnx.ModelFactory=class{match(t){const e=t.identifier,n=e.split(".").pop().toLowerCase();if("onnx"==n)return!0;if("pb"==n){if(e.endsWith("saved_model.pb"))return!1;if(e.endsWith("predict_net.pb")||e.endsWith("init_net.pb"))return!1;const n=t.tags("pb");return!(0===n.size||n.size>0&&n.has(1)&&0===n.get(1)&&n.has(2)&&0===n.get(2)&&n.has(9)&&2===n.get(9)||n.size>0&&Array.from(n.values()).some((t=>5===t))||n.has(1)&&0!=n.get(1)||n.has(2)&&2!=n.get(2)||n.has(3)&&2!=n.get(3)||n.has(4)&&2!=n.get(4)||n.has(5)&&0!=n.get(5)||n.has(6)&&2!=n.get(6)||n.has(8)&&2!=n.get(8)||n.has(14)&&2!=n.get(14)||!n.has(7)||2!=n.get(7))}if("pbtxt"===n||"prototxt"===n||"model"===n){if(e.endsWith("predict_net.pbtxt")||e.endsWith("predict_net.prototxt")||e.endsWith("init_net.pbtxt")||e.endsWith("init_net.prototxt"))return!1;const o=t.tags("pbtxt");if(o.has("ir_version"))return!0;if(o.has("graph")&&"model"!==n)return!0}return!1}open(t,e){return e.require("./onnx-proto").then((()=>{let n=null;const o=t.identifier,a=o.split(".").pop().toLowerCase();if("pbtxt"==a||"prototxt"==a)try{onnx.proto=protobuf.get("onnx").onnx;const e=protobuf.TextReader.create(t.text);n=onnx.proto.ModelProto.decodeText(e)}catch(t){throw new onnx.Error("File text format is not onnx.ModelProto ("+t.message+") in '"+o+"'.")}else try{onnx.proto=protobuf.get("onnx").onnx;const e=protobuf.Reader.create(t.buffer);n=onnx.proto.ModelProto.decode(e)}catch(t){throw new onnx.Error("File format is not onnx.ModelProto ("+t.message+") in '"+o+"'.")}return onnx.Metadata.open(e).then((t=>{try{return new onnx.Model(t,n)}catch(t){e.exception(t,!1);const n=t&&t.message?t.message:t.toString();throw new onnx.Error(n.replace(/\.$/,"")+" in '"+o+"'.")}}))}))}},onnx.Model=class{constructor(t,e){this._graphs=[],this._irVersion=e.ir_version,this._producerName=e.producer_name,this._producerVersion=e.producer_version,this._domain=e.domain,this._modelVersion=e.model_version,this._description=e.doc_string,this._metadata=[],this._imports=null;const n={};if(e.opset_import&&e.opset_import.length>0){const t=[];for(const o of e.opset_import){let e=o.domain||"ai.onnx";const a=e+" v"+o.version;t.includes(a)||t.push(a),e="ai.onnx"==e?"":e,(!n[e]||n[e]>o.version)&&(n[e]=o.version)}this._imports=t.join(", ")}0==Object.keys(n).length&&(n[""]=1,n["ai.onnx.ml"]=1);let o="";if(e.metadata_props){const t={};for(const n of e.metadata_props)switch(n.key){case"author":this._author=n.value;break;case"company":this._company=n.value;break;case"converted_from":this._converted_from=n.value;break;case"license":this._license=n.value;break;case"license_url":this._licenseUrl=n.value;break;case"Image.BitmapPixelFormat":case"Image.ColorSpaceGamma":case"Image.NominalPixelRange":t[n.key]=n.value;break;default:this._metadata.push({name:n.key,value:n.value})}o=[t["Image.BitmapPixelFormat"],t["Image.ColorSpaceGamma"],t["Image.NominalPixelRange"]].filter((t=>t))}if(this._graphs=[],e&&e.graph){const a=new onnx.GraphMetadata(t,n),r=new onnx.Graph(a,o,e.graph);this._graphs.push(r)}}get format(){return"ONNX"+(this._irVersion?" v"+this._irVersion.toString():"")}get imports(){return this._imports}get producer(){const t=[];return this._producerName&&t.push(this._producerName),this._producerVersion&&this._producerVersion.length>0&&t.push(this._producerVersion),t.length>0?t.join(" "):null}get domain(){return this._domain||null}get description(){return this._description||null}get author(){return this._author||null}get company(){return this._company||null}get source(){return this._converted_from||null}get license(){const t=[];return this._license&&this._license.length>0&&t.push(this._license),this._licenseUrl&&this._licenseUrl.length>0&&t.push("<a href='"+this._licenseUrl+"'>"+this._licenseUrl+"</a>"),t.length>0?t:null}get metadata(){return this._metadata}get graphs(){return this._graphs}},onnx.Graph=class{constructor(t,e,n){if(this._node="",this._description="",this._nodes=[],this._inputs=[],this._outputs=[],n){this._name=n.name||null,this._description=n.doc_string||"";const o=new Map;for(const t of n.initializer)o.set(t.name,new onnx.Tensor(t,"Initializer"));const a=[],r=new Map,s=new Map;for(const t of n.node){for(const e of t.input)r.set(e,r.has(e)?r.get(e)+1:1);for(const e of t.output)s.set(e,r.has(e)?r.get(e)+1:1)}for(const t of n.input)r.delete(t);for(const t of n.output)s.delete(t);for(const t of n.node){let e=!1;if("Constant"==t.op_type&&0==t.input.length&&1==t.output.length){const n=t.output[0];if(r.has(n)&&1==r.get(n)&&s.has(n)&&1==s.get(n)&&1==t.attribute.length){const a=t.attribute[0];a&&"value"==a.name&&a.t&&(o.set(n,new onnx.Tensor(a.t,"Constant")),e=!0)}}e||a.push(t)}const i=new Map;for(const t of n.quantization_annotation){const e={};for(const n of t.quant_parameter_tensor_names)e[n.key]=n.value;i.set(t.tensor_name,e)}const p=new Map,h=(t,e,n,o,a)=>{if(!p.has(t)){e=o?o.type:e?onnx.Utility.formatType(e,a):null;const r=i.get(t);p.set(t,new onnx.Argument(t,e,o,r,n))}return p.get(t)};for(const t of n.value_info)h(t.name,t.type,t.doc_string,o.get(t.name),e);for(const t of n.input){const n=h(t.name,t.type,t.doc_string,o.get(t.name),e);o.has(t.name)||this._inputs.push(new onnx.Parameter(t.name,[n]))}for(const t of n.output){const n=h(t.name,t.type,t.doc_string,o.get(t.name),e);this._outputs.push(new onnx.Parameter(t.name,[n]))}for(const n of a){let a=[];const r=t.type(n.op_type);if(n.input&&n.input.length>0){let t=0;if(r&&r.inputs){for(const s of r.inputs)if(t<n.input.length||"optional"!=s.option){const r="variadic"==s.option?n.input.length-t:1,i=n.input.slice(t,t+r).map((t=>h(t,null,null,o.get(t),e)));t+=r,a.push(new onnx.Parameter(s.name,i))}}else a=a.concat(n.input.slice(t).map(((n,o)=>new onnx.Parameter((t+o).toString(),[h(n,null,null,null,e)]))))}let s=[];if(n.output&&n.output.length>0){let t=0;if(r&&r.outputs){for(const o of r.outputs)if(t<n.output.length||"optional"!=o.option){const a="variadic"==o.option?n.output.length-t:1,r=n.output.slice(t,t+a).map((t=>h(t,null,null,null,e)));t+=a,s.push(new onnx.Parameter(o.name,r))}}else s=s.concat(n.output.slice(t).map(((n,o)=>new onnx.Parameter((t+o).toString(),[h(n,null,null,null,e)]))))}this._nodes.push(new onnx.Node(t,e,n.op_type,n.domain,n.name,n.doc_string,n.attribute,a,s))}}}get name(){return this._name}get description(){return this._description}get groups(){return!1}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}toString(){return"graph("+this.name+")"}},onnx.Parameter=class{constructor(t,e){this._name=t,this._arguments=e}get name(){return this._name}get visible(){return!0}get arguments(){return this._arguments}},onnx.Argument=class{constructor(t,e,n,o,a){if("string"!=typeof t)throw new onnx.Error("Invalid argument identifier '"+JSON.stringify(t)+"'.");this._name=t,this._type=e||null,this._initializer=n||null,this._annotation=o,this._description=a||""}get name(){return this._name}get type(){return this._type}get description(){return this._description}get quantization(){return this._annotation?Object.keys(this._annotation).map((t=>t+": "+this._annotation[t])).join(", "):null}get initializer(){return this._initializer}},onnx.Node=class{constructor(t,e,n,o,a,r,s,i,p){this._metadata=t,this._type=n,this._domain=o||"",this._name=a||"",this._description=r||"",this._inputs=i,this._outputs=p,this._attributes=(s||[]).map((t=>new onnx.Attribute(this._metadata,e,this.type,t)))}get type(){return this._type}get name(){return this._name}get description(){return this._description}get metadata(){return this._metadata.type(this._type)}get domain(){return this._domain}get group(){return null}get attributes(){return this._attributes}get inputs(){return this._inputs}get outputs(){return this._outputs}},onnx.Attribute=class{constructor(t,e,n,o){this._name=o.name,this._description=o.doc_string||"",this._type=null,this._value=null;const a=t.attribute(n,o.name);if(!this._type)if(Object.prototype.hasOwnProperty.call(o,"type")){if(!onnx.Attribute._attributeTypeMap){const t={};t[onnx.proto.AttributeProto.AttributeType.UNDEFINED]="undefined",t[onnx.proto.AttributeProto.AttributeType.FLOAT]="float32",t[onnx.proto.AttributeProto.AttributeType.INT]="int64",t[onnx.proto.AttributeProto.AttributeType.STRING]="string",t[onnx.proto.AttributeProto.AttributeType.TENSOR]="tensor",t[onnx.proto.AttributeProto.AttributeType.GRAPH]="graph",t[onnx.proto.AttributeProto.AttributeType.FLOATS]="float32",t[onnx.proto.AttributeProto.AttributeType.INTS]="int64[]",t[onnx.proto.AttributeProto.AttributeType.STRINGS]="string[]",t[onnx.proto.AttributeProto.AttributeType.TENSORS]="tensor[]",t[onnx.proto.AttributeProto.AttributeType.GRAPHS]="graph[]",onnx.Attribute._attributeTypeMap=t}const t=onnx.Attribute._attributeTypeMap[o.type];this._type=t||onnx.Attribute._attributeTypeMap[onnx.proto.AttributeProto.AttributeType.UNDEFINED]}else a&&a.type&&(this._type=a.type);if(o.ints&&o.ints.length>0)this._value=o.ints;else if(o.floats&&o.floats.length>0)this._value=o.floats;else if(o.strings&&o.strings.length>0)this._value=o.strings.map((t=>onnx.Utility.decodeText(t)));else if(o.graphs&&o.graphs.length>0)this._value=o.graphs.map((n=>new onnx.Graph(t,e,n))),this._type="graph[]";else if(o.s&&o.s.length>0)switch(n){case"Int8GivenTensorFill":this._value=Array.from(o.s);break;default:this._value=onnx.Utility.decodeText(o.s)}else Object.prototype.hasOwnProperty.call(o,"f")?this._value=o.f:Object.prototype.hasOwnProperty.call(o,"i")?this._value=o.i:Object.prototype.hasOwnProperty.call(o,"t")?(this._type="tensor",this._value=new onnx.Tensor(o.t).value):Object.prototype.hasOwnProperty.call(o,"g")&&(this._type="graph",this._value=new onnx.Graph(t,e,o.g));a&&Object.prototype.hasOwnProperty.call(a,"default")&&a.default&&this._value==a.default&&(this._visible=!1)}get name(){return this._name}get type(){return this._type}get value(){return this._value}get description(){return this._description}get visible(){return 0!=this._visible}},onnx.Tensor=class{constructor(t,e){if(this._tensor=t,this._name=t.name||"",this._kind=e||null,this._type=new onnx.TensorType(this._tensor.data_type,new onnx.TensorShape(this._tensor.dims.map((t=>t))),null),this._tensor.data_type==onnx.proto.TensorProto.DataType.FLOAT16&&this._tensor.int32_data&&this._tensor.int32_data.length>0){const t=new Uint8Array(this._tensor.int32_data.length<<1),e=new DataView(t.buffer,t.byteOffset,t.byteLength),n=this._tensor.int32_data;for(let t=0;t<n.length;t++)e.setUint16(t<<1,n[t],!0);this._tensor.raw_data=t,delete this._tensor.int32_data}}get name(){return this._name}get kind(){return this._kind}get type(){return this._type}get state(){return this._context().state||null}get value(){const t=this._context();return t.state?null:(t.limit=Number.MAX_SAFE_INTEGER,this._decode(t,0))}toString(){const t=this._context();if(t.state)return"";t.limit=1e4;const e=this._decode(t,0);return onnx.Tensor._stringify(e,"","    ")}_context(){const t={index:0,count:0,state:null};if(!this._tensor.data_type)return t.state="Tensor has no data type.",t;if(!this._tensor.dims)return t.state="Tensor has no dimensions.",t;if(this._tensor.data_location===onnx.proto.TensorProto.DataLocation.EXTERNAL)return t.state="External data not implemented.",t;switch(t.dataType=this._type.dataType,t.shape=this._type.shape.dimensions,this._tensor.data_type){case onnx.proto.TensorProto.DataType.FLOAT:this._tensor.float_data&&this._tensor.float_data.length>0?t.data=this._tensor.float_data:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;case onnx.proto.TensorProto.DataType.DOUBLE:this._tensor.double_data&&this._tensor.double_data.length>0?t.data=this._tensor.double_data:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;case onnx.proto.TensorProto.DataType.FLOAT16:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;case onnx.proto.TensorProto.DataType.BOOL:case onnx.proto.TensorProto.DataType.INT8:case onnx.proto.TensorProto.DataType.UINT8:case onnx.proto.TensorProto.DataType.INT16:case onnx.proto.TensorProto.DataType.UINT16:case onnx.proto.TensorProto.DataType.INT32:this._tensor.int32_data&&this._tensor.int32_data.length>0?t.data=this._tensor.int32_data:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;case onnx.proto.TensorProto.DataType.UINT32:this._tensor.uint64_data&&this._tensor.uint64_data.length>0?t.data=this._tensor.uint64_data:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;case onnx.proto.TensorProto.DataType.INT64:this._tensor.int64_data&&this._tensor.int64_data.length>0?t.data=this._tensor.int64_data:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;case onnx.proto.TensorProto.DataType.UINT64:this._tensor.uint64_data&&this._tensor.uint64_data.length>0?t.data=this._tensor.uint64_data:this._tensor.raw_data&&this._tensor.raw_data.length>0?t.rawData=new DataView(this._tensor.raw_data.buffer,this._tensor.raw_data.byteOffset,this._tensor.raw_data.byteLength):t.state="Tensor data is empty.";break;default:t.state="Tensor data type is not implemented."}return t}_decode(t,e){const n=0!==t.shape.length?t.shape:[1],o=[],a=n[e];if(e==n.length-1)for(let e=0;e<a;e++){if(t.count>t.limit)return o.push("..."),o;if(t.data){let e=t.data[t.index++];switch(this._tensor.data_type){case onnx.proto.TensorProto.DataType.BOOL:e=0!==e}o.push(e),t.count++}else if(t.rawData)switch(this._tensor.data_type){case onnx.proto.TensorProto.DataType.FLOAT16:o.push(t.rawData.getFloat16(t.index,!0)),t.index+=2,t.count++;break;case onnx.proto.TensorProto.DataType.FLOAT:o.push(t.rawData.getFloat32(t.index,!0)),t.index+=4,t.count++;break;case onnx.proto.TensorProto.DataType.DOUBLE:o.push(t.rawData.getFloat64(t.index,!0)),t.index+=8,t.count++;break;case onnx.proto.TensorProto.DataType.INT8:o.push(t.rawData.getInt8(t.index,!0)),t.index++,t.count++;break;case onnx.proto.TensorProto.DataType.UINT8:o.push(t.rawData.getUint8(t.index,!0)),t.index++,t.count++;break;case onnx.proto.TensorProto.DataType.INT16:o.push(t.rawData.getInt16(t.index,!0)),t.index+=2,t.count++;break;case onnx.proto.TensorProto.DataType.UINT16:o.push(t.rawData.getUint16(t.index,!0)),t.index+=2,t.count++;break;case onnx.proto.TensorProto.DataType.INT32:o.push(t.rawData.getInt32(t.index,!0)),t.index+=4,t.count++;break;case onnx.proto.TensorProto.DataType.UINT32:o.push(t.rawData.getUint32(t.index,!0)),t.index+=4,t.count++;break;case onnx.proto.TensorProto.DataType.INT64:o.push(new long.Long(t.rawData.getUint32(t.index,!0),t.rawData.getUint32(t.index+4,!0),!1)),t.index+=8,t.count++;break;case onnx.proto.TensorProto.DataType.UINT64:o.push(new long.Long(t.rawData.getUint32(t.index,!0),t.rawData.getUint32(t.index+4,!0),!0)),t.index+=8,t.count++;break;case onnx.proto.TensorProto.DataType.BOOL:o.push(0!==t.rawData.getInt8(t.index,!0)),t.index+=1,t.count++}}else for(let n=0;n<a;n++){if(t.count>t.limit)return o.push("..."),o;o.push(this._decode(t,e+1))}return 0==t.shape.length?o[0]:o}static _stringify(t,e,n){if(Array.isArray(t)){const o=[];o.push(e+"[");const a=t.map((t=>onnx.Tensor._stringify(t,e+n,n)));return a.length>0&&o.push(a.join(",\n")),o.push(e+"]"),o.join("\n")}return"string"==typeof t?e+t:t==1/0?e+"Infinity":t==-1/0?e+"-Infinity":isNaN(t)?e+"NaN":e+t.toString()}},onnx.TensorType=class{constructor(t,e,n){this._dataType=onnx.Utility.formatElementType(t),this._shape=e,this._denotation=n||null}get dataType(){return this._dataType}get shape(){return this._shape}get denotation(){return this._denotation}toString(){return this.dataType+this._shape.toString()}},onnx.TensorShape=class{constructor(t){this._dimensions=t}get dimensions(){return this._dimensions}toString(){return this._dimensions&&0!=this._dimensions.length?"["+this._dimensions.join(",")+"]":""}},onnx.SequenceType=class{constructor(t,e){this._elementType=t,this._denotation=e}get elementType(){return this._elementType}get dennotation(){return this._dennotation}toString(){return"sequence<"+this._elementType.toString()+">"}},onnx.MapType=class{constructor(t,e,n){this._keyType=onnx.Utility.formatElementType(t),this._valueType=e,this._denotation=n}get keyType(){return this._keyType}get valueType(){return this._valueType}get denotation(){return this._denotation}toString(){return"map<"+this._keyType+","+this._valueType.toString()+">"}},onnx.OpaqueType=class{constructor(t,e){this._domain=t,this._name=e}toString(){return"opaque<"+(this._domain?this._domain+".":"")+this._name+">"}},onnx.GraphMetadata=class{constructor(t,e){this._metadata=t,this._imports=e,this._cache=new Map,this._attributeCache=new Map}type(t){return this._cache.has(t)||this._cache.set(t,this._metadata.type(t,this._imports)),this._cache.get(t)}attribute(t,e){const n=t+":"+e;if(!this._attributeCache.has(n)){const e=this.type(t);if(e&&e.attributes&&e.attributes.length>0)for(const n of e.attributes)this._attributeCache.set(t+":"+n.name,n);this._attributeCache.has(n)||this._attributeCache.set(n,null)}return this._attributeCache.get(n)}},onnx.Metadata=class{static open(t){return onnx.Metadata._metadata?Promise.resolve(onnx.Metadata._metadata):t.request(null,"onnx-metadata.json","utf-8").then((t=>(onnx.Metadata._metadata=new onnx.Metadata(t),onnx.Metadata._metadata))).catch((()=>(onnx.Metadata._metadata=new onnx.Metadata(null),onnx.Metadata._metadata)))}constructor(t){if(this._map={},t){const e=JSON.parse(t);if(e)for(const t of e)if(t.name&&t.schema){const e=t.name;t.schema.name=e,this._map[e]=this._map[e]||[],this._map[e].push(t.schema)}}}type(t,e){let n=null;const o=this._map[t];if(o){let t=-1;for(const a of o){const o=e["ai.onnx"===a.domain?"":a.domain],r=a.since_version;o>=r&&t<r&&(t=r,n=a)}}return n}},onnx.Utility=class{static decodeText(t){return onnx.Utility._utf8Decoder=onnx.Utility._utf8Decoder||new TextDecoder("utf-8"),onnx.Utility._utf8Decoder.decode(t)}static formatElementType(t){if(!onnx.Utility._elementTypeMap){const t={};t[onnx.proto.TensorProto.DataType.UNDEFINED]="UNDEFINED",t[onnx.proto.TensorProto.DataType.FLOAT]="float32",t[onnx.proto.TensorProto.DataType.UINT8]="uint8",t[onnx.proto.TensorProto.DataType.INT8]="int8",t[onnx.proto.TensorProto.DataType.UINT16]="uint16",t[onnx.proto.TensorProto.DataType.INT16]="int16",t[onnx.proto.TensorProto.DataType.INT32]="int32",t[onnx.proto.TensorProto.DataType.INT64]="int64",t[onnx.proto.TensorProto.DataType.STRING]="string",t[onnx.proto.TensorProto.DataType.BOOL]="bool",t[onnx.proto.TensorProto.DataType.FLOAT16]="float16",t[onnx.proto.TensorProto.DataType.DOUBLE]="float64",t[onnx.proto.TensorProto.DataType.UINT32]="uint32",t[onnx.proto.TensorProto.DataType.UINT64]="uint64",t[onnx.proto.TensorProto.DataType.COMPLEX64]="complex64",t[onnx.proto.TensorProto.DataType.COMPLEX128]="complex128",t[onnx.proto.TensorProto.DataType.BFLOAT16]="bfloat16",onnx.Utility._elementTypeMap=t}return onnx.Utility._elementTypeMap[t]||onnx.Utility._elementTypeMap[onnx.proto.TensorProto.DataType.UNDEFINED]}static formatType(t,e){if(!t)return null;let n="";switch(t.denotation){case"TENSOR":n="Tensor";break;case"IMAGE":n="Image"+(e?"("+e.join(",")+")":"");break;case"AUDIO":n="Audio";break;case"TEXT":n="Text"}switch(t.value){case"tensor_type":case"sparse_tensor_type":{let e=[];return t.tensor_type.shape&&t.tensor_type.shape.dim&&(e=t.tensor_type.shape.dim.map((t=>t.dim_param?t.dim_param:t.dim_value))),new onnx.TensorType(t.tensor_type.elem_type,new onnx.TensorShape(e),n)}case"map_type":return new onnx.MapType(t.map_type.key_type,onnx.Utility.formatType(t.map_type.value_type,e),n);case"sequence_type":return new onnx.SequenceType(onnx.Utility.formatType(t.sequence_type.elem_type,e),n);case"opaque_type":return new onnx.OpaqueType(t.opaque_type.domain,t.opaque_type.name)}return null}},onnx.Error=class extends Error{constructor(t){super(t),this.name="Error loading ONNX model."}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.ModelFactory=onnx.ModelFactory);