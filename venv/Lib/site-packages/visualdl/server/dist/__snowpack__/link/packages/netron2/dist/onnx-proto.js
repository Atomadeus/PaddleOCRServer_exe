var $root=protobuf.get("onnx");$root.onnx={},$root.onnx.Version={_START_VERSION:0,IR_VERSION_2017_10_10:1,IR_VERSION_2017_10_30:2,IR_VERSION_2017_11_3:3,IR_VERSION_2019_1_22:4,IR_VERSION_2019_3_18:5,IR_VERSION_2019_9_19:6,IR_VERSION:7},$root.onnx.AttributeProto=class{constructor(){this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],this.sparse_tensors=[]}static decode(o,t){const e=new $root.onnx.AttributeProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.name=o.string();break;case 21:e.ref_attr_name=o.string();break;case 13:e.doc_string=o.string();break;case 20:e.type=o.int32();break;case 2:e.f=o.float();break;case 3:e.i=o.int64();break;case 4:e.s=o.bytes();break;case 5:e.t=$root.onnx.TensorProto.decode(o,o.uint32());break;case 6:e.g=$root.onnx.GraphProto.decode(o,o.uint32());break;case 22:e.sparse_tensor=$root.onnx.SparseTensorProto.decode(o,o.uint32());break;case 7:e.floats=o.floats(e.floats,t);break;case 8:e.ints=o.array(e.ints,(()=>o.int64()),t);break;case 9:e.strings.push(o.bytes());break;case 10:e.tensors.push($root.onnx.TensorProto.decode(o,o.uint32()));break;case 11:e.graphs.push($root.onnx.GraphProto.decode(o,o.uint32()));break;case 23:e.sparse_tensors.push($root.onnx.SparseTensorProto.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.AttributeProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"name":t.name=o.string();break;case"ref_attr_name":t.ref_attr_name=o.string();break;case"doc_string":t.doc_string=o.string();break;case"type":t.type=o.enum($root.onnx.AttributeProto.AttributeType);break;case"f":t.f=o.float();break;case"i":t.i=o.integer();break;case"s":t.s=o.bytes();break;case"t":t.t=$root.onnx.TensorProto.decodeText(o,!0);break;case"g":t.g=$root.onnx.GraphProto.decodeText(o,!0);break;case"sparse_tensor":t.sparse_tensor=$root.onnx.SparseTensorProto.decodeText(o,!0);break;case"floats":o.array(t.floats,(()=>o.float()));break;case"ints":o.array(t.ints,(()=>o.integer()));break;case"strings":o.array(t.strings,(()=>o.bytes()));break;case"tensors":t.tensors.push($root.onnx.TensorProto.decodeText(o,!0));break;case"graphs":t.graphs.push($root.onnx.GraphProto.decodeText(o,!0));break;case"sparse_tensors":t.sparse_tensors.push($root.onnx.SparseTensorProto.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.AttributeProto.prototype.name="",$root.onnx.AttributeProto.prototype.ref_attr_name="",$root.onnx.AttributeProto.prototype.doc_string="",$root.onnx.AttributeProto.prototype.type=0,$root.onnx.AttributeProto.prototype.f=0,$root.onnx.AttributeProto.prototype.i=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.AttributeProto.prototype.s=new Uint8Array([]),$root.onnx.AttributeProto.prototype.t=null,$root.onnx.AttributeProto.prototype.g=null,$root.onnx.AttributeProto.prototype.sparse_tensor=null,$root.onnx.AttributeProto.AttributeType={UNDEFINED:0,FLOAT:1,INT:2,STRING:3,TENSOR:4,GRAPH:5,SPARSE_TENSOR:11,FLOATS:6,INTS:7,STRINGS:8,TENSORS:9,GRAPHS:10,SPARSE_TENSORS:12},$root.onnx.ValueInfoProto=class{constructor(){}static decode(o,t){const e=new $root.onnx.ValueInfoProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.name=o.string();break;case 2:e.type=$root.onnx.TypeProto.decode(o,o.uint32());break;case 3:e.doc_string=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.ValueInfoProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"name":t.name=o.string();break;case"type":t.type=$root.onnx.TypeProto.decodeText(o,!0);break;case"doc_string":t.doc_string=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.ValueInfoProto.prototype.name="",$root.onnx.ValueInfoProto.prototype.type=null,$root.onnx.ValueInfoProto.prototype.doc_string="",$root.onnx.NodeProto=class{constructor(){this.input=[],this.output=[],this.attribute=[]}static decode(o,t){const e=new $root.onnx.NodeProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.input.push(o.string());break;case 2:e.output.push(o.string());break;case 3:e.name=o.string();break;case 4:e.op_type=o.string();break;case 7:e.domain=o.string();break;case 5:e.attribute.push($root.onnx.AttributeProto.decode(o,o.uint32()));break;case 6:e.doc_string=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.NodeProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"input":o.array(t.input,(()=>o.string()));break;case"output":o.array(t.output,(()=>o.string()));break;case"name":t.name=o.string();break;case"op_type":t.op_type=o.string();break;case"domain":t.domain=o.string();break;case"attribute":t.attribute.push($root.onnx.AttributeProto.decodeText(o,!0));break;case"doc_string":t.doc_string=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.NodeProto.prototype.name="",$root.onnx.NodeProto.prototype.op_type="",$root.onnx.NodeProto.prototype.domain="",$root.onnx.NodeProto.prototype.doc_string="",$root.onnx.TrainingInfoProto=class{constructor(){this.initialization_binding=[],this.update_binding=[]}static decode(o,t){const e=new $root.onnx.TrainingInfoProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.initialization=$root.onnx.GraphProto.decode(o,o.uint32());break;case 2:e.algorithm=$root.onnx.GraphProto.decode(o,o.uint32());break;case 3:e.initialization_binding.push($root.onnx.StringStringEntryProto.decode(o,o.uint32()));break;case 4:e.update_binding.push($root.onnx.StringStringEntryProto.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TrainingInfoProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"initialization":t.initialization=$root.onnx.GraphProto.decodeText(o,!0);break;case"algorithm":t.algorithm=$root.onnx.GraphProto.decodeText(o,!0);break;case"initialization_binding":t.initialization_binding.push($root.onnx.StringStringEntryProto.decodeText(o,!0));break;case"update_binding":t.update_binding.push($root.onnx.StringStringEntryProto.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.TrainingInfoProto.prototype.initialization=null,$root.onnx.TrainingInfoProto.prototype.algorithm=null,$root.onnx.ModelProto=class{constructor(){this.opset_import=[],this.metadata_props=[],this.training_info=[]}static decode(o,t){const e=new $root.onnx.ModelProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.ir_version=o.int64();break;case 8:e.opset_import.push($root.onnx.OperatorSetIdProto.decode(o,o.uint32()));break;case 2:e.producer_name=o.string();break;case 3:e.producer_version=o.string();break;case 4:e.domain=o.string();break;case 5:e.model_version=o.int64();break;case 6:e.doc_string=o.string();break;case 7:e.graph=$root.onnx.GraphProto.decode(o,o.uint32());break;case 14:e.metadata_props.push($root.onnx.StringStringEntryProto.decode(o,o.uint32()));break;case 20:e.training_info.push($root.onnx.TrainingInfoProto.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.ModelProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"ir_version":t.ir_version=o.integer();break;case"opset_import":t.opset_import.push($root.onnx.OperatorSetIdProto.decodeText(o,!0));break;case"producer_name":t.producer_name=o.string();break;case"producer_version":t.producer_version=o.string();break;case"domain":t.domain=o.string();break;case"model_version":t.model_version=o.integer();break;case"doc_string":t.doc_string=o.string();break;case"graph":t.graph=$root.onnx.GraphProto.decodeText(o,!0);break;case"metadata_props":t.metadata_props.push($root.onnx.StringStringEntryProto.decodeText(o,!0));break;case"training_info":t.training_info.push($root.onnx.TrainingInfoProto.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.ModelProto.prototype.ir_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.ModelProto.prototype.producer_name="",$root.onnx.ModelProto.prototype.producer_version="",$root.onnx.ModelProto.prototype.domain="",$root.onnx.ModelProto.prototype.model_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.ModelProto.prototype.doc_string="",$root.onnx.ModelProto.prototype.graph=null,$root.onnx.StringStringEntryProto=class{constructor(){}static decode(o,t){const e=new $root.onnx.StringStringEntryProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.key=o.string();break;case 2:e.value=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.StringStringEntryProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"key":t.key=o.string();break;case"value":t.value=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.StringStringEntryProto.prototype.key="",$root.onnx.StringStringEntryProto.prototype.value="",$root.onnx.TensorAnnotation=class{constructor(){this.quant_parameter_tensor_names=[]}static decode(o,t){const e=new $root.onnx.TensorAnnotation,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.tensor_name=o.string();break;case 2:e.quant_parameter_tensor_names.push($root.onnx.StringStringEntryProto.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TensorAnnotation;for(o.start();!o.end();){const e=o.tag();switch(e){case"tensor_name":t.tensor_name=o.string();break;case"quant_parameter_tensor_names":t.quant_parameter_tensor_names.push($root.onnx.StringStringEntryProto.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.TensorAnnotation.prototype.tensor_name="",$root.onnx.GraphProto=class{constructor(){this.node=[],this.initializer=[],this.sparse_initializer=[],this.input=[],this.output=[],this.value_info=[],this.quantization_annotation=[]}static decode(o,t){const e=new $root.onnx.GraphProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.node.push($root.onnx.NodeProto.decode(o,o.uint32()));break;case 2:e.name=o.string();break;case 5:e.initializer.push($root.onnx.TensorProto.decode(o,o.uint32()));break;case 15:e.sparse_initializer.push($root.onnx.SparseTensorProto.decode(o,o.uint32()));break;case 10:e.doc_string=o.string();break;case 11:e.input.push($root.onnx.ValueInfoProto.decode(o,o.uint32()));break;case 12:e.output.push($root.onnx.ValueInfoProto.decode(o,o.uint32()));break;case 13:e.value_info.push($root.onnx.ValueInfoProto.decode(o,o.uint32()));break;case 14:e.quantization_annotation.push($root.onnx.TensorAnnotation.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.GraphProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"node":t.node.push($root.onnx.NodeProto.decodeText(o,!0));break;case"name":t.name=o.string();break;case"initializer":t.initializer.push($root.onnx.TensorProto.decodeText(o,!0));break;case"sparse_initializer":t.sparse_initializer.push($root.onnx.SparseTensorProto.decodeText(o,!0));break;case"doc_string":t.doc_string=o.string();break;case"input":t.input.push($root.onnx.ValueInfoProto.decodeText(o,!0));break;case"output":t.output.push($root.onnx.ValueInfoProto.decodeText(o,!0));break;case"value_info":t.value_info.push($root.onnx.ValueInfoProto.decodeText(o,!0));break;case"quantization_annotation":t.quantization_annotation.push($root.onnx.TensorAnnotation.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.GraphProto.prototype.name="",$root.onnx.GraphProto.prototype.doc_string="",$root.onnx.TensorProto=class{constructor(){this.dims=[],this.float_data=[],this.int32_data=[],this.string_data=[],this.int64_data=[],this.external_data=[],this.double_data=[],this.uint64_data=[]}static decode(o,t){const e=new $root.onnx.TensorProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.dims=o.array(e.dims,(()=>o.int64()),t);break;case 2:e.data_type=o.int32();break;case 3:e.segment=$root.onnx.TensorProto.Segment.decode(o,o.uint32());break;case 4:e.float_data=o.floats(e.float_data,t);break;case 5:e.int32_data=o.array(e.int32_data,(()=>o.int32()),t);break;case 6:e.string_data.push(o.bytes());break;case 7:e.int64_data=o.array(e.int64_data,(()=>o.int64()),t);break;case 8:e.name=o.string();break;case 12:e.doc_string=o.string();break;case 9:e.raw_data=o.bytes();break;case 13:e.external_data.push($root.onnx.StringStringEntryProto.decode(o,o.uint32()));break;case 14:e.data_location=o.int32();break;case 10:e.double_data=o.doubles(e.double_data,t);break;case 11:e.uint64_data=o.array(e.uint64_data,(()=>o.uint64()),t);break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TensorProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"dims":o.array(t.dims,(()=>o.integer()));break;case"data_type":t.data_type=o.integer();break;case"segment":t.segment=$root.onnx.TensorProto.Segment.decodeText(o,!0);break;case"float_data":o.array(t.float_data,(()=>o.float()));break;case"int32_data":o.array(t.int32_data,(()=>o.integer()));break;case"string_data":o.array(t.string_data,(()=>o.bytes()));break;case"int64_data":o.array(t.int64_data,(()=>o.integer()));break;case"name":t.name=o.string();break;case"doc_string":t.doc_string=o.string();break;case"raw_data":t.raw_data=o.bytes();break;case"external_data":t.external_data.push($root.onnx.StringStringEntryProto.decodeText(o,!0));break;case"data_location":t.data_location=o.enum($root.onnx.TensorProto.DataLocation);break;case"double_data":o.array(t.double_data,(()=>o.float()));break;case"uint64_data":o.array(t.uint64_data,(()=>o.integer()));break;default:o.field(e,t)}}return t}},$root.onnx.TensorProto.prototype.data_type=0,$root.onnx.TensorProto.prototype.segment=null,$root.onnx.TensorProto.prototype.name="",$root.onnx.TensorProto.prototype.doc_string="",$root.onnx.TensorProto.prototype.raw_data=new Uint8Array([]),$root.onnx.TensorProto.prototype.data_location=0,$root.onnx.TensorProto.DataType={UNDEFINED:0,FLOAT:1,UINT8:2,INT8:3,UINT16:4,INT16:5,INT32:6,INT64:7,STRING:8,BOOL:9,FLOAT16:10,DOUBLE:11,UINT32:12,UINT64:13,COMPLEX64:14,COMPLEX128:15,BFLOAT16:16},$root.onnx.TensorProto.Segment=class{constructor(){}static decode(o,t){const e=new $root.onnx.TensorProto.Segment,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.begin=o.int64();break;case 2:e.end=o.int64();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TensorProto.Segment;for(o.start();!o.end();){const e=o.tag();switch(e){case"begin":t.begin=o.integer();break;case"end":t.end=o.integer();break;default:o.field(e,t)}}return t}},$root.onnx.TensorProto.Segment.prototype.begin=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.TensorProto.Segment.prototype.end=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.TensorProto.DataLocation={DEFAULT:0,EXTERNAL:1},$root.onnx.SparseTensorProto=class{constructor(){this.dims=[]}static decode(o,t){const e=new $root.onnx.SparseTensorProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.values=$root.onnx.TensorProto.decode(o,o.uint32());break;case 2:e.indices=$root.onnx.TensorProto.decode(o,o.uint32());break;case 3:e.dims=o.array(e.dims,(()=>o.int64()),t);break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.SparseTensorProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"values":t.values=$root.onnx.TensorProto.decodeText(o,!0);break;case"indices":t.indices=$root.onnx.TensorProto.decodeText(o,!0);break;case"dims":o.array(t.dims,(()=>o.integer()));break;default:o.field(e,t)}}return t}},$root.onnx.SparseTensorProto.prototype.values=null,$root.onnx.SparseTensorProto.prototype.indices=null,$root.onnx.TensorShapeProto=class{constructor(){this.dim=[]}static decode(o,t){const e=new $root.onnx.TensorShapeProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.dim.push($root.onnx.TensorShapeProto.Dimension.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TensorShapeProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"dim":t.dim.push($root.onnx.TensorShapeProto.Dimension.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.TensorShapeProto.Dimension=class{constructor(){}get value(){return $root.onnx.TensorShapeProto.Dimension.valueSet=$root.onnx.TensorShapeProto.Dimension.valueSet||new Set(["dim_value","dim_param"]),Object.keys(this).find((o=>$root.onnx.TensorShapeProto.Dimension.valueSet.has(o)&&null!=this[o]))}static decode(o,t){const e=new $root.onnx.TensorShapeProto.Dimension,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.dim_value=o.int64();break;case 2:e.dim_param=o.string();break;case 3:e.denotation=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TensorShapeProto.Dimension;for(o.start();!o.end();){const e=o.tag();switch(e){case"dim_value":t.dim_value=o.integer();break;case"dim_param":t.dim_param=o.string();break;case"denotation":t.denotation=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.TensorShapeProto.Dimension.prototype.denotation="",$root.onnx.TypeProto=class{constructor(){}get value(){return $root.onnx.TypeProto.valueSet=$root.onnx.TypeProto.valueSet||new Set(["tensor_type","sequence_type","map_type","sparse_tensor_type","opaque_type"]),Object.keys(this).find((o=>$root.onnx.TypeProto.valueSet.has(o)&&null!=this[o]))}static decode(o,t){const e=new $root.onnx.TypeProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.tensor_type=$root.onnx.TypeProto.Tensor.decode(o,o.uint32());break;case 4:e.sequence_type=$root.onnx.TypeProto.Sequence.decode(o,o.uint32());break;case 5:e.map_type=$root.onnx.TypeProto.Map.decode(o,o.uint32());break;case 8:e.sparse_tensor_type=$root.onnx.TypeProto.SparseTensor.decode(o,o.uint32());break;case 7:e.opaque_type=$root.onnx.TypeProto.Opaque.decode(o,o.uint32());break;case 6:e.denotation=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TypeProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"tensor_type":t.tensor_type=$root.onnx.TypeProto.Tensor.decodeText(o,!0);break;case"sequence_type":t.sequence_type=$root.onnx.TypeProto.Sequence.decodeText(o,!0);break;case"map_type":t.map_type=$root.onnx.TypeProto.Map.decodeText(o,!0);break;case"sparse_tensor_type":t.sparse_tensor_type=$root.onnx.TypeProto.SparseTensor.decodeText(o,!0);break;case"opaque_type":t.opaque_type=$root.onnx.TypeProto.Opaque.decodeText(o,!0);break;case"denotation":t.denotation=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.TypeProto.prototype.denotation="",$root.onnx.TypeProto.Tensor=class{constructor(){}static decode(o,t){const e=new $root.onnx.TypeProto.Tensor,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.elem_type=o.int32();break;case 2:e.shape=$root.onnx.TensorShapeProto.decode(o,o.uint32());break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TypeProto.Tensor;for(o.start();!o.end();){const e=o.tag();switch(e){case"elem_type":t.elem_type=o.integer();break;case"shape":t.shape=$root.onnx.TensorShapeProto.decodeText(o,!0);break;default:o.field(e,t)}}return t}},$root.onnx.TypeProto.Tensor.prototype.elem_type=0,$root.onnx.TypeProto.Tensor.prototype.shape=null,$root.onnx.TypeProto.Sequence=class{constructor(){}static decode(o,t){const e=new $root.onnx.TypeProto.Sequence,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.elem_type=$root.onnx.TypeProto.decode(o,o.uint32());break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TypeProto.Sequence;for(o.start();!o.end();){const e=o.tag();switch(e){case"elem_type":t.elem_type=$root.onnx.TypeProto.decodeText(o,!0);break;default:o.field(e,t)}}return t}},$root.onnx.TypeProto.Sequence.prototype.elem_type=null,$root.onnx.TypeProto.Map=class{constructor(){}static decode(o,t){const e=new $root.onnx.TypeProto.Map,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.key_type=o.int32();break;case 2:e.value_type=$root.onnx.TypeProto.decode(o,o.uint32());break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TypeProto.Map;for(o.start();!o.end();){const e=o.tag();switch(e){case"key_type":t.key_type=o.integer();break;case"value_type":t.value_type=$root.onnx.TypeProto.decodeText(o,!0);break;default:o.field(e,t)}}return t}},$root.onnx.TypeProto.Map.prototype.key_type=0,$root.onnx.TypeProto.Map.prototype.value_type=null,$root.onnx.TypeProto.SparseTensor=class{constructor(){}static decode(o,t){const e=new $root.onnx.TypeProto.SparseTensor,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.elem_type=o.int32();break;case 2:e.shape=$root.onnx.TensorShapeProto.decode(o,o.uint32());break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TypeProto.SparseTensor;for(o.start();!o.end();){const e=o.tag();switch(e){case"elem_type":t.elem_type=o.integer();break;case"shape":t.shape=$root.onnx.TensorShapeProto.decodeText(o,!0);break;default:o.field(e,t)}}return t}},$root.onnx.TypeProto.SparseTensor.prototype.elem_type=0,$root.onnx.TypeProto.SparseTensor.prototype.shape=null,$root.onnx.TypeProto.Opaque=class{constructor(){}static decode(o,t){const e=new $root.onnx.TypeProto.Opaque,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.domain=o.string();break;case 2:e.name=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.TypeProto.Opaque;for(o.start();!o.end();){const e=o.tag();switch(e){case"domain":t.domain=o.string();break;case"name":t.name=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.TypeProto.Opaque.prototype.domain="",$root.onnx.TypeProto.Opaque.prototype.name="",$root.onnx.OperatorSetIdProto=class{constructor(){}static decode(o,t){const e=new $root.onnx.OperatorSetIdProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.domain=o.string();break;case 2:e.version=o.int64();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.OperatorSetIdProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"domain":t.domain=o.string();break;case"version":t.version=o.integer();break;default:o.field(e,t)}}return t}},$root.onnx.OperatorSetIdProto.prototype.domain="",$root.onnx.OperatorSetIdProto.prototype.version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorStatus={EXPERIMENTAL:0,STABLE:1},$root.onnx.FunctionProto=class{constructor(){this.input=[],this.output=[],this.attribute=[],this.node=[],this.opset_import=[]}static decode(o,t){const e=new $root.onnx.FunctionProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.name=o.string();break;case 2:e.since_version=o.int64();break;case 3:e.status=o.int32();break;case 4:e.input.push(o.string());break;case 5:e.output.push(o.string());break;case 6:e.attribute.push(o.string());break;case 7:e.node.push($root.onnx.NodeProto.decode(o,o.uint32()));break;case 8:e.doc_string=o.string();break;case 9:e.opset_import.push($root.onnx.OperatorSetIdProto.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.FunctionProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"name":t.name=o.string();break;case"since_version":t.since_version=o.integer();break;case"status":t.status=o.enum($root.onnx.OperatorStatus);break;case"input":o.array(t.input,(()=>o.string()));break;case"output":o.array(t.output,(()=>o.string()));break;case"attribute":o.array(t.attribute,(()=>o.string()));break;case"node":t.node.push($root.onnx.NodeProto.decodeText(o,!0));break;case"doc_string":t.doc_string=o.string();break;case"opset_import":t.opset_import.push($root.onnx.OperatorSetIdProto.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.FunctionProto.prototype.name="",$root.onnx.FunctionProto.prototype.since_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.FunctionProto.prototype.status=0,$root.onnx.FunctionProto.prototype.doc_string="",$root.onnx.OperatorProto=class{constructor(){}static decode(o,t){const e=new $root.onnx.OperatorProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.op_type=o.string();break;case 2:e.since_version=o.int64();break;case 3:e.status=o.int32();break;case 10:e.doc_string=o.string();break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.OperatorProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"op_type":t.op_type=o.string();break;case"since_version":t.since_version=o.integer();break;case"status":t.status=o.enum($root.onnx.OperatorStatus);break;case"doc_string":t.doc_string=o.string();break;default:o.field(e,t)}}return t}},$root.onnx.OperatorProto.prototype.op_type="",$root.onnx.OperatorProto.prototype.since_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorProto.prototype.status=0,$root.onnx.OperatorProto.prototype.doc_string="",$root.onnx.OperatorSetProto=class{constructor(){this.operator=[],this.functions=[]}static decode(o,t){const e=new $root.onnx.OperatorSetProto,r=o.next(t);for(;o.end(r);){const t=o.uint32();switch(t>>>3){case 1:e.magic=o.string();break;case 2:e.ir_version=o.int64();break;case 3:e.ir_version_prerelease=o.string();break;case 7:e.ir_build_metadata=o.string();break;case 4:e.domain=o.string();break;case 5:e.opset_version=o.int64();break;case 6:e.doc_string=o.string();break;case 8:e.operator.push($root.onnx.OperatorProto.decode(o,o.uint32()));break;case 9:e.functions.push($root.onnx.FunctionProto.decode(o,o.uint32()));break;default:o.skipType(7&t)}}return e}static decodeText(o){const t=new $root.onnx.OperatorSetProto;for(o.start();!o.end();){const e=o.tag();switch(e){case"magic":t.magic=o.string();break;case"ir_version":t.ir_version=o.integer();break;case"ir_version_prerelease":t.ir_version_prerelease=o.string();break;case"ir_build_metadata":t.ir_build_metadata=o.string();break;case"domain":t.domain=o.string();break;case"opset_version":t.opset_version=o.integer();break;case"doc_string":t.doc_string=o.string();break;case"operator":t.operator.push($root.onnx.OperatorProto.decodeText(o,!0));break;case"functions":t.functions.push($root.onnx.FunctionProto.decodeText(o,!0));break;default:o.field(e,t)}}return t}},$root.onnx.OperatorSetProto.prototype.magic="",$root.onnx.OperatorSetProto.prototype.ir_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorSetProto.prototype.ir_version_prerelease="",$root.onnx.OperatorSetProto.prototype.ir_build_metadata="",$root.onnx.OperatorSetProto.prototype.domain="",$root.onnx.OperatorSetProto.prototype.opset_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorSetProto.prototype.doc_string="";