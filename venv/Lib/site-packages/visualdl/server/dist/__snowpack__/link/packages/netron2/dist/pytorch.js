var pytorch=pytorch||{},base=base||require("./base"),long=long||{Long:require("long")};pytorch.ModelFactory=class{match(t){const e=t.identifier,n=e.split(".").pop().toLowerCase();return!(-1===["pth","pt","pt1","pkl","bin","model","h5","pb","t7","dms","ckpt","zip"].indexOf(n)&&!e.toLowerCase().endsWith(".tar")||!pytorch.Container.open(t))}open(t,e){const n=t.identifier;return e.require("./pickle").then((s=>e.require("./python").then((r=>pytorch.Metadata.open(e).then((o=>{try{const i=pytorch.Container.open(t,o,s,r,((t,s)=>{const r=t&&t.message?t.message:t.toString();e.exception(new pytorch.Error(r.replace(/\.$/,"")+" in '"+n+"'."),s)}));return new pytorch.Model(o,i)}catch(t){e.exception(t,!1);const s=t&&t.message?t.message:t.toString();throw new pytorch.Error(s.replace(/\.$/,"")+" in '"+n+"'.")}}))))))}},pytorch.Model=class{constructor(t,e){this._format=e.format,this._producer=e.producer||"",this._graphs=[new pytorch.Graph(t,e)]}get format(){return this._format}get graphs(){return this._graphs}},pytorch.Graph=class{constructor(t,e){if(this._nodes=[],this._inputs=[],this._outputs=[],this._groups=!0,this._littleEndian=e.littleEndian,e.format.startsWith("TorchScript ")){this._name=e.name;const n=e.trace(),s=new Map;if(e.data){const t=[e.data];for(;t.length>0;){const e=t.shift();for(const n of Object.keys(e))if("__module__"!==n&&"__name__"!==n&&"__parent__"!==n){const r=e[n];if(!Array.isArray(r)&&r===Object(r))if(pytorch.Utility.isTensor(r)){const t=r;t.__parent__=e,!t.initializer&&t.storage&&(t.initializer=new pytorch.Tensor(t.name,t,!0)),t.__variable__&&1===t.__count__&&s.set(t.__variable__,t)}else r&&r.__module__&&r.__name__&&(r.__parent__=e,r.__id__||(r.__id__=n),t.push(r))}}}if(n){if(e.inputs)for(const t of e.inputs)this._inputs.push(new pytorch.Parameter(t,!0,[new pytorch.Argument(t,null,null)]));if(e.outputs)for(const t of e.outputs)this._outputs.push(new pytorch.Parameter(t,!0,[new pytorch.Argument(t,null,null)]));if(e.nodes)for(const n of e.nodes){const e={type:n.type,node:n};this._nodes.push(new pytorch.Node(t,"",e,s))}}e.data&&this._loadScriptModule(t,e,e.data,s)}else if(e.data){const n=e.data;this._type=n.__module__&&n.__name__?n.__module__+"."+n.__name__:"";const s="data";this._inputs.push(new pytorch.Parameter(s,!0,[new pytorch.Argument(s,null,null)]));const r=this._loadModule(t,e.data,[],[s]);for(const t of r)this._outputs.push(new pytorch.Parameter(t,!0,[new pytorch.Argument(t,null,null)]))}else if(e.state)for(const n of e.state){const e=n.attributes||[],s=n.states.map((t=>new pytorch.Parameter(t.name,!0,t.arguments.map((t=>{const e=new pytorch.Tensor(t.id,t.value,this._littleEndian);return new pytorch.Argument(t.id,null,e)}))))),r={name:n.name,type:n.type||"torch.nn.Module",attributes:e,inputs:s,outputs:[]};this._nodes.push(new pytorch.Node(t,"",r,null))}}_loadModule(t,e,n,s){if(e.__module__&&"torch.nn.modules.container"===!e.__module__&&(!e._modules||0==e._modules.length))return this._createNode(n,"",e,s),[];if(!e._modules)throw new pytorch.Error("Module does not contain modules.");for(const r of e._modules){const e=r[0],o=r[1];if(r&&o)switch(o.__module__+"."+o.__name__){case"torch.nn.modules.container.Sequential":n.push(e),s=this._loadModule(t,o,n,s),n.pop(e);break;case"torchvision.models.densenet._Transition":case"torchvision.models.resnet.Bottleneck":case"torchvision.models.densenet._DenseBlock":case"torchvision.models.densenet._DenseLayer":case"torchvision.models.inception.BasicConv2d":case"torchvision.models.inception.InceptionAux":case"torchvision.models.inception.InceptionA":case"torchvision.models.inception.InceptionB":case"torchvision.models.inception.InceptionC":case"torchvision.models.inception.InceptionD":case"torchvision.models.inception.InceptionE":n.push(e),s=[this._createNode(t,n,e,o,s,this._littleEndian).name],n.pop(e);break;default:s=[this._createNode(t,n,e,o,s).name]}}return s}_createNode(t,e,n,s,r){const o=s.__module__+"."+s.__name__,i=t.type(o);let a=[{name:"input"}];i&&i.inputs&&i.inputs.length>0&&(a=i.inputs.slice());const c=[new pytorch.Parameter(a.shift().name,!0,r.map((t=>new pytorch.Argument(t,null,null))))],_=s._parameters||s._buffers||[];for(const t of _){const e=t[0],n=t[1];let s=!0,r="";if(a.length>0){const t=a.shift();r=t.name,s=!1!==t.visible}if(t&&n&&(n.data||n.storage)){let t=null;n.data?t=new pytorch.Tensor("",n.data,this._littleEndian):n.storage&&(t=new pytorch.Tensor("",n,this._littleEndian)),c.push(new pytorch.Parameter(r||e,s,[new pytorch.Argument("",null,t)]))}}const u=e.join("/"),h=u?u+"/"+n:n,l=[new pytorch.Parameter("output",!0,[new pytorch.Argument(h,null,null)])],p=[];for(const t of Object.keys(s))t.startsWith("_")||p.push({name:t,value:s[t]});const d={name:h,type:o,attributes:p,inputs:c,outputs:l},m=new pytorch.Node(t,u,d,{});return this._nodes.push(m),m}_loadScriptModule(t,e,n,s){if(n){if(pytorch.Graph._getParameters(n).length>0&&!n.__hide__){const e={module:n};this._nodes.push(new pytorch.Node(t,"",e,s))}const r=pytorch.Graph._getSubmodules(n);for(const n of r)this._loadScriptModule(t,e,n,s)}}static _getParameters(t){const e=[];if(t&&t.__module__&&t.__name__)for(const n of Object.keys(t))if(pytorch.Utility.isTensor(t[n])){const s=t[n];s.__id__=n,e.push(s)}return e}static _getSubmodules(t){const e=[];if(t&&t.__module__&&t.__name__)for(const n of Object.keys(t))if(!n.startsWith("__")){const s=t[n];s&&s.__module__&&s.__name__&&!pytorch.Utility.isTensor(s)&&e.push(s)}return e}get type(){return this._type}get name(){return this._name}get groups(){return this._groups}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},pytorch.Parameter=class{constructor(t,e,n){this._name=t,this._visible=e,this._arguments=n}get name(){return this._name}get visible(){return this._visible}get arguments(){return this._arguments}},pytorch.Argument=class{constructor(t,e,n){if("string"!=typeof t)throw new pytorch.Error("Invalid argument identifier '"+JSON.stringify(t)+"'.");this._name=t,this._type=e,this._initializer=n}get name(){return this._name}get type(){return this._initializer?this._initializer.type:this._type}get initializer(){return this._initializer}},pytorch.Node=class{constructor(t,e,n,s){if(this._metadata=t,this._group=e||"",this._name=n.name||"",n.module||n.node){this._attributes=[],this._inputs=[],this._outputs=[];let e=n.module;if(e){this._type="torch.nn.modules.module.Module";for(const t of pytorch.Graph._getParameters(e))this._inputs.push(new pytorch.Parameter(t.__id__,!0,[new pytorch.Argument("",null,t.initializer||null)])),t.__variable__&&this._outputs.push(new pytorch.Parameter(t.__id__,!0,[new pytorch.Argument(t.__variable__,null,null)]))}if(n.node){this._type=n.type;const r=t.type(this._type);e=null;let o=!0,i=0;for(const t of n.node.inputs){for(const n of t){const t=s.get(n.id);if(t){if(!t.__parent__||null!=e&&e!=t.__parent__){o=!1;break}e=t.__parent__,i++}}if(!o)break}if(e)if(pytorch.Graph._getParameters(e).filter((t=>"num_batches_tracked"!==t.__id__)).length==i&&o){e.__hide__=!0;for(const t of n.node.inputs)for(const e of t){const t=s.get(e.id);t&&t.initializer&&(e.initializer=t.initializer)}}else e=null;for(let t=0;t<n.node.inputs.length;t++){let e=t.toString();r&&r.inputs&&r.inputs.length>t&&(e=r.inputs[t].name),this._inputs.push(new pytorch.Parameter(e,!0,n.node.inputs[t].map((t=>new pytorch.Argument(t.id,null,t.initializer||null)))))}for(let t=0;t<n.node.outputs.length;t++){let e=t.toString();r&&r.outputs&&r.outputs.length>t&&(e=r.outputs[t].name),this._outputs.push(new pytorch.Parameter(e,!0,n.node.outputs[t].map((t=>new pytorch.Argument(t.id,null,null)))))}for(const e of n.node.attributes){const n=e.name,s=e.value,r=t.attribute(this._type,n);this._attributes.push(new pytorch.Attribute(r,n,s))}}if(e&&e.__id__){let t=e;for(this._name=t.__id__;null!=t.__parent__&&(t=t.__parent__,t.__parent__||t.__id__);)this._name=[t.__id__,this._name].join(".")}}else this._type=n.type,this._inputs=n.inputs,this._outputs=n.outputs,this._attributes=n.attributes.map((e=>{const n=t.attribute(this._type,e.name);return new pytorch.Attribute(n,e.name,e.value)}))}get name(){return this._name}get group(){return this._group}get type(){const t=this._type.indexOf(":");return-1===t?this._type:this._type.substring(0,t)}get metadata(){return this._metadata.type(this._type)}get function(){return this._type.startsWith("torch.nn.modules.")&&"torch.nn.modules.module.Module"!==this._type}get attributes(){return this._attributes}get inputs(){return this._inputs}get outputs(){return this._outputs}},pytorch.Attribute=class{constructor(t,e,n){if(this._name=e,this._value=n,"training"===this._name)return this._visible=!1,void(this._type="boolean");if(n&&n.type)switch(n.type){case"number":case"string":case"boolean":case"id":this._value=n.value}if(t){switch(Object.prototype.hasOwnProperty.call(t,"type")&&(this._type=t.type),this._type){case"boolean":"False"==this._value?this._value=!1:"True"==this._value&&(this._value=!0);break;case"int32":case"int64":"number"!=typeof this._value&&"string"==typeof this._value&&(this._value=parseInt(this._value,10));break;case"float32":case"float64":"number"!=typeof this._value&&"string"==typeof this._value&&(this._value=parseFloat(this._value));break;case"int32[]":case"int64[]":switch(this._value.type){case"list":this._value=this._value.value.map((t=>{if("number"===t.type){const e=parseInt(t.value,10);if(!Number.isNaN(t.value-e))return e}return t}))}}(Object.prototype.hasOwnProperty.call(t,"visible")&&!t.visible||Object.prototype.hasOwnProperty.call(t,"default")&&(JSON.stringify(t.default)==JSON.stringify(this._value)||Array.isArray(this._value)&&!Array.isArray(t.default)&&this.value.every((e=>e==t.default))))&&(this._visible=!1)}Array.isArray(n)&&n.length>0&&n.every((t=>t&&t.__module__&&t.__module__.startsWith("torch.nn")))&&(this._value="?")}get type(){return this._type}get name(){return this._name}get value(){return this._value}get visible(){return 0!=this._visible}},pytorch.Tensor=class{constructor(t,e,n){this._name=t||"",this._type=new pytorch.TensorType(e.storage.dataType,new pytorch.TensorShape(e.size)),this._data=e.storage.data,this._littleEndian=n}get kind(){return"Tensor"}get name(){return this._name}get type(){return this._type}get state(){return this._context().state}get value(){const t=this._context();return t.state?null:(t.limit=Number.MAX_SAFE_INTEGER,this._decode(t,0))}toString(){const t=this._context();if(t.state)return"";t.limit=1e4;const e=this._decode(t,0);return pytorch.Tensor._stringify(e,"","    ")}_context(){const t={state:null,index:0,count:0};if(!this._type.dataType)return t.state="Tensor has no data type.",t;switch(this._type.dataType){case"uint8":case"qint8":case"int8":case"int16":case"int32":case"int64":case"float16":case"float32":case"float64":break;default:return t.state="Tensor data type '"+this._type.dataType+"' is not supported.",t}return this._type.shape?this._data?(t.data=this._data,t.dataType=this._type.dataType,t.dimensions=this._type.shape.dimensions,t.dataView=new DataView(t.data.buffer,t.data.byteOffset,t.data.byteLength),t):(t.state="Tensor data is empty.",t):(t.state="Tensor has no dimensions.",t)}_decode(t,e){const n=[],s=0==t.dimensions.length?[1]:t.dimensions,r=s[e];if(e==s.length-1)for(let e=0;e<r;e++){if(t.count>t.limit)return n.push("..."),n;switch(t.dataType){case"uint8":n.push(t.dataView.getUint8(t.index,this._littleEndian)),t.index++,t.count++;break;case"qint8":case"int8":n.push(t.dataView.getInt8(t.index,this._littleEndian)),t.index++,t.count++;break;case"int16":n.push(t.dataView.getInt16(t.index,this._littleEndian)),t.index+=2,t.count++;break;case"int32":n.push(t.dataView.getInt32(t.index,this._littleEndian)),t.index+=4,t.count++;break;case"int64":n.push(new long.Long(t.dataView.getUint32(t.index,!0),t.dataView.getUint32(t.index+4,!0),!1)),t.index+=8,t.count++;break;case"float16":n.push(t.dataView.getFloat16(t.index,this._littleEndian)),t.index+=2,t.count++;break;case"float32":n.push(t.dataView.getFloat32(t.index,this._littleEndian)),t.index+=4,t.count++;break;case"float64":n.push(t.dataView.getFloat64(t.index,this._littleEndian)),t.index+=8,t.count++}}else for(let s=0;s<r;s++){if(t.count>t.limit)return n.push("..."),n;n.push(this._decode(t,e+1))}return 0==t.dimensions.length?n[0]:n}static _stringify(t,e,n){if(Array.isArray(t)){const s=[];s.push(e+"[");const r=t.map((t=>pytorch.Tensor._stringify(t,e+n,n)));return r.length>0&&s.push(r.join(",\n")),s.push(e+"]"),s.join("\n")}return t&&long.Long.isLong(t)?e+t.toString():"string"==typeof t?e+t:t==1/0?e+"Infinity":t==-1/0?e+"-Infinity":isNaN(t)?e+"NaN":e+t.toString()}},pytorch.TensorType=class{constructor(t,e){this._dataType=t,this._shape=e}get dataType(){return this._dataType}get shape(){return this._shape}toString(){return this._dataType+this._shape.toString()}},pytorch.TensorShape=class{constructor(t){this._dimensions=t||[]}get dimensions(){return this._dimensions}toString(){return this._dimensions&&this._dimensions.length>0?"["+this._dimensions.map((t=>t.toString())).join(",")+"]":""}},pytorch.Metadata=class{static open(t){return pytorch.Metadata._metadata?Promise.resolve(pytorch.Metadata._metadata):t.request(null,"pytorch-metadata.json","utf-8").then((t=>(pytorch.Metadata._metadata=new pytorch.Metadata(t),pytorch.Metadata._metadata))).catch((()=>(pytorch.Metadata._metadata=new pytorch.Metadata(null),pytorch.Metadata._metadata)))}constructor(t){if(this._map=new Map,this._attributeCache=new Map,t){const e=JSON.parse(t);if(e)for(const t of e){t.name&&t.schema&&(t.schema.name=t.name,this._map.set(t.name,t.schema));const e=t.name.indexOf(":");if(-1!==e){const n=t.name.substring(0,e);this._map.has(n)||this._map.set(n,[]),this._map.get(n).push(t.name)}}}}type(t){const e=this._map.get(t);return e?Array.isArray(e)?e.map((t=>this._map.get(t))):e:null}attribute(t,e){const n=t+":"+e;if(!this._attributeCache.has(n)){this._attributeCache.set(n,null);const e=this.type(t);if(e){if(e.inputs)for(const n of e.inputs)this._attributeCache.set(t+":"+n.name,n);if(e.attributes)for(const n of e.attributes)this._attributeCache.set(t+":"+n.name,n)}}return this._attributeCache.get(n)}},pytorch.Error=class extends Error{constructor(t){super(t),this.name="Error loading PyTorch model."}},pytorch.Execution=class{constructor(t,e,n){const s=this;this._python=t,this._sources=e,this._exceptionCallback=n,this._utf8Decoder=new TextDecoder("utf-8"),this._unknownNameMap=new Set,this._knownPackageMap=new Set(["torch","torchvision","collections","__builtin__","_codecs","argparse","numpy"]),this._packages=new Map,this._context=new pytorch.Execution.Context,this._context.scope.builtins={},this._context.scope.builtins.type={__module__:"builtins",__name__:"type"},this._context.scope.builtins.module={__module__:"builtins",__name__:"module",__class__:this._context.scope.builtins.type},this._context.scope.builtins.function={__module__:"builtins",__name__:"function",__class__:this._context.scope.builtins.type},this._context.scope.builtins.method={__module__:"builtins",__name__:"method",__class__:this._context.scope.builtins.type},this._context.scope.builtins.dict={__module__:"builtins",__name__:"dict",__class__:this._context.scope.builtins.type},this._context.scope.builtins.list={__module__:"builtins",__name__:"list",__class__:this._context.scope.builtins.type},this._context.scope.builtins.str={__module__:"builtins",__name__:"str",__class__:this._context.scope.builtins.type},this._context.scope.builtins.tuple={__module__:"builtins",__name__:"tuple",__class__:this._context.scope.builtins.type},this._context.scope.typing={__name__:"typing",__class__:this._context.scope.builtins.module},this._context.scope.typing._GenericAlias={__module__:"typing",__name__:"_GenericAlias",__class__:this._context.scope.builtins.type},this._context.scope.typing._SpecialForm={__module__:"typing",__name__:"_SpecialForm",__class__:this._context.scope.builtins.type},this._context.scope.typing._VariadicGenericAlias={__module__:"typing",__name__:"_VariadicGenericAlias",__class__:this._context.scope.builtins.type},this._context.scope.typing.Dict={__module__:"typing",__name__:"Dict",__class__:this._context.scope.typing._VariadicGenericAlias,__origin__:this._context.scope.builtins.dict},this._context.scope.typing.List={__module__:"typing",__name__:"List",__class__:this._context.scope.typing._GenericAlias,__origin__:this._context.scope.builtins.list},this._context.scope.typing.Optional={__module__:"typing",__class__:this._context.scope.typing._SpecialForm},this._context.scope.typing.Tuple={__module__:"typing",__name__:"Tuple",__class__:this._context.scope.typing._GenericAlias,__origin__:this._context.scope.builtins.tuple},this._context.scope.torch={__name__:"torch",__class__:this._context.scope.builtins.module},this._context.scope.torch.Tensor={__module__:"torch",__name__:"Tensor",__class__:this._context.scope.builtins.type},this._registerConstructor("argparse.Namespace",(function(t){this.args=t})),this._registerConstructor("torch.autograd.variable.Variable",(function(){})),this._registerConstructor("torch.backends.cudnn.rnn.Unserializable",(function(){})),this._registerConstructor("torch.device",(function(t,e){this.type=t,e&&(this.index=e)})),this._registerConstructor("torch.distributions.multivariate_normal.MultivariateNormal",(function(){})),this._registerConstructor("torch.nn.backends.thnn._get_thnn_function_backend",(function(){})),this._registerConstructor("torch.nn.intrinsic.modules.fused.ConvReLU2d",(function(){})),this._registerConstructor("torch.nn.modules.activation.CELU",(function(){})),this._registerConstructor("torch.nn.modules.activation.ELU",(function(){})),this._registerConstructor("torch.nn.modules.activation.GELU",(function(){})),this._registerConstructor("torch.nn.modules.activation.GLU",(function(){})),this._registerConstructor("torch.nn.modules.activation.Hardtanh",(function(){})),this._registerConstructor("torch.nn.modules.activation.LeakyReLU",(function(){})),this._registerConstructor("torch.nn.modules.activation.LogSigmoid",(function(){})),this._registerConstructor("torch.nn.modules.activation.LogSoftmax",(function(){})),this._registerConstructor("torch.nn.modules.activation.MultiheadAttention",(function(){})),this._registerConstructor("torch.nn.modules.activation.ReLU",(function(){})),this._registerConstructor("torch.nn.modules.activation.ReLU6",(function(){})),this._registerConstructor("torch.nn.modules.activation.PReLU",(function(){})),this._registerConstructor("torch.nn.modules.activation.RReLU",(function(){})),this._registerConstructor("torch.nn.modules.activation.SELU",(function(){})),this._registerConstructor("torch.nn.modules.activation.Sigmoid",(function(){})),this._registerConstructor("torch.nn.modules.activation.Softmax",(function(){})),this._registerConstructor("torch.nn.modules.activation.Softmax2d",(function(){})),this._registerConstructor("torch.nn.modules.activation.Softplus",(function(){})),this._registerConstructor("torch.nn.modules.activation.Tanh",(function(){})),this._registerConstructor("torch.nn.modules.activation.Threshold",(function(){})),this._registerConstructor("torch.nn.modules.batchnorm.BatchNorm1d",(function(){})),this._registerConstructor("torch.nn.modules.batchnorm.BatchNorm2d",(function(){})),this._registerConstructor("torch.nn.modules.batchnorm.BatchNorm3d",(function(){})),this._registerConstructor("torch.nn.modules.batchnorm.SyncBatchNorm",(function(){})),this._registerConstructor("torch.nn.modules.container.ModuleDict",(function(){})),this._registerConstructor("torch.nn.modules.container.ModuleList",(function(){})),this._registerConstructor("torch.nn.modules.container.ParameterList",(function(){})),this._registerConstructor("torch.nn.modules.container.Sequential",(function(){})),this._registerConstructor("torch.nn.modules.conv.Conv1d",(function(){})),this._registerConstructor("torch.nn.modules.conv.Conv2d",(function(){})),this._registerConstructor("torch.nn.modules.conv.Conv3d",(function(){})),this._registerConstructor("torch.nn.modules.conv.ConvTranspose1d",(function(){})),this._registerConstructor("torch.nn.modules.conv.ConvTranspose2d",(function(){})),this._registerConstructor("torch.nn.modules.conv.ConvTranspose3d",(function(){})),this._registerConstructor("torch.nn.modules.distance.CosineSimilarity",(function(){})),this._registerConstructor("torch.nn.modules.dropout.Dropout",(function(){})),this._registerConstructor("torch.nn.modules.dropout.Dropout2d",(function(){})),this._registerConstructor("torch.nn.modules.dropout.Dropout3d",(function(){})),this._registerConstructor("torch.nn.modules.fold.Unfold",(function(){})),this._registerConstructor("torch.nn.modules.flatten.Flatten",(function(){})),this._registerConstructor("torch.nn.modules.instancenorm.InstanceNorm1d",(function(){})),this._registerConstructor("torch.nn.modules.instancenorm.InstanceNorm2d",(function(){})),this._registerConstructor("torch.nn.modules.instancenorm.InstanceNorm3d",(function(){})),this._registerConstructor("torch.nn.modules.linear.Linear",(function(){})),this._registerConstructor("torch.nn.modules.linear.Identity",(function(){})),this._registerConstructor("torch.nn.modules.loss.BCELoss",(function(){})),this._registerConstructor("torch.nn.modules.loss.BCEWithLogitsLoss",(function(){})),this._registerConstructor("torch.nn.modules.loss.CrossEntropyLoss",(function(){})),this._registerConstructor("torch.nn.modules.loss.L1Loss",(function(){})),this._registerConstructor("torch.nn.modules.loss.MSELoss",(function(){})),this._registerConstructor("torch.nn.modules.loss.NLLLoss",(function(){})),this._registerConstructor("torch.nn.modules.loss.SmoothL1Loss",(function(){})),this._registerConstructor("torch.nn.modules.normalization.CrossMapLRN2d",(function(){})),this._registerConstructor("torch.nn.modules.normalization.GroupNorm",(function(){})),this._registerConstructor("torch.nn.modules.normalization.LayerNorm",(function(){})),this._registerConstructor("torch.nn.modules.normalization.LocalResponseNorm",(function(){})),this._registerConstructor("torch.nn.modules.padding.ReflectionPad1d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ReflectionPad2d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ReplicationPad1d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ReplicationPad2d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ReplicationPad3d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ZeroPad2d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ConstantPad1d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ConstantPad2d",(function(){})),this._registerConstructor("torch.nn.modules.padding.ConstantPad3d",(function(){})),this._registerConstructor("torch.nn.modules.pixelshuffle.PixelShuffle",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AdaptiveAvgPool1d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AdaptiveAvgPool2d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AdaptiveAvgPool3d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AdaptiveMaxPool1d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AdaptiveMaxPool2d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AdaptiveMaxPool3d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AvgPool1d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AvgPool2d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.AvgPool3d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.FractionalMaxPool2d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.MaxPool1d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.MaxPool2d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.MaxPool3d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.MaxUnpool1d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.MaxUnpool2d",(function(){})),this._registerConstructor("torch.nn.modules.pooling.MaxUnpool3d",(function(){})),this._registerConstructor("torch.nn.modules.rnn.GRU",(function(){})),this._registerConstructor("torch.nn.modules.rnn.GRUCell",(function(){})),this._registerConstructor("torch.nn.modules.rnn.LSTM",(function(){})),this._registerConstructor("torch.nn.modules.rnn.LSTMCell",(function(){})),this._registerConstructor("torch.nn.modules.rnn.RNN",(function(){})),this._registerConstructor("torch.nn.modules.sparse.Embedding",(function(){})),this._registerConstructor("torch.nn.modules.sparse.EmbeddingBag",(function(){})),this._registerConstructor("torch.nn.modules.transformer.TransformerEncoder",(function(){})),this._registerConstructor("torch.nn.modules.transformer.TransformerEncoderLayer",(function(){})),this._registerConstructor("torch.nn.modules.upsampling.Upsample",(function(){})),this._registerConstructor("torch.nn.modules.upsampling.UpsamplingBilinear2d",(function(){})),this._registerConstructor("torch.nn.modules.upsampling.UpsamplingNearest2d",(function(){})),this._registerConstructor("torch.nn.parallel.data_parallel.DataParallel",(function(){})),this._registerConstructor("torch.nn.parallel.distributed.DistributedDataParallel",(function(){})),this._registerConstructor("torch.nn.parameter.Parameter",(function(t,e){this.data=t,this.requires_grad=e})),this._registerConstructor("torch.nn.quantized.modules.functional_modules.FloatFunctional",(function(){})),this._registerConstructor("torch.nn.utils.spectral_norm.SpectralNorm",(function(){})),this._registerConstructor("torch.nn.utils.spectral_norm.SpectralNormStateDictHook",(function(){})),this._registerConstructor("torch.nn.utils.spectral_norm.SpectralNormLoadStateDictPreHook",(function(){})),this._registerConstructor("torch.nn.utils.weight_norm.WeightNorm",(function(){})),this._registerConstructor("torch.optim.adam.Adam",(function(){})),this._registerConstructor("torch.optim.adagrad.Adagrad",(function(){})),this._registerConstructor("torch.optim.lr_scheduler.MultiStepLR",(function(){})),this._registerConstructor("torch.optim.lr_scheduler.StepLR",(function(){})),this._registerConstructor("torch.optim.rmsprop.RMSprop",(function(){})),this._registerConstructor("torch.optim.sgd.SGD",(function(){})),this._registerConstructor("torch.quantization.stubs.DeQuantStub",(function(){})),this._registerConstructor("torch.quantization.stubs.QuantStub",(function(){})),this._registerConstructor("torchvision.datasets.folder.ImageFolder",(function(){})),this._registerConstructor("torchvision.models.alexnet.AlexNet",(function(){})),this._registerConstructor("torchvision.models.densenet.DenseNet",(function(){})),this._registerConstructor("torchvision.models.densenet._DenseBlock",(function(){})),this._registerConstructor("torchvision.models.densenet._DenseLayer",(function(){})),this._registerConstructor("torchvision.models.densenet._Transition",(function(){})),this._registerConstructor("torchvision.models.detection._utils.BalancedPositiveNegativeSampler",(function(){})),this._registerConstructor("torchvision.models.detection._utils.BoxCoder",(function(){})),this._registerConstructor("torchvision.models.detection._utils.Matcher",(function(){})),this._registerConstructor("torchvision.models.detection.backbone_utils.BackboneWithFPN",(function(){})),this._registerConstructor("torchvision.models.detection.faster_rcnn.FasterRCNN",(function(){})),this._registerConstructor("torchvision.models.detection.faster_rcnn.FastRCNNPredictor",(function(){})),this._registerConstructor("torchvision.models.detection.faster_rcnn.TwoMLPHead",(function(){})),this._registerConstructor("torchvision.models.detection.keypoint_rcnn.KeypointRCNN",(function(){})),this._registerConstructor("torchvision.models.detection.keypoint_rcnn.KeypointRCNNHeads",(function(){})),this._registerConstructor("torchvision.models.detection.keypoint_rcnn.KeypointRCNNPredictor",(function(){})),this._registerConstructor("torchvision.models.detection.mask_rcnn.MaskRCNN",(function(){})),this._registerConstructor("torchvision.models.detection.mask_rcnn.MaskRCNNHeads",(function(){})),this._registerConstructor("torchvision.models.detection.mask_rcnn.MaskRCNNPredictor",(function(){})),this._registerConstructor("torchvision.models.detection.roi_heads.RoIHeads",(function(){})),this._registerConstructor("torchvision.models.detection.rpn.AnchorGenerator",(function(){})),this._registerConstructor("torchvision.models.detection.rpn.RegionProposalNetwork",(function(){})),this._registerConstructor("torchvision.models.detection.rpn.RPNHead",(function(){})),this._registerConstructor("torchvision.models.detection.transform.GeneralizedRCNNTransform",(function(){})),this._registerConstructor("torchvision.models.googlenet.BasicConv2d",(function(){})),this._registerConstructor("torchvision.models.googlenet.GoogLeNet",(function(){})),this._registerConstructor("torchvision.models.googlenet.Inception",(function(){})),this._registerConstructor("torchvision.models.inception.BasicConv2d",(function(){})),this._registerConstructor("torchvision.models.inception.Inception3",(function(){})),this._registerConstructor("torchvision.models.inception.InceptionAux",(function(){})),this._registerConstructor("torchvision.models.inception.InceptionA",(function(){})),this._registerConstructor("torchvision.models.inception.InceptionB",(function(){})),this._registerConstructor("torchvision.models.inception.InceptionC",(function(){})),this._registerConstructor("torchvision.models.inception.InceptionD",(function(){})),this._registerConstructor("torchvision.models.inception.InceptionE",(function(){})),this._registerConstructor("torchvision.models.mobilenet.ConvBNReLU",(function(){})),this._registerConstructor("torchvision.models.mobilenet.MobileNetV2",(function(){})),this._registerConstructor("torchvision.models.mobilenet.InvertedResidual",(function(){})),this._registerConstructor("torchvision.models.resnet.Bottleneck",(function(){})),this._registerConstructor("torchvision.models.resnet.BasicBlock",(function(){})),this._registerConstructor("torchvision.models.quantization.resnet.QuantizableBottleneck",(function(){})),this._registerConstructor("torchvision.models.quantization.resnet.QuantizableResNet",(function(){})),this._registerConstructor("torchvision.models.segmentation.deeplabv3.ASPP",(function(){})),this._registerConstructor("torchvision.models.segmentation.deeplabv3.ASPPConv",(function(){})),this._registerConstructor("torchvision.models.segmentation.deeplabv3.ASPPPooling",(function(){})),this._registerConstructor("torchvision.models.segmentation.deeplabv3.DeepLabHead",(function(){})),this._registerConstructor("torchvision.models.segmentation.deeplabv3.DeepLabV3",(function(){})),this._registerConstructor("torchvision.models.segmentation.fcn.FCN",(function(){})),this._registerConstructor("torchvision.models.segmentation.fcn.FCNHead",(function(){})),this._registerConstructor("torchvision.models.shufflenetv2.ShuffleNetV2",(function(){})),this._registerConstructor("torchvision.models.shufflenetv2.InvertedResidual",(function(){})),this._registerConstructor("torchvision.models.squeezenet.Fire",(function(){})),this._registerConstructor("torchvision.models.squeezenet.SqueezeNet",(function(){})),this._registerConstructor("torchvision.models.resnet.ResNet",(function(){})),this._registerConstructor("torchvision.models.vgg.VGG",(function(){})),this._registerConstructor("torchvision.models.video.resnet.BasicBlock",(function(){})),this._registerConstructor("torchvision.models.video.resnet.BasicStem",(function(){})),this._registerConstructor("torchvision.models.video.resnet.Conv3DNoTemporal",(function(){})),this._registerConstructor("torchvision.models.video.resnet.Conv3DSimple",(function(){})),this._registerConstructor("torchvision.models.video.resnet.VideoResNet",(function(){})),this._registerConstructor("torchvision.models._utils.IntermediateLayerGetter",(function(){})),this._registerConstructor("torchvision.ops.feature_pyramid_network.FeaturePyramidNetwork",(function(){})),this._registerConstructor("torchvision.ops.feature_pyramid_network.LastLevelMaxPool",(function(){})),this._registerConstructor("torchvision.ops.misc.ConvTranspose2d",(function(){})),this._registerConstructor("torchvision.ops.misc.FrozenBatchNorm2d",(function(){})),this._registerConstructor("torchvision.ops.poolers.LevelMapper",(function(){})),this._registerConstructor("torchvision.ops.poolers.MultiScaleRoIAlign",(function(){})),this._registerConstructor("torchvision.transforms.transforms.Compose",(function(){})),this._registerConstructor("torchvision.transforms.transforms.Normalize",(function(){})),this._registerConstructor("torchvision.transforms.transforms.Resize",(function(){})),this._registerConstructor("torchvision.transforms.transforms.ToTensor",(function(){})),this._registerConstructor("torch.ByteStorage",(function(t){this.size=t,this.dataTypeSize=1,this.dataType="uint8"})),this._registerConstructor("torch.CharStorage",(function(t){this.size=t,this.dataTypeSize=1,this.dataType="int8"})),this._registerConstructor("torch.ShortStorage",(function(t){this.size=t,this.dataTypeSize=2,this.dataType="int16"})),this._registerConstructor("torch.IntStorage",(function(t){this.size=t,this.dataTypeSize=4,this.dataType="int32"})),this._registerConstructor("torch.LongStorage",(function(t){this.size=t,this.dataTypeSize=8,this.dataType="int64"})),this._registerConstructor("torch.HalfStorage",(function(t){this.size=t,this.dataTypeSize=2,this.dataType="float16"})),this._registerConstructor("torch.FloatStorage",(function(t){this.size=t,this.dataTypeSize=4,this.dataType="float32"})),this._registerConstructor("torch.DoubleStorage",(function(t){this.size=t,this.dataTypeSize=8,this.dataType="float64"})),this._registerConstructor("torch.QInt8Storage",(function(t){this.size=t,this.dataTypeSize=1,this.dataType="qint8"})),this._registerConstructor("torch.FloatTensor",(function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}})),this._registerConstructor("torch.DoubleTensor",(function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}})),this._registerConstructor("torch.cuda.FloatTensor",(function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}})),this._registerConstructor("torch.cuda.DoubleTensor",(function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}})),this._registerConstructor("numpy.dtype",(function(t,e,n){switch(t){case"i1":this.name="int8",this.itemsize=1;break;case"i2":this.name="int16",this.itemsize=2;break;case"i4":this.name="int32",this.itemsize=4;break;case"i8":this.name="int64",this.itemsize=8;break;case"b1":case"u1":this.name="uint8",this.itemsize=1;break;case"u2":this.name="uint16",this.itemsize=2;break;case"u4":this.name="uint32",this.itemsize=4;break;case"u8":this.name="uint64",this.itemsize=8;break;case"f4":this.name="float32",this.itemsize=4;break;case"f8":this.name="float64",this.itemsize=8;break;default:if(t.startsWith("V"))this.itemsize=Number(t.substring(1)),this.name="void"+(8*this.itemsize).toString();else if(t.startsWith("O"))this.itemsize=Number(t.substring(1)),this.name="object";else if(t.startsWith("S"))this.itemsize=Number(t.substring(1)),this.name="string";else if(t.startsWith("U"))this.itemsize=Number(t.substring(1)),this.name="string";else{if(!t.startsWith("M"))throw new pytorch.Error("Unknown dtype '"+t.toString()+"'.");this.itemsize=Number(t.substring(1)),this.name="datetime"}}this.align=e,this.copy=n,this.__setstate__=function(t){switch(t.length){case 8:this.version=t[0],this.byteorder=t[1],this.subarray=t[2],this.names=t[3],this.fields=t[4],this.elsize=t[5],this.alignment=t[6],this.int_dtypeflags=t[7];break;default:throw new pytorch.Error("Unknown numpy.dtype setstate length '"+t.length.toString()+"'.")}}})),this._registerConstructor("numpy.core.multiarray._reconstruct",(function(t,e,n){this.subtype=t,this.shape=e,this.dtype=n,this.__setstate__=function(t){this.version=t[0],this.shape=t[1],this.typecode=t[2],this.is_f_order=t[3],this.rawdata=t[4]},this.__read__=function(t){const e={},n=this.subtype.split(".");e.__name__=n.pop(),e.__module__=n.join("."),e.dtype=this.typecode,e.shape=this.shape;let s=e.dtype.itemsize;for(let t=0;t<e.shape.length;t++)s*=e.shape[t];if("string"==typeof this.rawdata){if(e.data=t.unescape(this.rawdata,s),e.data.length!=s)throw new pytorch.Error("Invalid string array data size.")}else e.data=this.rawdata,e.data.length;return e}})),this._registerFunction("__builtin__.bytearray",(function(t,e){if("latin-1"===e){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}throw new pytorch.Error("Unsupported bytearray encoding '"+JSON.stringify(e)+"'.")})),this._registerFunction("__builtin__.getattr",(function(t,e,n){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:n})),this._registerFunction("__builtin__.set",(function(t){return t||[]})),this._registerFunction("__builtin__.slice",(function(t,e,n){return[t,e,n]})),this._registerFunction("collections.Counter",(function(){return{}})),this._registerFunction("collections.OrderedDict",(function(t){const e=new Map;if(e.__setitem__=function(t,n){e.set(t,n)},t)for(const n of t)e.__setitem__(n[0],n[1]);return e})),this._registerFunction("numpy.core.multiarray.scalar",(function(t,e){let n=e;if(e.constructor!==Uint8Array){n=new Uint8Array(e.length);for(let t=0;t<e.length;t++)n[t]=e.charCodeAt(t)}const s=new DataView(n.buffer,n.byteOffset,n.byteLength);switch(t.name){case"float32":return s.getFloat32(0,!0);case"float64":return s.getFloat64(0,!0);case"uint8":return s.getUint8(0,!0);case"int8":return s.getInt8(0,!0);case"int16":return s.getInt16(0,!0);case"int32":return s.getInt32(0,!0);case"int64":return new long.Long(s.getInt32(0,!0),s.getInt32(4,!0),!1)}throw new pytorch.Error("Unknown scalar type '"+t.name+"'.")})),this._registerFunction("_codecs.encode",(function(t){return t})),this._registerFunction("collections.defaultdict",(function(){return{}})),this._registerFunction("annotate",(function(t,e){return e})),this._registerFunction("int",(function(){return NaN})),this._registerFunction("float",(function(){return NaN})),this._registerFunction("getattr",(function(t,e,n){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:n})),this._registerFunction("unchecked_cast",(function(t,e){return e})),this._registerFunction("ops.prim.data",(function(t){return t})),this._registerFunction("ops.prim.unchecked_unwrap_optional",(function(t){return t})),this._registerFunction("ops.prim.NumToTensor",(function(t){return{__module__:"torch",__name__:"Tensor",value:t}})),this._registerFunction("ops.prim.min",(function(t){return Math.min.apply(null,t)})),this._registerFunction("ops.prim.shape",(function(t){return t.size})),this._registerFunction("ops.quantized.conv_prepack",(function(){return{__module__:"torch",__name__:"Tensor",__origin__:"ops.quantized.conv_prepack"}})),this._registerFunction("ops.quantized.conv2d_prepack",(function(){return{__module__:"torch",__name__:"Tensor",__origin__:"ops.quantized.conv2d_prepack"}})),this._registerFunction("ops.quantized.linear_prepack",(function(){return{__module__:"torch",__name__:"Tensor",__origin__:"ops.quantized.linear_prepack"}})),this._registerFunction("ops.prim.RaiseException",(function(t){throw new pytorch.Error(t)})),this._registerFunction("range",(function(t,e,n){if(void 0!==t&&Number.isInteger(t)&&void 0===e&&void 0===n)return Array(t).keys();throw new pytorch.Error("Unsupported function range("+JSON.stringify(t)+", "+JSON.stringify(e)+", "+JSON.stringify(n)+")")})),this._registerFunction("torch._utils._rebuild_tensor",(function(t,e,n,s){return{__module__:t.__module__,__name__:t.__name__.replace("Storage","Tensor"),storage:t,storage_offset:e,size:n,stride:s}})),this._registerFunction("torch._utils._rebuild_tensor_v2",(function(t,e,n,s,r,o){return{__module__:t.__module__,__name__:t.__name__.replace("Storage","Tensor"),storage:t,storage_offset:e,size:n,stride:s,requires_grad:r,backward_hooks:o}})),this._registerFunction("torch._utils._rebuild_parameter",(function(t,e,n){const r=s.invoke("torch.nn.parameter.Parameter",[t,e]);return r.backward_hooks=n,r})),this._registerFunction("torch._utils._rebuild_qtensor",(function(t,e,n,s,r,o,i){return{__module__:t.__module__,__name__:t.__name__.replace("Storage","Tensor"),storage:t,storage_offset:e,size:n,stride:s,quantizer_params:r,requires_grad:o,backward_hooks:i}})),this._registerFunction("torch._set_item",(function(t,e,n){t[e]=n})),this._registerFunction("torch.__contains__",(function(t,e){return void 0!==t[e]})),this._registerFunction("torch.__derive_index",(function(t,e,n){return e+t*n})),this._registerFunction("torch.__is__",(function(t,e){if(null===t&&null===e)return!0;if(null!==t&&null===e||null===t&&null!==e)return!1;throw new pytorch.Error("Unknown 'torch.__is__' expression type.")})),this._registerFunction("torch.__isnot__",(function(t,e){if(null===t&&null===e)return!1;if(null!==t&&null===e||null===t&&null!==e)return!0;throw new pytorch.Error("Unknown 'torch.__isnot__' expression type.")})),this._registerFunction("torch.__not__",(function(t){if("boolean"==typeof t)return!t;throw new pytorch.Error("Unknown 'torch.__not__' expression type.")})),this._registerFunction("torch.__range_length",(function(t,e,n){if(0===n)throw new pytorch.Error("range() arg 3 must not be zero");return n>0&&t<e?1+(e-1-t)/n:n<0&&t>e?1+(t-1-e)/(0-n):0})),this._registerFunction("torch._unwrap_optional",(function(t){return t})),this._registerFunction("torch.add",(function(t,e){if("number"==typeof t&&"number"==typeof e)return t*e;throw new pytorch.Error("Unknown torch.add expression type.")})),this._registerFunction("torch.append",(function(t,e){return t.push(e),e})),this._registerFunction("torch.dict",(function(t){if(t)throw new pytorch.Error("'torch.dict' arguments not supported.");return{}})),this._registerFunction("torch.dim",(function(t){return t&&t.size?t.size.length:0})),this._registerFunction("torch.eq",(function(t,e){if("string"==typeof t&&"string"==typeof e)return t===e;if("number"==typeof t&&"number"==typeof e)return t===e;throw new pytorch.Error("Unknown 'torch.eq' expression type.")})),this._registerFunction("torch.floordiv",(function(){})),this._registerFunction("torch.gt",(function(t,e){if("number"==typeof t&&"number"==typeof e&&!isNaN(t)&&!isNaN(e))return t>e;if(isNaN(t)&&!isNaN(e))return!0;throw new pytorch.Error("Unknown 'torch.gt' expression type.")})),this._registerFunction("torch.jit._pickle.build_boollist",(function(t){return t})),this._registerFunction("torch.jit._pickle.build_doublelist",(function(t){return t})),this._registerFunction("torch.jit._pickle.build_intlist",(function(t){return t})),this._registerFunction("torch.jit._pickle.build_tensorlist",(function(t){return t})),this._registerFunction("torch.jit._pickle.build_tensor_from_id",(function(t){return t})),this._registerFunction("torch.jit._pickle.restore_type_tag",(function(t){return t})),this._registerFunction("torch.keys",(function(t){return Object.keys(t)})),this._registerFunction("torch.len",(function(t){return t?t.length:NaN})),this._registerFunction("torch.le",(function(t,e){if("number"==typeof t&&"number"==typeof e)return!isNaN(t)&&!isNaN(e)&&t<=e;throw new pytorch.Error("Unknown 'torch.le' expression type.")})),this._registerFunction("torch.list",(function(t){return t})),this._registerFunction("torch.list_with_default",(function(t){return t})),this._registerFunction("torch.lt",(function(t,e){if("number"==typeof t&&"number"==typeof e)return t<e;throw new pytorch.Error("Unknown 'torch.lt' expression type.")})),this._registerFunction("torch.mul",(function(t,e){if("number"==typeof t&&"number"==typeof e)return t*e;if(isNaN(t)||isNaN(e))return NaN;throw new pytorch.Error("Unknown 'torch.mul' expression type.")})),this._registerFunction("torch.ne",(function(t,e){if("number"==typeof t&&"number"==typeof e)return!isNaN(t)&&!isNaN(e)&&t!==e;if(Array.isArray(t)&&Array.isArray(e)&&t.length===e.length)return!1;throw new pytorch.Error("Unknown 'torch.ne' expression type.")})),this._registerFunction("torch.neg",(function(t){if("number"==typeof t)return-t;throw new pytorch.Error("Unknown 'torch.neg' expression type.")})),this._registerFunction("torch.q_scale",(function(){return-1})),this._registerFunction("torch.t",(function(t){return t})),this._registerFunction("torch.size",(function(t,e){if(t&&Array.isArray(t.size)){if(void 0===e)return t.size;if(Number.isInteger(e)){if(e>=0&&e<t.size.length)return t.size[e];if(e<0&&-e<t.size.length)return t.size[t.size.length+e]}throw new pytorch.Error("Dimension out of range (expected to be in range of "+JSON.stringify(t.size)+", but got "+JSON.stringify(e)+").")}return NaN})),this._registerFunction("torch.slice",(function(t,e,n,s){if(1!==s)throw new pytorch.Error("Slicing only supports step=1");return e=Math.max(0,e),n=Math.min(t.length,n),t.slice(e,n)})),this._registerFunction("torch.sub",(function(t,e){if("number"==typeof t&&"number"==typeof e)return t*e;throw new pytorch.Error("Unknown 'torch.sub' expression type.")})),this._registerFunction("torch.values",(function(t){return Object.keys(t).map((e=>t[e]))})),this._registerFunction("torch.warn",(function(){})),this._registerFunction("uninitialized",(function(t){if(t&&"typing"===t.__module__&&"Tuple"===t.__name__)return[];if(t&&"typing"===t.__module__&&"List"===t.__name__)return[];if(t&&"typing"===t.__module__&&"Dict"===t.__name__)return{};if(t&&"torch"===t.__module__&&"Tensor"===t.__name__)return{__module__:t.__module__,__name__:t.__name__};throw new pytorch.Error("Unsupported uninitialized argument '"+JSON.stringify(t)+"'.")}))}get context(){return this._context}parse(t){const e=this._sources[t];if(e){const n=this._utf8Decoder.decode(e),s=new this._python.Parser(n,t).parse();if(!s)throw new pytorch.Error("Module '"+t+"' parse error.");return s}return null}package(t,e,n){if(this._python&&!this._packages.has(t)){e=e||"code/"+t.split(".").join("/")+".py";const s=this.parse(e);if(s){let r=this._context.getx(t);void 0===r&&(r={},this._context.setx(t,r)),r.__class__=this._context.scope.builtins.module,r.__name__=t,r.__file__=e,this._packages.set(t,r);const o=this._context.push(r);if(this._block(s.body,o),n)return s}}return this._packages.get(t)}type(t){const e=this._context.getx(t);if(void 0!==e)return e;const n=t.split("."),s=n.pop(),r=n.join("."),o=this.package(r);return o?o[s]:null}invoke(t,e){const n=this.type(t);if(n){if(n.__class__===this._context.scope.builtins.type){const t={};return t.__proto__=n,t.__init__&&"function"==typeof t.__init__&&t.__init__.apply(t,e),t}if(n.__class__===this._context.scope.builtins.function)return n.__call__?n.__call__(e):n.apply(null,e)}this._raiseUnkownName(t);const s=t.split("."),r=s.pop();return{__module__:s.join("."),__name__:r}}call(t,e,n,s){const r=this._target(t,s),o=n.map((t=>this.expression(t,s)));if(!r||null!==e&&!r[e]){const n=pytorch.Utility.target(t)+"."+e;if(this.type(n))return this.invoke(n,o);throw new pytorch.Error("Unsupported function '"+n+"'.")}const i=e?r[e]:r;if(i.__class__===this._context.scope.builtins.type){const t={};return t.__proto__=i,t.__init__&&"function"==typeof t.__init__&&t.__init__.apply(t,n),t}if(i.__class__===this._context.scope.builtins.function&&i.__call__)return i.__call__(o);if(i.__class__===this._context.scope.builtins.method&&i.__call__)return i.__call__([r].concat(o));if("function"==typeof i)return i.apply(r,o);throw new pytorch.Error("Unsupported call expression.")}apply(t,e,n){const s=Array.prototype.slice.call(e);n=n.push();for(const e of t.parameters)n.set(e.name,s.shift());return this._block(t.body.statements,n)}_block(t,e){for(t=Array.prototype.slice.call(t);t.length>0;){const n=t.shift();switch(n.type){case"pass":break;case"return":return this.expression(n.expression,e);case"def":{const t=e.get("__name__"),s=this,r=e.get("__class__");let o=null;if(r===this._context.scope.builtins.type)o=this._context.scope.builtins.method;else{if(r!==this._context.scope.builtins.module)throw new pytorch.Error("Invalid function scope.");o=this._context.scope.builtins.function}const i={__class__:o,__globals__:e,__module__:t,__name__:n.name,__code__:n,__call__:function(t){return s.apply(this.__code__,t,this.__globals__)}};e.set(n.name,i);break}case"class":{const t={__class__:this._context.scope.builtins.type,__module__:e.get("__name__"),__name__:n.name};e.set(n.name,t),e=e.push(t),this._block(n.body.statements,e),e=e.pop();break}case"var":e.set(n.name,void 0);break;case"=":this.expression(n,e);break;case"if":{const s=this.expression(n.condition,e);if(!0===s||s){t=n.then.statements.concat(t);break}if(!1===s){t=n.else.statements.concat(t);break}throw new pytorch.Error("Unknown condition.")}case"for":if(1==n.target.length&&1===n.variable.length&&"id"===n.variable[0].type){const s=this.expression(n.target[0],e),r=n.variable[0];let o=[];for(const t of s)o.push({type:"=",target:r,expression:{type:"number",value:t}}),o=o.concat(n.body.statements);t=o.concat(t);break}throw new pytorch.Error("Unsupported 'for' statement.");case"call":this.expression(n,e);break;case"import":for(const t of n.modules){const n=pytorch.Utility.target(t.name),s=this.package(n);t.as&&e.set(t.as,s)}break;default:throw new pytorch.Error("Unknown statement '"+n.type+"'.")}}}expression(t,e){const n=e.getx("self");switch(t.type){case"=":{const n=t.target;if("id"===n.type)return void e.set(n.value,this.expression(t.expression,e));if("[]"===n.type){if("id"===n.target.type&&"list"===n.arguments.type&&1===n.arguments.value.length){const s=this.expression(n.arguments.value[0],e);return"__annotations__"===n.target.value&&e.set(n.target.value,e.get(n.target.value)||{}),void(e.get(n.target.value)[s]=this.expression(t.expression,e))}}else{if("."===n.type&&"id"===n.member.type)return void(this.expression(n.target,e)[n.member.value]=this.expression(t.expression,e));if("tuple"===n.type){const s=this.expression(t.expression,e);if(n.value.length==s.length&&n.value.every((t=>"id"===t.type))){for(let t=0;t<s.length;t++)e.set(n.value[t].value,s[t]);return}}}break}case"list":return t.value.map((t=>this.expression(t,e)));case"string":return t.value.substring(1,t.value.length-1);case"number":return Number(t.value);case"[]":{if("id"===t.target.type&&"list"===t.arguments.type&&1===t.arguments.value.length&&e.get(t.target.value)){const n=this.expression(t.arguments.value[0],e);return e.get(t.target.value)[n]}const n=this.expression(t.target,e);if(n&&"list"===t.arguments.type&&(n.__class__===this.context.scope.typing._VariadicGenericAlias||n.__class__===this.context.scope.typing._GenericAlias||n.__class__===this.context.scope.typing._SpecialForm)){const s=Object.assign({},n);return s.__args__=t.arguments.value.map((t=>this.expression(t,e))),s}if("list"===t.arguments.type&&1===t.arguments.value.length)return n[this.expression(t.arguments.value[0],e)];break}case".":if("id"==t.member.type)return this._target(t.target,e)[t.member.value];throw new pytorch.Error("Unsupported field expression.");case"call":return"id"===t.target.type&&"annotate"===t.target.value&&2===t.arguments.length||"id"===t.target.type&&"unchecked_cast"===t.target.value&&2===t.arguments.length?this.expression(t.arguments[1],e):"."===t.target.type?this.call(t.target.target,t.target.member.value,t.arguments,e):this.call(t.target,null,t.arguments,e);case"id":{switch(t.value){case"self":return n;case"None":return null;case"True":return!0;case"False":return!1}const s=this._context.scope.builtins[t.value]||this._context.scope.typing[t.value]||this._context.scope.torch[t.value];return!s||s.__class__!==this._context.scope.builtins.type&&s.__class__!==this._context.scope.typing._VariadicGenericAlias&&s.__class__!==this._context.scope.typing._GenericAlias&&s.__class__!==this._context.scope.typing._SpecialForm?e.get(t.value):s}case"tuple":return t.value.map((t=>this.expression(t,e)))}throw new pytorch.Error("Unknown expression '"+t.type+"'.")}_target(t,e){let n=t,s="";for(;;){if("."!==n.type||!n.member||"id"!==n.member.type){if("id"===n.type&&"self"!==n.value&&"CONSTANTS"!==n.value){s=n.value+s;break}s=null;break}s="."+n.member.value+s,n=n.target}if(s){let t=e.getx(s);if(!t&&(t=this.package(s),!t))throw new pytorch.Error("Failed to resolve module '"+s+"'.");return t}return this.expression(t,e)}_registerFunction(t,e){if(this._context.getx(t))throw new pytorch.Error("Function '"+t+"' is already registered.");const n=t.split(".");e.__class__=this._context.scope.builtins.function,e.__name__=n.pop(),e.__module__=n.join("."),this._context.setx(t,e)}_registerConstructor(t,e){if(this._context.getx(t))throw new pytorch.Error("Constructor '"+t+"' is already registered.");const n=t.split("."),s=n.pop(),r=n.join("."),o={__class__:this._context.scope.builtins.type,__name__:s,__module__:r,__init__:function(){e.apply(this,arguments)}};this._context.setx(t,o)}_raiseUnkownName(t){t&&!this._unknownNameMap.has(t)&&(this._unknownNameMap.add(t),this._knownPackageMap.has(t.split(".").shift())&&this._exceptionCallback(new pytorch.Error("Unknown function '"+t+"'."),!1))}},pytorch.Execution.Context=class{constructor(t,e){this._parent=t||null,this._scope=e||{}}push(t){return new pytorch.Execution.Context(this,t)}pop(){return this._parent}get scope(){return this._scope}set(t,e){this._scope[t]=e}get(t){return t in this._scope?this._scope[t]:this._parent?this._parent.get(t):void 0}setx(t,e){const n=t.split(".");if(1==n.length)this.set(n[0],e);else{let t=this.get(n[0]);for(t||(t={},this.set(n[0],t)),n.shift();n.length>1;){const e=n.shift();t[e]=t[e]||{},t=t[e]}t[n[0]]=e}}getx(t){const e=t.split(".");let n=this.get(e[0]);if(n){for(e.shift();e.length>0&&n[e[0]];)n=n[e[0]],e.shift();if(0===e.length)return n}}},pytorch.Container=class{static open(t,e,n,s,r){if(t.entries("zip").some((t=>"model.json"===t.name||"data.pkl"===t.name||t.name.endsWith("/model.json")||t.name.endsWith("/data.pkl"))))return new pytorch.Container.Zip(t.entries("zip"),e,n,s,r);const o=t.buffer;return o&&o.length>14&&128==o[0]&&o[1]<16&&[138,10,108,252,156,70,249,32,106,168,80,25].every(((t,e)=>t==o[e+2]))?new pytorch.Container.Pickle(o,n,r):t.entries("tar").some((t=>"pickle"==t.name))?new pytorch.Container.Tar(t.entries("tar"),n,r):null}},pytorch.Container.Tar=class{constructor(t,e,n){this._entries=t,this._pickle=e,this._exceptionCallack=n}get format(){return"PyTorch v0.1.1"}get data(){return this._unpickle(),this._data}get state(){return this._unpickle(),this._state}get littleEndian(){return this._unpickle(),this._littleEndian}_unpickle(){if(!this._entries)return;this._data=null,this._state=null,this._littleEndian=!0;const t=new pytorch.Execution(null,[],this._exceptionCallback),e={};for(const t of this._entries)switch(t.name){case"sys_info":e.sys_info=t.data;break;case"pickle":e.pickle=t.data;break;case"storages":e.storages=t.data;break;case"tensors":e.tensors=t.data}if(this._exceptionCallback=null,this._entries=null,e.sys_info){const n=new this._pickle.Unpickler(e.sys_info).load(((e,n)=>t.invoke(e,n)));if(1e3!=n.protocol_version)throw new pytorch.Error("Unsupported protocol version '"+n.protocol_version+"'.");if(n.type_sizes&&(n.type_sizes.int&&4!=n.type_sizes.int||n.type_sizes.long&&4!=n.type_sizes.long||n.type_sizes.short&&2!=n.type_sizes.short))throw new pytorch.Error("Unsupported type sizes.");this._littleEndian=n.little_endian}const n={};if(e.storages){const s=new this._pickle.Unpickler(e.storages),r=s.load(((e,n)=>t.invoke(e,n)));for(let e=0;e<r;e++){const e=s.load(),r=e[0],o=e[2],i=long.Long.fromBytesLE(s.read(8),!1).toNumber(),a=t.invoke(o,[i]);a.data=s.read(a.dataTypeSize*a.size),n[r]=a}}if(e.tensors){const s=new this._pickle.Unpickler(e.tensors),r=s.load(((e,n)=>t.invoke(e,n)));for(let e=0;e<r;e++){const e=s.load(),r=e[0],o=e[1],i=n[o],a=long.Long.fromBytesLE(s.read(4),!1).toNumber();s.read(4);const c=[];for(let t=0;t<a;t++)c.push(long.Long.fromBytesLE(s.read(8),!1).toNumber());const _=[];for(let t=0;t<a;t++)_.push(long.Long.fromBytesLE(s.read(8),!1).toNumber());const u=long.Long.fromBytesLE(s.read(8),!1).toNumber(),h=i.__name__.replace("Storage","Tensor"),l=t.invoke(i.__module__+"."+h,[]);l.__setstate__([i,u,c,_]),n[r]=l}}if(e.pickle){const s=t=>n[t];let r=new this._pickle.Unpickler(e.pickle).load(((e,n)=>t.invoke(e,n)),s);if(r){if(!(r instanceof Map)){const t=new Map;for(const e of Object.keys(r))t.set(e,r[e]);r=t}this._state=[];const t={};if(r instanceof Map)for(const e of r){const n=e[0],s=e[1];if(!n||!s){this._state=null;break}const r={};if(r.id=n,r.value=null,s&&"torch.nn.parameter"===s.__module__&&"Parameter"===s.__name__?r.value=s[0]:pytorch.Utility.isTensor(s)&&(r.value=s),!r.value){this._state=null;break}const o=r.id.split(".");if(o.length<2){this._state=null;break}r.name=o.pop();const i=o.join(".");let a=t[i];a||(a={},a.name=i,a.states=[],t[i]=a,this._state.push(a)),a.states.push({name:r.name,arguments:[r]})}}}}},pytorch.Container.Pickle=class{constructor(t,e,n){this._buffer=t,this._pickle=e,this._exceptionCallback=n}get format(){return"PyTorch v0.1.10"}get data(){return this._unpickle(),this._data}get state(){return this._unpickle(),this._state}get littleEndian(){return this._unpickle(),this._littleEndian}_unpickle(){if(!this._buffer)return;const t=new pytorch.Execution(null,[],this._exceptionCallback),e=new this._pickle.Unpickler(this._buffer);this._buffer=null,this._pickle=null,this._exceptionCallback=null,e.load();const n=e.load();if(1001!=n)throw new pytorch.Error("Unsupported protocol version '"+n+"'.");const s=e.load();if(1001!=s.protocol_version)throw new pytorch.Error("Unsupported protocol version '"+s.protocol_version+"'.");if(s.type_sizes&&(s.type_sizes.int&&4!=s.type_sizes.int||s.type_sizes.long&&4!=s.type_sizes.long||s.type_sizes.short&&2!=s.type_sizes.short))throw new pytorch.Error("Unsupported type sizes.");this._littleEndian=s.little_endian;const r=new Map,o=new Map,i=e.load(((e,n)=>t.invoke(e,n)),(e=>{const n=e.shift(),s=e;switch(n){case"module":{const t=s[0],e=s[2];return r.set(t,e),s[0]}case"storage":{const e=s.shift(),n=s.shift();s.shift();const r=s.shift(),i=s.shift();if(!o.has(n)){const s=t.invoke(e,[r]);o.set(n,s)}if(i){const t=i.shift();if(i.shift(),i.shift(),!o.has(t)){const e=null;o.set(t,e)}return o.get(t)}return o.get(n)}}throw new pytorch.Error("Unknown persistent load type '"+n+"'.")}));if(!i)throw new pytorch.Error("File format is not PyTorch.");const a=e.load();for(const t of a){const n=o.get(t);if(long.Long.fromBytesLE(e.read(8),!1).toNumber()!=n.size)throw new pytorch.Error("Storage size mismatch.");n.data=e.read(n.dataTypeSize*n.size)}if(this._data=this._findRootModule(i),this._data||(this._state=this._findStateDict(i)),!this._data&&!this._state&&"None"!==i)throw new pytorch.Error("File does not contain root module or state dictionary.")}_findRootModule(t){const e=[t,t.model,t.net];for(const t of e)if(t&&t._modules)return t;return null}_findStateDict(t){if(!t)return null;if(t.encoder&&Array.isArray(t.encoder)&&t.decoder&&Array.isArray(t.decoder)&&!t.state_dict&&(t=t.encoder.concat(t.decoder)),t instanceof Map){const e={};for(const n of t){const t=n[0],s=n[1];e[t]=s}t=e}const e=[t.state_dict,t.state,t.model_state,t.model,t.model_state_dict,t.net_dict,t.params,t.generator,t.discriminator,t.g_state,t.network,t.net,t.netG,t.net_states,t.state_dict_stylepredictor,t.state_dict_ghiasi,t];for(const t of e){let e=null;if(e=e||this._convertStateDictList(t),e=e||this._convertStateDictMap(t),e=e||this._convertStateDictGroupMap(t),e)return e}return null}_convertStateDictList(t){if(t&&Array.isArray(t)&&t.every((t=>t.__module__&&t.__name__&&Object.keys(t).filter((e=>pytorch.Utility.isTensor(t[e]).length>0))))){const e=[];for(const n of t){const t={type:n.__module__+"."+n.__name__,states:[],attributes:[]};for(const e of Object.keys(n)){const s=n[e];pytorch.Utility.isTensor(s)?t.states.push({name:e,arguments:[{id:"",value:s}]}):t.attributes.push({name:e,value:s})}e.push(t)}return e}if(!t||Array.isArray(t)||t instanceof Map||(t=new Map(Object.keys(t).map((e=>[e,t[e]])))),t&&t instanceof Map){for(const e of t){const t=e[0],n=e[1];if(!t||!n)return null;if(!pytorch.Utility.isTensor(n)&&!(t.endsWith("._packed_params.dtype")||t.endsWith("._packed_params._packed_params")&&Array.isArray(n)&&n.every((t=>pytorch.Utility.isTensor(t)))))return null}const e=new Map;for(const n of t){const t=n[0],s=n[1];if(null!==s){let n="",r="";if(t.endsWith("_packed_params.dtype"))r="_packed_params.dtype",n=t.substring(0,t.length-r.length-1);else if(t.endsWith("_packed_params._packed_params")&&Array.isArray(s))r="_packed_params._packed_params",n=t.substring(0,t.length-r.length-1);else{let e=t.split(".");e.length<2&&(e=["",e[0]]),r=e.pop(),n=e.join(".")}e.has(n)||e.set(n,{name:n,states:[],attributes:[]});const o=e.get(n);switch(r){case"_packed_params.dtype":o.attributes.push({name:r,value:s});break;case"_packed_params._packed_params":o.states.push({name:r,arguments:s.map((t=>({id:"",value:t})))});break;default:if(o.states.push({name:r,arguments:[{id:t,value:s}]}),""==o.name&&o.states.length>4)return null}}}return e.values()}return null}_convertStateDictMap(t){if(!t||Array.isArray(t))return null;const e=[],n={};for(const s in t){const r=s.split(".");if(r.length<1)return null;const o={};if(o.id=s,o.name=r.pop(),o.value=t[s],o.value&&"torch.nn.parameter"===o.value.__module__&&"Parameter"===o.value.__name__&&pytorch.Utility.isTensor(o.value.data)&&(o.value=o.value.data),!pytorch.Utility.isTensor(o.value))return null;const i=r.join(".");let a=n[i];a||(a={},a.name=i,a.states=[],n[i]=a,e.push(a)),a.states.push({name:o.name,arguments:[o]})}return e}_convertStateDictGroupMap(t){if(!t||Array.isArray(t))return null;const e=[],n={};for(const s in t){let r=n[s];r||(r={},r.name=s,r.states=[],r.attributes=[],n[s]=r,e.push(r));const o=t[s];if(!o)return null;if(o instanceof Map)for(const t of o){const e=t[0],n=t[1];if(!e)return null;if(n&&!pytorch.Utility.isTensor(n))return null;const o={id:s+"."+e,value:n};r.states.push({name:e,arguments:[o]})}else{if(o instanceof Uint8Array)return null;if(Object(o)!==o)return null;{let t=!1;for(const e in o){const n=o[e];if(pytorch.Utility.isTensor(n)){const o={id:s+"."+e,value:n};r.states.push({name:e,arguments:[o]}),t=!0}else if(n!==Object(n))r.attributes.push({name:e,value:n});else{if(!n||!n.data||"torch.nn.parameter"!==n.__module__||"Parameter"!==n.__name__)return null;{const o={id:s+"."+e,value:n.data};r.states.push({name:e,arguments:[o]}),t=!0}}}if(!t)return null}}}return e}},pytorch.Container.Zip=class{constructor(t,e,n,s,r){this._entries=t,this._metadata=e,this._pickle=n,this._python=s,this._exceptionCallback=r;const o=this._entries.find((t=>"model.json"==t.name||"data.pkl"==t.name||t.name.endsWith("/model.json")||t.name.endsWith("/data.pkl")));if(!o)throw new pytorch.Error("PyTorch Zip container does not contain 'data.pkl' or 'model.json'.");const i=o.name.lastIndexOf("/");this._prefix=-1===i?"":o.name.substring(0,i+1),this._utf8Decoder=new TextDecoder("utf-8")}get format(){if(void 0===this._format)if(this._entry("model.json"))this._format=this._entry("attributes.pkl")?"TorchScript v1.1":"TorchScript v1.0";else if(this._entry("data.pkl")){const t=this._entry("version"),e=t?this._utf8Decoder.decode(t.data).split("\n").shift():"",n={1:"v1.3",2:"v1.4",3:"v1.6",4:"v1.7"}[e];n||this._exceptionCallback(new pytorch.Error("Unsupported PyTorch Zip version '"+e+"'.")),this._format=(this._entry("constants.pkl")?"TorchScript":"PyTorch")+" "+(n||"v-"+e.toString())}return this._format}get producer(){return this.data?this._producer:""}get name(){return this._name}get data(){if(void 0===this._data){this._data=null;const t=this._entry("data.pkl");if(t&&t.data)this._data=this._unpickle(t.data,this._storage("data"));else{const t=this._entry("model.json");if(t){const e=JSON.parse(this._utf8Decoder.decode(t.data));this._producer=e.producerName+(e.producerVersion?" v"+e.producerVersion:""),this._data=e.mainModule||{},this._name=this._data.name||"",this._data.torchscriptArena&&(this._torchscriptArena=this._data.torchscriptArena.key);const n=[this._data],s=new Map;for(const t of this._entries)s.set(t.name,t.data);const r=new Map([["FLOAT","Float"],["FLOAT16","Half"],["DOUBLE","Double"],["INT8","Char"],["INT32","Int"],["INT64","Long"]]);this._constants=e.tensors||[];for(const t of this._constants){const e=this._prefix+t.data.key;if(!r.has(t.dataType))throw new pytorch.Error("Unknown tensor data type '"+t.dataType+"'.");const n=r.get(t.dataType);t.__module__="torch",t.__name__="Tensor",t.name=t.data.key,t.size=t.dims?t.dims.map((t=>parseInt(t,10))):null,t.storage=this.execution.invoke("torch."+n+"Storage",[t.size]),t.storage.data=s.get(e)}for(;n.length>0;){const t=n.shift();if(t.__module__||t.__name__||(t.__module__="torch.nn.modules.module",t.__name__="Module"),t.name&&(t.__id__=t.name),t.submodules){for(const e of t.submodules)t[e.name]=e,e.__parent__=t,n.push(e);delete t.submodules}let e=[];t.parameters&&(e=e.concat(t.parameters),delete t.parameters),t.arguments&&(e=e.concat(t.arguments),delete t.arguments);for(const n of e){const e=this._constants[n.tensorId];t[n.name]=e,n.__module__&&n.__name__||(n.__module__="torch",n.__name__="Tensor")}}}}}return this._data}get constants(){if(void 0===this._constants){this._constants=[];const t=this._entry("constants.pkl");t&&t.data&&(this._constants=this._unpickle(t.data,this._storage("constants")))}return this._constants}get execution(){if(void 0===this._execution){this._types=new Map;const t={};for(const e of this._entries)if(e.name.startsWith(this._prefix+"code")){const n=e.name.substring(this._prefix.length);if(t[n])throw new pytorch.Error("Duplicate source file '"+n+"'.");t[n]=e.data}this._execution=new pytorch.Container.Zip.Execution(this._python,t,this._exceptionCallback,this._metadata);const e={};for(let t=0;t<this.constants.length;t++)e["c"+t.toString()]=this.constants[t];this._execution.context.set("CONSTANTS",e)}return this._execution}_entry(t){return this._entries.find((e=>e.name==this._prefix+t))}_unpickle(t,e){const n=new Map;return new this._pickle.Unpickler(t).load(((t,e)=>this.execution.invoke(t,e)),(t=>{const s=t.shift();if("storage"!==s)throw new pytorch.Error("Unknown persistent load type '"+s+"'.");const r=t.shift(),o=t.shift();t.shift();const i=t.shift();let a=null;n.has(o)?a=n.get(o):(a=this.execution.invoke(r,[i]),a.data=e.get(o),n.set(o,a));const c=t.shift();if(c){const t=c.shift();c.shift(),c.shift();let e=null;return n.has(t)?e=n.get(o):(e=null,n.set(t,e)),e}return a}))}_storage(t){const e=new Map,n=this._prefix+t+"/";for(const t of this._entries)if(t.name.startsWith(n)){const s=t.name.substring(n.length);e.set(s,t.data)}return e}_type(t){if(!this._types.has(t)){const e=t.split("."),n=e.pop(),s="code/"+e.join("/")+".py",r=this.execution.parse(s);if(r)for(const e of r.body)if("class"===e.type&&e.name==n){this._types.set(t,e);break}}return this._types.get(t)}trace(){if(this._inputs=[],this._outputs=[],this.execution.reset(),this._torchscriptArena){const t=this.execution.parse(this._torchscriptArena);for(const e of t.body)if("def"==e.type){const t=this,n=this.execution.context,s={__class__:this.execution.context.scope.builtins.function,__name__:e.name,__code__:e,__call__:function(e){return t.execution.apply(this.__code__,e,n)}};this.data[e.name]=s}}if(this.data.forward){const t=[this.data];if(this.data.forward.__code__&&this.data.forward.__code__.parameters)for(const e of this.data.forward.__code__.parameters)if("self"!==e.name){const n=e.parameterType;"type"===n.type&&n.name.type&&("Tensor"===n.name.value&&(this._inputs.push(e.name),t.push({__module__:"torch",__name__:"Tensor",__variable__:e.name,__origin__:"trace-input-tensor"})),"Tuple"===n.name.value&&n.arguments.every((t=>"type"===t.type&&"id"===t.name.type&&"Tensor"===t.name.value))&&(this._inputs.push(e.name),t.push(n.arguments.map((()=>({__module__:"torch",__name__:"Tensor",__variable__:e.name,__origin__:"trace-input-tuple"}))))),"List"===n.name.value&&n.arguments.every((t=>"type"===t.type&&"id"===t.name.type&&"Tensor"===t.name.value))&&(this._inputs.push(e.name),t.push([{__module__:"torch",__name__:"Tensor",__variable__:e.name,size:[NaN,NaN],__origin__:"trace-input-list"}])))}const e=this.data.forward.__call__(t),n=Array.isArray(e)?e:[e];for(const t of n)pytorch.Utility.isTensor(t)&&this._outputs.push(t.__variable__);return this._nodes=this.execution.nodes,!0}throw new pytorch.Error("Module 'forward' not implemented.")}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},pytorch.Container.Zip.Execution=class extends pytorch.Execution{constructor(t,e,n,s){super(t,e,n),this._metadata=s,this.reset()}reset(){this._nodes=[],this._variableIndex=0}get nodes(){return this._nodes}call(t,e,n,s){let r=pytorch.Utility.target(t),o=null;if(r&&r+"."+e=="ops.prim.NumToTensor"&&1===n.length&&"call"===n[0].type&&"id"==n[0].target.member.type){const t=n[0];r=pytorch.Utility.target(t.target.target),n=t.arguments,e=t.target.member.value,o=["int64"]}if(r){const t=r+"."+e;let i=this._metadata.type(t);if(i){Array.isArray(i)||(i=[i]);const e=n.map((t=>"="===t.type&&t.target&&"id"===t.target.type?this.expression(t.expression,s):this.expression(t,s)));for(const r of i){const i=Array.prototype.slice.call(n),a=Array.prototype.slice.call(e),c={type:r.name,inputs:[],attributes:[],outputs:[]},_=[];let u=!1;const h=Array.prototype.slice.call(r.inputs||[]).concat(Array.prototype.slice.call(r.attributes||[]));for(;h.length>0&&a.length>0;){if(i.every((t=>"="===t.type&&t.target&&"id"===t.target.type))&&h.every((t=>"tensor"!==t.type&&"tensor[]"!==t.type))){const t=new Map;for(const e of h)t.set(e.name,e);for(;i.length>0;){const e=i.shift(),n=a.shift(),s=t.get(e.target.value);if(!s){u=!0;break}if(!pytorch.Utility.isType(n,s.type)){if(s.optional)continue;u=!0;break}c.attributes.push({name:s.name,value:n})}continue}if(u)break;const t=h.shift();switch(t.type){case"tensor":{let e=a[0];if(Array.isArray(e)||!pytorch.Utility.isTensor(e)&&null!==e){if(t.optional){void 0===e&&(i.shift(),a.shift());continue}u=!0;break}i.shift(),a.shift(),null===e&&(e={}),e.__variable__||(e.__variable__=this._variable());const n=[];n.push({id:e.__variable__}),_.push(e),c.inputs.push(n);break}case"tensor[]":{const e=a[0];if(!Array.isArray(e)||!e.every((t=>pytorch.Utility.isTensor(t)||null===t))){if(t.optional)continue;u=!0;break}i.shift(),a.shift();const n=[];for(let t of e)null===t&&(t={}),t.__variable__||(t.__variable__=this._variable()),n.push({id:t.__variable__}),_.push(t);c.inputs.push(n);break}default:{const e=i[0],n=a[0];if(!pytorch.Utility.isType(n,t.type)){if(t.optional)continue;u=!0;break}if("="===e.type)throw new pytorch.Error("Expected named argument.");i.shift(),a.shift(),c.attributes.push({name:t.name,value:n});break}}if(u)break}if(u)continue;const l=[];for(const e of r.outputs)switch(e.type){case"tensor":{const e={__module__:"torch",__name__:"Tensor",__origin__:"invoke-output-"+t};switch(t){case"torch.cat":case"torch.conv2d":case"torch.dropout":case"torch.flatten":case"torch.max_pool2d":case"torch.quantize_per_tensor":case"torch.relu_":case"torch.hardtanh_":case"torch.slice":e.size=[NaN,NaN,NaN,NaN];break;case"torch.conv3d":e.size=[NaN,NaN,NaN,NaN,NaN];break;case"torch.embedding":e.size=[NaN,NaN,NaN];break;case"torch.ones":case"torch.zeros":case"torch.zeros_like":e.size=this.expression(n[0],s)}e.__variable__=this._variable(),l.push(e),c.outputs.push([{id:e.__variable__}]);break}case"tensor[]":{let e=1;switch(t){case"torch.chunk":e=c.attributes.filter((t=>"chunks"==t.name))[0].value}const n=[],s=[];for(let r=0;r<e;r++){const e={__module__:"torch",__name__:"Tensor",__origin__:"invoke-output-"+t};e.__variable__=this._variable(),n.push(e),s.push({id:e.__variable__})}l.push(n),c.outputs.push(s);break}default:{if(!o||1!==r.outputs.length||r.outputs[0].type!==o[0]){u=!0;break}const e={__module__:"torch",__name__:"Tensor",__origin__:"invoke-output-"+t};e.__variable__=this._variable(),l.push(e),c.outputs.push([{id:e.__variable__}]);break}}if(!u){for(const t of _)t.__count__=(t.__count__||0)+1;return this._nodes.push(c),l.length>1?l:l[0]}}}}return super.call(t,e,n,s)}_variable(){return this._variableIndex++,this._variableIndex.toString()}},pytorch.ScalarType={uint8:0,int8:1,int16:2,int32:3,int64:4,float16:5,float32:6,float64:7,complex32:8,complex64:9,complex128:10,boolean:11,qint8:12,quint8:13,qint32:14,bfloat16:15},pytorch.MemoryFormat={Contiguous:0,Preserve:1,ChannelsLast:2,ChannelsLast3d:3},pytorch.Layout={Strided:0,Sparse:1,Mkldnn:2},pytorch.Utility=class{static target(t){return"id"==t.type?t.value:"."==t.type?pytorch.Utility.target(t.target)+"."+pytorch.Utility.target(t.member):null}static isTensor(t){return t&&("torch"===t.__module__||"torch.cuda"===t.__module__)&&t.__name__&&t.__name__.endsWith("Tensor")}static isType(t,e){switch(e){case"tensor":return!Array.isArray(t)&&(pytorch.Utility.isTensor(t)||null===t);case"tensor[]":return Array.isArray(t)&&t.length>0&&t.every((t=>pytorch.Utility.isTensor(t)||null===t));case"boolean":return!0===t||!1===t;case"int64":return Number.isInteger(t)||isNaN(t);case"int64[]":return Array.isArray(t)&&t.every((t=>Number.isInteger(t)||Number.isNaN(t)||void 0===t));case"float32":case"float64":return null!==t&&t!==Object(t);case"Layout":case"ScalarType":case"MemoryFormat":return Number.isInteger(t);case"Device":return null===t||t===Object(t);case"scalar":return null!==t||t!==Object(t)}return!0}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.ModelFactory=pytorch.ModelFactory);