var tar=tar||{};tar.Archive=class{constructor(t){this._entries=[];const r=new tar.Reader(t,0,t.length);for(;r.peek()&&(this._entries.push(new tar.Entry(r)),!r.match(512,0)););}get entries(){return this._entries}},tar.Entry=class{constructor(t){const r=t.bytes(512);t.skip(-512);let e=0;for(let t=0;t<r.length;t++)e+=t>=148&&t<156?32:r[t];this._name=t.string(100),t.string(8),t.string(8),t.string(8);const s=parseInt(t.string(12).trim(),8);t.string(12);const i=parseInt(t.string(8).trim(),8);if(isNaN(i)||e!=i)throw new tar.Error("Invalid tar archive.");t.string(1),t.string(100),t.bytes(255),this._data=t.bytes(s),t.bytes(s%512!=0?512-s%512:0)}get name(){return this._name}get data(){return this._data}},tar.Reader=class{constructor(t){this._buffer=t,this._position=0,this._end=t.length}skip(t){if(this._position+=t,this._position>this._buffer.length)throw new tar.Error("Expected "+(this._position-this._buffer.length)+" more bytes. The file might be corrupted. Unexpected end of file.")}peek(){return this._position<this._end}match(t,r){return!!(this._position+t<=this._end&&this._buffer.subarray(this._position,this._position+t).every((t=>t==r)))&&(this._position+=t,!0)}bytes(t){const r=this._position;return this.skip(t),this._buffer.subarray(r,this._position)}string(t){const r=this.bytes(t);let e=0,s="";for(let i=0;i<t;i++){const t=r[e++];if(0==t)break;s+=String.fromCharCode(t)}return s}},tar.Error=class extends Error{constructor(t){super(t),this.name="tar Error"}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.Archive=tar.Archive);