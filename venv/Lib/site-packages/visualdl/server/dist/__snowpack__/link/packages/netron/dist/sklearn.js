var sklearn=sklearn||{},long=long||{Long:require("long")},zip=zip||require("./zip");sklearn.ModelFactory=class{match(e){const t=e.identifier.split(".").pop().toLowerCase();if(-1!==["pkl","pickle","joblib","model","meta","pb","pt","h5"].indexOf(t)){const t=e.buffer;if(t){const e=[138,10,108,252,156,70,249,32,106,168,80,25];if(t.length>14&&128==t[0]&&e.every(((e,n)=>e==t[n+2])))return!1;if(t.length>1&&46===t[t.length-1])return!0;if(t.length>2&&128===t[0]&&t[1]<5)return!0}}if(-1!==["pkl","joblib"].indexOf(t)){const t=e.buffer;if(t&&t.length>0&&120==t[0])return!0}return!1}open(e,t){return t.require("./pickle").then((n=>{const s=e.identifier;return sklearn.Metadata.open(t).then((r=>{try{const i=new sklearn.Container(e.buffer,n,((e,n)=>{const r=e&&e.message?e.message:e.toString();t.exception(new sklearn.Error(r.replace(/\.$/,"")+" in '"+s+"'."),n)}));if(!i.weights&&!i.data)throw new sklearn.Error("No root object.");return new sklearn.Model(r,i.data,i.weights)}catch(e){t.exception(e,!1);const n=e&&e.message?e.message:e.toString();throw new sklearn.Error(n.replace(/\.$/,"")+" in '"+s+"'.")}}))}))}},sklearn.Model=class{constructor(e,t,n){const s=Array.isArray(t)?t:[t],r=Array.from(new Set(s.map((e=>{if(e&&e.__module__){if(e.__module__.startsWith("sklearn."))return"scikit-learn"+(e._sklearn_version?" v"+e._sklearn_version.toString():"");if(e.__module__.startsWith("xgboost."))return"XGBoost"+(e._sklearn_version?" v"+e._sklearn_version.toString():"");if(e.__module__.startsWith("nolearn.lasagne."))return"Lasagne";if(e.__module__.startsWith("gensim."))return"gensim"}return"Pickle"}))).values());if(r.length>1)throw new sklearn.Error("Invalid array format '"+JSON.stringify(r)+"'.");this._format=r[0],this._graphs=s.map(((t,s)=>new sklearn.Graph(e,s,t,n)))}get format(){return this._format}get graphs(){return this._graphs}},sklearn.Graph=class{constructor(e,t,n,s){if(this._name=t.toString(),this._metadata=e,this._nodes=[],this._groups=!1,n)this._process("","",n,["data"]);else if(s instanceof Map){const e=new Map,t=[];for(const n of s){const s=n[0],r=s.split("_"),i=n[1],a=r.length>1?r.pop():"?",o=r.join("_");let l=e.get(o);l||(l={id:o,arrays:[]},t.push(l),e.set(o,l)),l.arrays.push({key:s,name:a,value:i})}this._nodes=this._nodes.concat(t.map((e=>{const t=e.arrays.map((e=>new sklearn.Parameter(e.name,[new sklearn.Argument(e.key,null,new sklearn.Tensor(e.key,e.value))])));return new sklearn.Node(this._metadata,"",e.id,{__module__:"sklearn._",__name__:"Weights"},t,[])})))}}_process(e,t,n,s){switch([n.__module__,n.__name__].join(".")){case"sklearn.pipeline.Pipeline":{this._groups=!0,t=t||"pipeline";const r=this._concat(e,t);for(const e of n.steps)s=this._process(r,e[0],e[1],s);return s}case"sklearn.pipeline.FeatureUnion":{this._groups=!0;let r=[];t=t||"union";const i=this._concat(e,t),a=this._concat(e,t);this._add(a,i,n,s,[i]);for(const e of n.transformer_list)r=r.concat(this._process(a,e[0],e[1],[i]));return r}case"sklearn.compose._column_transformer.ColumnTransformer":{this._groups=!0,t=t||"transformer";const r=this._concat(e,t),i=this._concat(e,t);let a=[];this._add(i,r,n,s,[r]);for(const e of n.transformers)a=a.concat(this._process(i,e[0],e[1],[r]));return a}default:{const r=this._concat(e,t);return this._add(e,r,n,s,[r]),[r]}}}_add(e,t,n,s,r){const i=[];for(const e of Object.keys(n))if(!e.startsWith("_")){const t=n[e];sklearn.Utility.isTensor(t)&&i.push(new sklearn.Tensor(e,t))}s=(s=s.map((e=>new sklearn.Parameter(e,[new sklearn.Argument(e,null,null)])))).concat(i.map((e=>new sklearn.Parameter(e.name,[new sklearn.Argument("",null,e)])))),r=r.map((e=>new sklearn.Parameter(e,[new sklearn.Argument(e,null,null)]))),this._nodes.push(new sklearn.Node(this._metadata,e,t,n,s,r))}_concat(e,t){return""===e?t:`${e}/${t}`}get name(){return this._name}get groups(){return this._groups}get inputs(){return[]}get outputs(){return[]}get nodes(){return this._nodes}},sklearn.Parameter=class{constructor(e,t){this._name=e,this._arguments=t}get name(){return this._name}get visible(){return!0}get arguments(){return this._arguments}},sklearn.Argument=class{constructor(e,t,n){if("string"!=typeof e)throw new sklearn.Error("Invalid argument identifier '"+JSON.stringify(e)+"'.");this._name=e,this._type=t||null,this._initializer=n||null}get name(){return this._name}get type(){return this._initializer?this._initializer.type:this._type}get initializer(){return this._initializer}},sklearn.Node=class{constructor(e,t,n,s,r,i){this._metadata=e,this._group=t||"",this._name=n||"",this._type=s.__module__&&s.__name__?s.__module__+"."+s.__name__:s.__name__?s.__name__:"Object",this._inputs=r,this._outputs=i,this._attributes=[],this._initializers=[];for(const t of Object.keys(s))if(!t.startsWith("_")){const n=s[t];if(n&&!Array.isArray(n)&&n===Object(n)&&sklearn.Utility.isTensor(n))this._initializers.push(new sklearn.Tensor(t,n));else{const s=e.attribute(this._type,t);this._attributes.push(new sklearn.Attribute(s,t,n))}}}get type(){return this._type}get name(){return this._name}get group(){return this._group?this._group:null}get metadata(){return this._metadata.type(this._type)}get inputs(){return this._inputs}get outputs(){return this._outputs}get attributes(){return this._attributes}},sklearn.Attribute=class{constructor(e,t,n){this._name=t,this._value=n,e&&(Object.prototype.hasOwnProperty.call(e,"option")&&"optional"==e.option&&null==this._value||Object.prototype.hasOwnProperty.call(e,"visible")&&!e.visible||Object.prototype.hasOwnProperty.call(e,"default")&&sklearn.Attribute._isEquivalent(e.default,this._value))&&(this._visible=!1)}get name(){return this._name}get value(){return this._value}get visible(){return 0!=this._visible}static _isEquivalent(e,t){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;const n=typeof e;if("function"!==n&&"object"!==n&&"object"!=typeof t)return!1;const s=toString.call(e);if(s!==toString.call(t))return!1;switch(s){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Array]":{let n=e.length;if(n!==t.length)return!1;for(;n--;)if(!sklearn.Attribute._isEquivalent(e[n],t[n]))return!1;return!0}}const r=Object.keys(e);let i=r.length;if(Object.keys(t).length!=i)return!1;for(;i--;){const n=r[i];if(!Object.prototype.hasOwnProperty.call(t,n)||!sklearn.Attribute._isEquivalent(e[n],t[n]))return!1}return!0}},sklearn.Tensor=class{constructor(e,t){if(this._name=e,!sklearn.Utility.isTensor(t)){const e=[t.__module__,t.__name__].join(".");throw new sklearn.Error("Unknown tensor type '"+e+"'.")}this._kind="Array",this._type=new sklearn.TensorType(t.dtype.name,new sklearn.TensorShape(t.shape)),this._data=t.data}get name(){return this._name}get type(){return this._type}get kind(){return this._kind}get state(){return this._context().state||null}get value(){const e=this._context();return e.state?null:(e.limit=Number.MAX_SAFE_INTEGER,this._decode(e,0))}toString(){const e=this._context();if(e.state)return"";e.limit=1e4;const t=this._decode(e,0);switch(this._type.dataType){case"int64":case"uint64":return sklearn.Tensor._stringify(t,"","    ")}return JSON.stringify(t,null,4)}_context(){const e={index:0,count:0,state:null};if(!this._type)return e.state="Tensor has no data type.",e;if(!this._data)return e.state="Tensor is data is empty.",e;switch(e.dataType=this._type.dataType,e.dimensions=this._type.shape.dimensions,e.dataType){case"float32":case"float64":case"int32":case"uint32":case"int64":case"uint64":e.rawData=new DataView(this._data.buffer,this._data.byteOffset,this._data.byteLength);break;default:return e.state="Tensor data type '"+e.dataType+"' is not implemented.",e}return e}_decode(e,t){const n=[],s=e.dimensions[t];if(t==e.dimensions.length-1)for(let t=0;t<s;t++){if(e.count>e.limit)return n.push("..."),n;switch(e.dataType){case"float32":n.push(e.rawData.getFloat32(e.index,!0)),e.index+=4,e.count++;break;case"float64":n.push(e.rawData.getFloat64(e.index,!0)),e.index+=8,e.count++;break;case"int32":n.push(e.rawData.getInt32(e.index,!0)),e.index+=4,e.count++;break;case"uint32":n.push(e.rawData.getUint32(e.index,!0)),e.index+=4,e.count++;break;case"int64":n.push(new long.Long(e.rawData.getUint32(e.index,!0),e.rawData.getUint32(e.index+4,!0),!1)),e.index+=8,e.count++;break;case"uint64":n.push(new long.Long(e.rawData.getUint32(e.index,!0),e.rawData.getUint32(e.index+4,!0),!0)),e.index+=8,e.count++}}else for(let r=0;r<s;r++){if(e.count>e.limit)return n.push("..."),n;n.push(this._decode(e,t+1))}return n}static _stringify(e,t,n){if(Array.isArray(e)){const s=[];s.push("[");const r=e.map((e=>sklearn.Tensor._stringify(e,t+n,n)));return r.length>0&&s.push(r.join(",\n")),s.push("]"),s.join("\n")}return t+e.toString()}},sklearn.TensorType=class{constructor(e,t){this._dataType=e,this._shape=t}get dataType(){return this._dataType}get shape(){return this._shape}toString(){return this.dataType+this._shape.toString()}},sklearn.TensorShape=class{constructor(e){this._dimensions=e}get dimensions(){return this._dimensions}toString(){return this._dimensions?"["+this._dimensions.map((e=>e.toString())).join(",")+"]":""}},sklearn.Metadata=class{static open(e){return sklearn.Metadata._metadata?Promise.resolve(sklearn.Metadata._metadata):e.request(null,"sklearn-metadata.json","utf-8").then((e=>(sklearn.Metadata._metadata=new sklearn.Metadata(e),sklearn.Metadata._metadata))).catch((()=>(sklearn.Metadata._metadata=new sklearn.Metadata(null),sklearn.Metadata._metadata)))}constructor(e){if(this._map=new Map,this._attributeCache=new Map,e){const t=JSON.parse(e);if(t)for(const e of t)e.name&&e.schema&&(e.schema.name=e.name,this._map.set(e.name,e.schema))}}type(e){return this._map.get(e)}attribute(e,t){const n=e+":"+t;if(!this._attributeCache.has(n)){const t=this.type(e);if(t&&t.attributes&&t.attributes.length>0)for(const n of t.attributes)this._attributeCache.set(e+":"+n.name,n);this._attributeCache.has(n)||this._attributeCache.set(n,null)}return this._attributeCache.get(n)}},sklearn.Container=class{constructor(e,t,n){e.length>0&&120==e[0]&&(e=(new zip.Inflater).inflate(e));const s=new t.Unpickler(e),r={},i={};r["numpy.dtype"]=function(e,t,n){switch(e){case"i1":this.name="int8",this.itemsize=1;break;case"i2":this.name="int16",this.itemsize=2;break;case"i4":this.name="int32",this.itemsize=4;break;case"i8":this.name="int64",this.itemsize=8;break;case"u1":this.name="uint8",this.itemsize=1;break;case"u2":this.name="uint16",this.itemsize=2;break;case"u4":this.name="uint32",this.itemsize=4;break;case"u8":this.name="uint64",this.itemsize=8;break;case"f2":this.name="float16",this.itemsize=2;break;case"f4":this.name="float32",this.itemsize=4;break;case"f8":this.name="float64",this.itemsize=8;break;case"b1":this.name="int8",this.itemsize=1;break;default:if(e.startsWith("V"))this.itemsize=Number(e.substring(1)),this.name="void"+(8*this.itemsize).toString();else if(e.startsWith("O"))this.itemsize=Number(e.substring(1)),this.name="object";else if(e.startsWith("S"))this.itemsize=Number(e.substring(1)),this.name="string";else if(e.startsWith("U"))this.itemsize=Number(e.substring(1)),this.name="string";else{if(!e.startsWith("M"))throw new sklearn.Error("Unknown dtype '"+e.toString()+"'.");this.itemsize=Number(e.substring(1)),this.name="datetime"}}this.align=t,this.copy=n,this.__setstate__=function(e){switch(e.length){case 8:this.version=e[0],this.byteorder=e[1],this.subarray=e[2],this.names=e[3],this.fields=e[4],this.elsize=e[5],this.alignment=e[6],this.int_dtypeflags=e[7];break;default:throw new sklearn.Error("Unknown numpy.dtype setstate length '"+e.length.toString()+"'.")}}},r["numpy.core.multiarray._reconstruct"]=function(e,t,n){this.subtype=e,this.shape=t,this.dtype=n,this.__setstate__=function(e){this.version=e[0],this.shape=e[1],this.typecode=e[2],this.is_f_order=e[3],this.rawdata=e[4]},this.__read__=function(e){const t={};sklearn.Utility.applyType(t,this.subtype),t.dtype=this.typecode,t.shape=this.shape;const n=t.shape&&t.shape.length>0?t.shape.reduce(((e,t)=>e*t)):1,s=t.dtype.itemsize*n;if("string"==typeof this.rawdata){if(t.data=e.unescape(this.rawdata,s),t.data.length!=s)throw new sklearn.Error("Invalid string array data size.")}else t.data=this.rawdata;return t}},r["joblib.numpy_pickle.NumpyArrayWrapper"]=function(){this.__setstate__=function(e){this.subclass=e.subclass,this.dtype=e.dtype,this.shape=e.shape,this.order=e.order,this.allow_mmap=e.allow_mmap},this.__read__=function(e){if("object"==this.dtype.name)return e.load(l,null);{const t=this.dtype.itemsize*this.shape.reduce(((e,t)=>e*t));this.data=e.read(t)}const t={dtype:this.dtype,shape:this.shape,data:this.data};return sklearn.Utility.applyType(t,this.subclass),t}},r["gensim.models.doc2vec.Doctag"]=function(){},r["gensim.models.doc2vec.Doc2Vec"]=function(){},r["gensim.models.doc2vec.Doc2VecTrainables"]=function(){},r["gensim.models.doc2vec.Doc2VecVocab"]=function(){},r["gensim.models.fasttext.FastText"]=function(){},r["gensim.models.fasttext.FastTextTrainables"]=function(){},r["gensim.models.fasttext.FastTextVocab"]=function(){},r["gensim.models.fasttext.FastTextKeyedVectors"]=function(){},r["gensim.models.keyedvectors.Doc2VecKeyedVectors"]=function(){},r["gensim.models.keyedvectors.Vocab"]=function(){},r["gensim.models.keyedvectors.Word2VecKeyedVectors"]=function(){},r["gensim.models.phrases.Phrases"]=function(){},r["gensim.models.tfidfmodel.TfidfModel"]=function(){},r["gensim.models.word2vec.Vocab"]=function(){},r["gensim.models.word2vec.Word2Vec"]=function(){},r["lightgbm.sklearn.LGBMRegressor"]=function(){},r["lightgbm.sklearn.LGBMClassifier"]=function(){},r["lightgbm.basic.Booster"]=function(){},r["nolearn.lasagne.base.BatchIterator"]=function(){},r["nolearn.lasagne.base.Layers"]=function(){},r["nolearn.lasagne.base.NeuralNet"]=function(){},r["nolearn.lasagne.base.TrainSplit"]=function(){},r["nolearn.lasagne.handlers.PrintLayerInfo"]=function(){},r["nolearn.lasagne.handlers.PrintLog"]=function(){},r["sklearn.calibration._CalibratedClassifier"]=function(){},r["sklearn.calibration._SigmoidCalibration"]=function(){},r["sklearn.calibration.CalibratedClassifierCV​"]=function(){},r["sklearn.compose._column_transformer.ColumnTransformer"]=function(){},r["sklearn.compose._target.TransformedTargetRegressor"]=function(){},r["sklearn.cluster._dbscan.DBSCAN"]=function(){},r["sklearn.cluster._kmeans.KMeans"]=function(){},r["sklearn.decomposition._pca.PCA"]=function(){},r["sklearn.decomposition.PCA"]=function(){},r["sklearn.decomposition.pca.PCA"]=function(){},r["sklearn.decomposition._truncated_svd.TruncatedSVD"]=function(){},r["sklearn.decomposition.truncated_svd.TruncatedSVD"]=function(){},r["sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]=function(){},r["sklearn.dummy.DummyClassifier"]=function(){},r["sklearn.externals.joblib.numpy_pickle.NumpyArrayWrapper"]=r["joblib.numpy_pickle.NumpyArrayWrapper"],r["sklearn.externals.joblib.numpy_pickle.NDArrayWrapper"]=function(){},r["sklearn.ensemble._bagging.BaggingClassifier"]=function(){},r["sklearn.ensemble._forest.RandomForestRegressor"]=function(){},r["sklearn.ensemble._forest.RandomForestClassifier"]=function(){},r["sklearn.ensemble._forest.ExtraTreesClassifier"]=function(){},r["sklearn.ensemble._gb_losses.BinomialDeviance"]=function(){},r["sklearn.ensemble._gb_losses.MultinomialDeviance"]=function(){},r["sklearn.ensemble._gb.GradientBoostingClassifier"]=function(){},r["sklearn.ensemble._iforest.IsolationForest"]=function(){},r["sklearn.ensemble._voting.VotingClassifier"]=function(){},r["sklearn.ensemble.forest.RandomForestClassifier"]=function(){},r["sklearn.ensemble.forest.RandomForestRegressor"]=function(){},r["sklearn.ensemble.forest.ExtraTreesClassifier"]=function(){},r["sklearn.ensemble.gradient_boosting.BinomialDeviance"]=function(){},r["sklearn.ensemble.gradient_boosting.GradientBoostingClassifier"]=function(){},r["sklearn.ensemble.gradient_boosting.LogOddsEstimator"]=function(){},r["sklearn.ensemble.gradient_boosting.MultinomialDeviance"]=function(){},r["sklearn.ensemble.gradient_boosting.PriorProbabilityEstimator"]=function(){},r["sklearn.ensemble.weight_boosting.AdaBoostClassifier"]=function(){},r["sklearn.feature_extraction._hashing.FeatureHasher"]=function(){},r["sklearn.feature_extraction.text.CountVectorizer"]=function(){},r["sklearn.feature_extraction.text.HashingVectorizer"]=function(){},r["sklearn.feature_extraction.text.TfidfTransformer"]=function(){},r["sklearn.feature_extraction.text.TfidfVectorizer"]=function(){},r["sklearn.feature_selection._univariate_selection.SelectKBest"]=function(){},r["sklearn.feature_selection._univariate_selection.SelectPercentile"]=function(){},r["sklearn.feature_selection.univariate_selection.SelectKBest"]=function(){},r["sklearn.feature_selection.variance_threshold.VarianceThreshold"]=function(){},r["sklearn.impute._base.SimpleImputer"]=function(){},r["sklearn.impute.SimpleImputer"]=function(){},r["sklearn.linear_model._base.LinearRegression"]=function(){},r["sklearn.linear_model._coordinate_descent.ElasticNet"]=function(){},r["sklearn.linear_model.base.LinearRegression"]=function(){},r["sklearn.linear_model.sgd_fast.Hinge"]=function(){},r["sklearn.linear_model.LogisticRegression"]=function(){},r["sklearn.linear_model.logistic.LogisticRegression"]=function(){},r["sklearn.linear_model._logistic.LogisticRegression"]=function(){},r["sklearn.linear_model.LassoLars​"]=function(){},r["sklearn.linear_model.ridge.Ridge"]=function(){},r["sklearn.linear_model.sgd_fast.Log"]=function(){},r["sklearn.linear_model.stochastic_gradient.SGDClassifier"]=function(){},r["sklearn.metrics.scorer._PredictScorer"]=function(){},r["sklearn.model_selection._search.GridSearchCV"]=function(){},r["sklearn.naive_bayes.BernoulliNB"]=function(){},r["sklearn.naive_bayes.ComplementNB"]=function(){},r["sklearn.naive_bayes.GaussianNB"]=function(){},r["sklearn.naive_bayes.MultinomialNB"]=function(){},r["sklearn.neighbors.classification.KNeighborsClassifier"]=function(){},r["sklearn.neighbors.dist_metrics.newObj"]=function(){},r["sklearn.neighbors.kd_tree.newObj"]=function(){},r["sklearn.neighbors.KNeighborsClassifier"]=function(){},r["sklearn.neighbors.KNeighborsRegressor"]=function(){},r["sklearn.neighbors.regression.KNeighborsRegressor"]=function(){},r["sklearn.neighbors.unsupervised.NearestNeighbors"]=function(){},r["sklearn.neural_network._multilayer_perceptron.MLPClassifier"]=function(){},r["sklearn.neural_network._multilayer_perceptron.MLPRegressor"]=function(){},r["sklearn.neural_network._stochastic_optimizers.AdamOptimizer"]=function(){},r["sklearn.neural_network._stochastic_optimizers.SGDOptimizer"]=function(){},r["sklearn.neural_network.rbm.BernoulliRBM"]=function(){},r["sklearn.neural_network.multilayer_perceptron.MLPClassifier"]=function(){},r["sklearn.neural_network.multilayer_perceptron.MLPRegressor"]=function(){},r["sklearn.neural_network.stochastic_gradient.SGDClassifier"]=function(){},r["sklearn.pipeline.Pipeline"]=function(){},r["sklearn.pipeline.FeatureUnion"]=function(){},r["sklearn.preprocessing._data.PolynomialFeatures"]=function(){},r["sklearn.preprocessing._data.RobustScaler"]=function(){},r["sklearn.preprocessing._data.StandardScaler"]=function(){},r["sklearn.preprocessing._discretization.KBinsDiscretizer"]=function(){},r["sklearn.preprocessing._encoders.OneHotEncoder"]=function(){},r["sklearn.preprocessing._function_transformer.FunctionTransformer"]=function(){},r["sklearn.preprocessing._label.LabelBinarizer"]=function(){},r["sklearn.preprocessing._label.LabelEncoder"]=function(){},r["sklearn.preprocessing.data.Binarizer"]=function(){},r["sklearn.preprocessing.data.MaxAbsScaler"]=function(){},r["sklearn.preprocessing.data.MinMaxScaler"]=function(){},r["sklearn.preprocessing.data.Normalizer"]=function(){},r["sklearn.preprocessing.data.OneHotEncoder"]=function(){},r["sklearn.preprocessing.data.PolynomialFeatures"]=function(){},r["sklearn.preprocessing.data.PowerTransformer"]=function(){},r["sklearn.preprocessing.data.RobustScaler"]=function(){},r["sklearn.preprocessing.data.QuantileTransformer"]=function(){},r["sklearn.preprocessing.data.StandardScaler"]=function(){},r["sklearn.preprocessing.imputation.Imputer"]=function(){},r["sklearn.preprocessing.label.LabelBinarizer"]=function(){},r["sklearn.preprocessing.label.LabelEncoder"]=function(){},r["sklearn.preprocessing.label.MultiLabelBinarizer"]=function(){},r["sklearn.svm._classes.SVC"]=function(){},r["sklearn.svm.classes.LinearSVC"]=function(){},r["sklearn.svm.classes.SVC"]=function(){},r["sklearn.svm.classes.SVR"]=function(){},r["sklearn.tree._classes.DecisionTreeClassifier"]=function(){},r["sklearn.tree._classes.DecisionTreeRegressor"]=function(){},r["sklearn.tree._classes.ExtraTreeClassifier"]=function(){},r["sklearn.tree._classes.ExtraTreeRegressor"]=function(){},r["sklearn.tree._tree.Tree"]=function(e,t,n){this.n_features=e,this.n_classes=t,this.n_outputs=n,this.__setstate__=function(e){this.max_depth=e.max_depth,this.node_count=e.node_count,this.nodes=e.nodes,this.values=e.values}},r["sklearn.tree.tree.DecisionTreeClassifier"]=function(){},r["sklearn.tree.tree.DecisionTreeRegressor"]=function(){},r["sklearn.tree.tree.ExtraTreeClassifier"]=function(){},r["sklearn.utils.deprecation.DeprecationDict"]=function(){},r["xgboost.compat.XGBoostLabelEncoder"]=function(){},r["xgboost.core.Booster"]=function(){},r["xgboost.sklearn.XGBClassifier"]=function(){},r["xgboost.sklearn.XGBRegressor"]=function(){},i["copy_reg._reconstructor"]=function(e,t,n){if("__builtin__.object"==t){const t={};return sklearn.Utility.applyType(t,e),t}if("__builtin__.tuple"==t)return n;throw new sklearn.Error("Unknown base type '"+t+"'.")},i["numpy.core.multiarray.scalar"]=function(e,t){let n=t;if("string"==typeof t||t instanceof String){n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e)}const s=new DataView(n.buffer,n.byteOffset,n.byteLength);switch(e.name){case"uint8":return s.getUint8(0);case"float32":return s.getFloat32(0,!0);case"float64":return s.getFloat64(0,!0);case"int8":return s.getInt8(0,!0);case"int16":return s.getInt16(0,!0);case"int32":return s.getInt32(0,!0);case"int64":return new long.Long(s.getInt32(0,!0),s.getInt32(4,!0),!1)}throw new sklearn.Error("Unknown scalar type '"+e.name+"'.")},i["numpy.ma.core._mareconstruct"]=function(e){const t={};return sklearn.Utility.applyType(t,e),t},i["numpy.random.__RandomState_ctor"]=function(){return{}},i["numpy.random._pickle.__randomstate_ctor"]=function(){return{}},i["_codecs.encode"]=function(e){return e},i["collections.defaultdict"]=function(){return{}},i["collections.OrderedDict"]=function(e){const t=new Map;if(t.__setitem__=function(e,n){t.set(e,n)},e)for(const n of e)t.__setitem__(n[0],n[1]);return t},i["__builtin__.bytearray"]=function(e,t){if(e){if("latin-1"===t){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}throw new sklearn.Error("Unsupported bytearray encoding '"+JSON.stringify(t)+"'.")}return[]},i["__builtin__.bytes"]=function(e,t){if(e){if("latin-1"===t){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}throw new sklearn.Error("Unsupported bytearray encoding '"+JSON.stringify(t)+"'.")}return[]},i["__builtin__.set"]=function(e){return e||[]},i["__builtin__.frozenset"]=function(e){return e||[]},i["builtins.bytearray"]=function(e){return{data:e}},i["builtins.set"]=function(e){return e||[]},i["builtins.slice"]=function(e,t,n){return{start:e,stop:t,step:n}},i["cloudpickle.cloudpickle._builtin_type"]=function(e){return e};const a=new Set,o=new Set(["sklearn","collections","__builtin__","builtins","copy_reg","gensim","joblib","xgboost","lightgbm","nolearn","numpy"]),l=(e,t)=>{const s=i[e];if(s)return s.apply(null,t);const l={};sklearn.Utility.applyType(l,e);const c=r[e];return c?c.apply(l,t):e&&!a.has(e)&&(a.add(e),o.has(e.split(".").shift())&&n(new sklearn.Error("Unknown function '"+e+"'."),!1)),l};this._data=s.load(l,null),this._data&&(this._weights=function(e){for(const t of e)if(t&&!Array.isArray(t)){const e=new Map;for(const n in t){const s=t[n];if("weight_order"!=n&&"lr"!=n){if(!n||!sklearn.Utility.isTensor(s))return null;e.set(n,s)}}return e}for(const t of e)if(t&&Array.isArray(t)){const e=new Map;for(let n=0;n<t.length;n++){const s=t[n];if(!sklearn.Utility.isTensor(s,"numpy.ndarray"))return null;e.set(n.toString(),s)}return e}return null}([this._data,this._data.blobs]),this._weights&&(this._data=null))}get data(){return this._data}get weights(){return this._weights}},sklearn.Utility=class{static isTensor(e){return e&&"numpy"===e.__module__&&"ndarray"===e.__name__}static applyType(e,t){if(t){const n=t.split(".");e.__name__=n.pop(),e.__module__=n.join(".")}}},sklearn.Error=class extends Error{constructor(e){super(e),this.name="Error loading scikit-learn model."}},"undefined"!=typeof module&&"object"==typeof module.exports&&(module.exports.ModelFactory=sklearn.ModelFactory);