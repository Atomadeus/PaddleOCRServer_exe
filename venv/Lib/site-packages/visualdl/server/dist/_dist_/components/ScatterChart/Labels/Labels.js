import*as f from"../../../../__snowpack__/pkg/three.js";import v from"../ScatterChart.js";import m from"./fragment.glsl.js";import G from"./vertex.glsl.js";const B=16384,R=16384,h=6,x=class extends v{constructor(){super(...arguments);this.blending=f.NormalBlending,this.vertexShader=G,this.fragmentShader=m,this.glyphTexture=null,this.mesh=null,this.textWidthInGlyphTexture=[],this.textPositionInGlyphTexture=[]}get object(){return this.mesh}get defaultColor(){return x.LABEL_BACKGROUND_COLOR_DEFAULT}get hoveredColor(){return x.LABEL_BACKGROUND_COLOR_HOVER}get focusedColor(){return x.LABEL_BACKGROUND_COLOR_FOCUS}get highLightColor(){return x.LABEL_BACKGROUND_COLOR_HIGHLIGHT}createShaderUniforms(r){return{glyphTexture:{value:this.glyphTexture},picking:{value:r}}}convertVertexes(){const r=this.dataCount,t=new Float32Array(r*h*3);for(let e=0;e<r;e++)for(let s=0;s<h;s++)for(let o=0;o<3;o++)t[e*h*3+s*3+o]=this.positions[e*3+o];return t}convertPickingColors(){if(this.pickingColors){const r=this.dataCount,t=new Float32Array(r*h*3);for(let e=0;e<r;e++)for(let s=0;s<h;s++)for(let o=0;o<3;o++)t[e*h*3+s*3+o]=this.pickingColors[e*3+o];return t}return null}convertPositionsToLabelPosition(){const r=this.dataCount,t=new Float32Array(r*h*2),e=1/(700*x.CUBE_LENGTH),s=(x.LABEL_FONT_SIZE+2*x.LABEL_PADDING[0])*e;for(let o=0;o<r;o++){const n=o*h*2,a=this.textWidthInGlyphTexture[o]*e,i=-a,c=-s,L=a,u=s;t[n]=i,t[n+1]=c,t[n+2]=L,t[n+3]=c,t[n+4]=i,t[n+5]=u,t[n+6]=i,t[n+7]=u,t[n+8]=L,t[n+9]=c,t[n+10]=L,t[n+11]=u}return t}convertGlyphTexturePositionsToUV(){const r=this.dataCount,t=new Float32Array(r*h*2);for(let e=0;e<r;e++){const s=e*h*2;let o=0,n=0,a=1,i=1;if(this.textPositionInGlyphTexture[e]){const[c,L]=this.textPositionInGlyphTexture[e];o=c[0],n=1-c[1],a=L[0],i=1-L[1]}t[s]=o,t[s+1]=i,t[s+2]=a,t[s+3]=i,t[s+4]=o,t[s+5]=n,t[s+6]=o,t[s+7]=n,t[s+8]=a,t[s+9]=i,t[s+10]=a,t[s+11]=n}return t}convertVertexColors(){const r=this.dataCount,t=new Float32Array(r*h*3);for(let e=0;e<r;e++){const s=this.getColorByIndex(e);for(let o=0;o<h;o++)t[e*h*3+o*3]=s.r,t[e*h*3+o*3+1]=s.g,t[e*h*3+o*3+2]=s.b}return t}createGlyphTexture(){const r=window.devicePixelRatio,t=this.labels.length,e=x.LABEL_FONT_SIZE*r,s=`bold ${e}px roboto`,[o,n]=x.LABEL_PADDING,a=document.createElement("canvas");a.width=B,a.height=e;const i=a.getContext("2d");let c=0,L=e+2*o;const u=[],T=[];if(i){i.font=s,i.fillStyle=x.LABEL_COLOR.getStyle(),i.textAlign="start",i.textBaseline="top";let d=n,g=o;for(let l=0;l<t;l++){const p=this.labels[l],C=this.labels.indexOf(p);if(C>=0&&l!==C){T.push(T[C]),u.push([[u[C][0][0],u[C][0][1]],[u[C][1][0],u[C][1][1]]]);continue}const O=Math.ceil(i.measureText(p).width);T.push(Math.floor(O/r)+2*n);const E=O+n,y=e+o;if(d+E>B){if(d=n,g+=y,g>R)throw new Error("Texture too large!");L=g+y}u.push([[d-n,g-o],[d+E,g+y]]),d+=E,c<d&&(c=d)}a.width=c,a.height=L,i.fillStyle="#fff",i.fillRect(0,0,c,L),i.font=s,i.fillStyle=x.LABEL_COLOR.getStyle(),i.textAlign="start",i.textBaseline="top";for(let l=0;l<t;l++){const p=this.labels[l],C=this.labels.indexOf(p);if(C>=0&&l!==C)continue;const[O]=u[l];i.fillText(p,O[0]+n,O[1]+o)}u.forEach(l=>{l[0][0]/=c,l[0][1]/=L,l[1][0]/=c,l[1][1]/=L})}const A=new f.CanvasTexture(a);A.needsUpdate=!0,A.minFilter=f.LinearFilter,A.generateMipmaps=!1,A.flipY=!0,this.glyphTexture=A,this.textWidthInGlyphTexture=T,this.textPositionInGlyphTexture=u}setLabelPosition(r){this.setGeometryAttribute("labelPosition",r,2)}setTextureUV(r){this.setGeometryAttribute("uv",r,2)}onRender(){this.colors=this.convertVertexColors()}onSetSize(){}onDataSet(){this.createGlyphTexture();const r=this.convertGlyphTexturePositionsToUV();this.setTextureUV(r);const t=this.convertPositionsToLabelPosition();this.setLabelPosition(t);const e=this.convertVertexes();this.setPosition(e),this.pickingColors=this.convertPickingColors(),this.createMaterial(),this.material&&(this.mesh=new f.Mesh(this.geometry,this.material),this.mesh.frustumCulled=!1)}onDispose(){var r;(r=this.glyphTexture)==null||r.dispose()}};let _=x;_.LABEL_COLOR=new f.Color(0),_.LABEL_BACKGROUND_COLOR_DEFAULT=new f.Color(16777215),_.LABEL_BACKGROUND_COLOR_HOVER=new f.Color(2700001),_.LABEL_BACKGROUND_COLOR_HIGHLIGHT=new f.Color(2700001),_.LABEL_BACKGROUND_COLOR_FOCUS=new f.Color(2700001),_.LABEL_FONT="roboto",_.LABEL_FONT_SIZE=20,_.LABEL_PADDING=[3,5];export default _;
