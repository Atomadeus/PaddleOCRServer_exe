import a,{useState as i,useEffect as v,useMemo as I}from"../../../../__snowpack__/pkg/react.js";import O from"../../Input.js";import C from"../../pieChart.js";import{Radio as k}from"../../../../__snowpack__/pkg/antd.js";import{asideWidth as Y,rem as h,primaryColor as B}from"../../../utils/style.js";import{Configure as N,EchartPie as M,TableContent as U,color as T,Title as q,Subtraction as H,ViewWrapper as J,RadioContent as Q,PieceContent as X,FullWidthSelect as Z}from"../../components.js";import _ from"../../../../__snowpack__/pkg/styled-components.js";import{useTranslation as ee}from"../../../../__snowpack__/pkg/react-i18next.js";import{Table as te}from"../../../../__snowpack__/pkg/antd.js";import{fetcher as y}from"../../../utils/fetch.js";import ae from"../../searchInput2.js";import re from"../../../../__snowpack__/pkg/react-spinners/GridLoader.js";Y;const ne=_(O)`
    width: 100%;
    height: 100%;
    border: 1px solid #e0e0e0;
    border-radius: 0;
    text-align: center;
`,oe=_(M)`
    height: ${h(287)};
`,le=_(q)`
    border-bottom: none;
    margin-bottom: ${h(0)};
`,ie=_.div`
    display: flex;
    border-bottom: 1px solid #dddddd;
`,se=_(X)`
    .tableContent {
        position: relative;
        padding-top: ${h(0)};
        border-top: 1px solid #dddddd;
        .postions {
            position: absolute;
            top: ${h(22)};
            z-index: 10;
        }
    }
`,ce=({runs:c,workers:m,spans:d,units:o})=>{const{t:e}=ee(["profiler","common"]),[f,j]=i(),[x,L]=i(),[b,w]=i(!0),[E,D]=i(),[g,S]=i(""),[A,P]=i(),[p,G]=i("kernel_name"),[$,z]=i(1),[s,u]=i(0);v(()=>{P([{label:e("group-by-core"),value:"kernel_name"},{label:e("Group-operator"),value:"kernel_name_attributes"}])},[e]),v(()=>{c&&m&&d&&o&&(y(`/profiler/kernel/tensorcore_pie?run=${c}&worker=${m}&span=${d}&time_unit=${o}&topk=${s}`).then(n=>{const r=n,t=[];for(const l of r.events)t.push({value:l.calls,name:l.name,proportion:l.ratio});L(t)}),y(`/profiler/kernel/pie?run=${c}&worker=${m}&span=${d}&time_unit=${o}&topk=${s}`).then(n=>{const r=n,t=[];for(const l of r.events)t.push({value:l.total_time,name:l.name,proportion:l.ratio});j(t)}))},[c,m,d,s,o]),v(()=>{c&&m&&d&&(w(!0),y(`/profiler/kernel/table?run=${c}&worker=${m}&span=${d}&time_unit=${o}&search_name=${g}&group_by=${p}`).then(n=>{const t=n.events.map(l=>p==="kernel_name_attributes"?{key:l.name+l.calls+l.operator+l.grid,...l}:{key:l.name,...l});D(t),w(!1)}))},[c,m,d,g,p,o]);const R=I(()=>[{title:e("nuclear-name"),dataIndex:"name",key:"name",width:200},{title:e("call-volume"),dataIndex:"calls",key:"calls",width:100},{title:e("total-time")+`(${o})`,dataIndex:"total_time",width:130,key:"total_time",sorter:(r,t)=>r.total_time-t.total_time},{title:e("average-time")+`(${o})`,dataIndex:"avg_time",width:100,key:"avg_time",sorter:(r,t)=>r.avg_time-t.avg_time},{title:e("longest-time")+`(${o})`,dataIndex:"max_time",width:100,key:"max_time",sorter:(r,t)=>r.max_time-t.max_time},{title:e("shortest-time")+`(${o})`,dataIndex:"min_time",width:100,key:"min_time",sorter:(r,t)=>r.min_time-t.min_time},{title:e("sm-average"),dataIndex:"mean blocks per sm",width:100,key:"mean blocks per sm"},{title:e("average-occupancy")+"%",dataIndex:"mean est achieved occupancy",width:100,key:"mean est achieved occupancy"},{title:e("use-tensor-core"),dataIndex:"tensor core used",width:100,key:"tensor core used",render:r=>r?a.createElement("div",null,e("Yes")):a.createElement("div",null,e("No"))},{title:e("percentage")+"%",dataIndex:"ratio",key:"ratio",sorter:(r,t)=>r.ratio-t.ratio}],[e,o]),V=I(()=>[{title:e("nuclear-name"),dataIndex:"name",width:200,key:"name"},{title:e("call-volume"),dataIndex:"calls",width:80,key:"calls",sorter:(r,t)=>r.calls-t.calls},{title:e("Cor-operator"),dataIndex:"operator",width:130,key:"operator"},{title:e("thread-grid"),dataIndex:"grid",width:130,key:"grid"},{title:e("thread-block"),dataIndex:"block",width:130,key:"block"},{title:e("Thread-registers"),dataIndex:"register per thread",width:130,key:"register per thread"},{title:e("Shared-memory"),dataIndex:"shared memory",width:130,key:"shared memory"},{title:e("total-time")+`(${o})`,dataIndex:"total_time",width:130,key:"total_time",sorter:(r,t)=>r.total_time-t.total_time},{title:e("average-time")+`(${o})`,dataIndex:"avg_time",width:100,key:"avg_time",sorter:(r,t)=>r.avg_time-t.avg_time},{title:e("longest-time")+`(${o})`,dataIndex:"max_time",width:100,key:"max_time",sorter:(r,t)=>r.max_time-t.max_time},{title:e("shortest-time")+`(${o})`,dataIndex:"min_time",width:100,key:"min_time",sorter:(r,t)=>r.min_time-t.min_time},{title:e("sm-average"),dataIndex:"mean blocks per sm",width:130,key:"mean blocks per sm"},{title:e("average-occupancy")+"%",dataIndex:"mean est achieved occupancy",width:100,key:"mean est achieved occupancy"},{title:e("use-tensor-core"),dataIndex:"tensor core used",width:100,key:"tensor core used",render:r=>r?a.createElement("div",null,e("Yes")):a.createElement("div",null,e("No"))},{title:e("percentage")+"%",dataIndex:"ratio",key:"ratio",sorter:(r,t)=>r.ratio-t.ratio}],[e,o]),F=n=>{z(n.target.value),n.target.value===1?u(0):n.target.value===2&&u(10)},K=n=>{const r=n.charAt(0);let t=n;return t=t.replace(/[^\d.]/g,""),t=t.replace(/^\./g,""),t=t.replace(/\.{2,}/g,"."),t=t.replace(".","$#$").replace(/\./g,"").replace("$#$","."),r==="-"&&(t="-"+t),t},W=n=>{const r=K(n);console.log("tops",r),u(r||0)};return a.createElement(J,null,a.createElement(ie,null,a.createElement(le,null,e("nuclear-view")),a.createElement(Q,null,a.createElement(k.Group,{onChange:F,value:$},a.createElement(k,{value:1},e("show-all-kernels")),a.createElement(k,{value:2},e("show-Top-kernels"))),$===2?a.createElement("div",{className:"AdditionContent"},a.createElement("div",{className:"Addition",onClick:()=>{const n=s+1;u(n)}},"+"),a.createElement("div",{className:"input_wrapper"},a.createElement(ne,{onChange:W,value:s+""})),a.createElement(H,{disable:s>1,onClick:()=>{if(s>1){const n=s-1;u(n)}}},"-")):null)),a.createElement(N,{style:{marginTop:`${h(25)}`}},a.createElement("div",{className:"titleContent"},a.createElement("div",{className:"titles"},a.createElement("div",null,e("Kernel-profile")))),a.createElement(se,null,a.createElement(oe,null,a.createElement("div",{className:"wraper",style:{borderRight:"1px solid #dddddd"}},a.createElement(C,{className:"Content",data:f,color:T,units:o,option:{series:[{right:"220",name:"Access From",type:"pie",radius:["63%","88%"],avoidLabelOverlap:!1,label:{show:!0,position:"center",formatter:function(){return e("total-time")}},labelLine:{show:!1},data:f}]}})),a.createElement("div",{className:"wraper"},a.createElement(C,{className:"Content",data:x,units:o,option:{series:[{right:"220",name:"Access From",type:"pie",radius:["63%","90%"],avoidLabelOverlap:!1,label:{show:!0,position:"center",formatter:function(){return`Tensor Cores

${e("Utilization")}`}},labelLine:{show:!1},data:x}]},color:T}))))),a.createElement(N,null,a.createElement("div",{className:"titleContent",style:{marginBottom:h(15)}},a.createElement("div",{className:"title"},e("Kernel-details")),a.createElement("div",{className:"searchContent"},a.createElement("div",{className:"select_wrapper"},a.createElement(Z,{list:A,value:p,onChange:G})),a.createElement("div",{className:"input_wrapper"},a.createElement(ae,{className:"search-input",value:g,onChange:S,placeholder:e("Search-Kernal"),rounded:!0})))),a.createElement(U,null,b&&a.createElement("div",{className:"loading"},a.createElement(re,{color:B,size:"10px"})),E&&!b&&a.createElement(te,{columns:p==="kernel_name"?R:V,dataSource:E,bordered:!0,size:"middle",scroll:{x:p==="kernel_name"?"calc(1200px)":"calc(1800px)",y:900}}))))};export default ce;
