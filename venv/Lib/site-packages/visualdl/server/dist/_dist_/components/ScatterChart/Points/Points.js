import*as s from"../../../../__snowpack__/pkg/three.js";import p from"../ScatterChart.js";import g from"../ScatterChartLabel.js";import C from"./fragment.glsl.js";import S from"./vertex.glsl.js";const i=class extends p{constructor(t,e){super(t,e);this.blending=s.MultiplyBlending,this.depth=!1,this.vertexShader=S,this.fragmentShader=C,this.scaleFactors=null,this.points=null,this.label=new g(this.container,{width:this.width,height:this.height}),this.fog=this.initFog()}get object(){return this.points}get defaultColor(){return i.POINT_COLOR_DEFAULT}get hoveredColor(){return i.POINT_COLOR_HOVER}get focusedColor(){return i.POINT_COLOR_FOCUS}get highLightColor(){return i.POINT_COLOR_HIGHLIGHT}initFog(){return new s.Fog(this.background)}createShaderUniforms(){const t=this.scene.fog;return{pointSize:{value:200/Math.log(this.dataCount)/Math.log(8)/(this.is3D?1:1.5)},sizeAttenuation:{value:this.is3D},fogColor:{value:t==null?void 0:t.color},fogNear:{value:t==null?void 0:t.near},fogFar:{value:t==null?void 0:t.far}}}setPointsScaleFactor(t){this.setGeometryAttribute("scaleFactor",t,1)}convertPointsColor(){const t=this.dataCount,e=new Float32Array(t*3);for(let o=0;o<t;o++){const r=this.getColorByIndex(o);e[o*3]=r.r,e[o*3+1]=r.g,e[o*3+2]=r.b}return e}convertPointsScaleFactor(){const t=this.dataCount,e=new Float32Array(t);for(let o=0;o<t;o++)this.hoveredDataIndices.includes(o)?e[o]=i.POINT_SCALE_HOVER:this.focusedDataIndices.includes(o)?e[o]=i.POINT_SCALE_FOCUS:this.highLightDataIndices.includes(o)?e[o]=i.POINT_SCALE_HIGHLIGHT:e[o]=i.POINT_SCALE_DEFAULT;return e}updateHoveredLabels(){if(!this.camera||!this.positions.length)return;const t=this.focusedDataIndices.length?this.focusedDataIndices:this.hoveredDataIndices;if(!t.length){this.label.clear();return}const e=window.devicePixelRatio||1,o=this.width,r=this.height,c=t.map(O=>{var u;const h=O*3,f=new s.Vector3(this.positions[h],this.positions[h+1],this.positions[h+2]),l=new s.Vector3().copy(f).project(this.camera),a=[(l.x+1)/2*o*e,-((l.y-1)/2*r)*e];return{text:(u=this.labels[O])!=null?u:"",fontSize:40,fillColor:"#000",strokeColor:"#fff",opacity:1,x:a[0]+4,y:a[1]}});this.label.render(c)}updateFog(){const t=this.fog;if(t){if(t.color=new s.Color(this.background),this.is3D&&this.positions.length){const e=this.camera.position,o=this.controls.target;let r=Number.POSITIVE_INFINITY,c=0;const O=new s.Vector3().copy(o).sub(e),h=new s.Vector3().copy(O).normalize(),f=this.positions.length/3;let l=0;const a=new s.Vector3,u=new s.Vector3;for(let I=0;I<f;I++){a.x=this.positions[l++],a.y=this.positions[l++],a.z=this.positions[l++],u.copy(a).sub(e);const d=h.dot(u);d<0||(c=d>c?d:c,r=d<r?d:r)}const _=2-Math.min(f,i.NUM_POINTS_FOG_THRESHOLD)/i.NUM_POINTS_FOG_THRESHOLD;t.near=r,t.far=c*_}else t.near=Number.POSITIVE_INFINITY,t.far=Number.POSITIVE_INFINITY;if(this.points){const e=this.points.material;e.uniforms.fogColor.value=t.color,e.uniforms.fogNear.value=t.near,e.uniforms.fogFar.value=t.far}this.scene.fog=t}}onRender(){this.colors=this.convertPointsColor(),this.updateFog(),this.updateHoveredLabels(),this.scaleFactors=this.convertPointsScaleFactor(),this.setPointsScaleFactor(this.scaleFactors)}onSetSize(t,e){this.label.setSize(t,e)}onDataSet(){this.setPosition(this.positions),this.createMaterial(),this.material&&(this.points=new s.Points(this.geometry,this.material),this.points.frustumCulled=!1)}onDispose(){this.label.dispose()}};let n=i;n.NUM_POINTS_FOG_THRESHOLD=5e3,n.POINT_COLOR_DEFAULT=new s.Color(8289918),n.POINT_COLOR_HOVER=new s.Color(2700001),n.POINT_COLOR_HIGHLIGHT=new s.Color(2700001),n.POINT_COLOR_FOCUS=new s.Color(2700001),n.POINT_SCALE_DEFAULT=1,n.POINT_SCALE_HOVER=1.2,n.POINT_SCALE_HIGHLIGHT=1,n.POINT_SCALE_FOCUS=1.2;export default n;
