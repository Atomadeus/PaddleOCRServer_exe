import b from"../../../__snowpack__/pkg/bignumberjs.js";import g from"../../../__snowpack__/pkg/lodash/compact.js";import x from"../../../__snowpack__/pkg/lodash/maxBy.js";import _ from"../../../__snowpack__/pkg/lodash/minBy.js";import{quantile as f}from"../../utils/index.js";export const transform=({datasets:n,smoothing:r})=>n.map(o=>{const e=o.map(i=>[i[0],i[1],Number.isFinite(i[2])?i[2]:null,Number.NaN,Number.NaN]);let t=new b(e.length>0?0:Number.NaN),s=0,p=0;const l=new b(r);return e.forEach((i,a)=>{const N=i[0]=Math.floor(i[0]);if(a===0&&(p=N),i[4]=Math.floor(N-p),!Number.isFinite(i[2]))i[3]=null;else{const m=new b(i[2]);if(!m.isFinite())i[3]=m.toNumber();else{t=t.multipliedBy(l).plus(l.minus(1).negated().multipliedBy(m)),s++;let u=new b(1);l.isEqualTo(1)||(u=l.exponentiatedBy(s).minus(1).negated()),i[3]=t.dividedBy(u).toNumber()}}}),e}),singlePointRange=n=>({min:Number.isFinite(n)?Math.min(n*2,0):-.5,max:Number.isFinite(n)?Math.max(n*2,0):.5}),range=({datasets:n})=>n==null?void 0:n.map(r=>{var e,t;if(r.length==0)return{min:Number.NaN,max:Number.NaN};const o=r.map(s=>s[2]).filter(Number.isFinite);return{min:(e=Math.min(...o))!=null?e:Number.NaN,max:(t=Math.max(...o))!=null?t:Number.NaN}}),axisRange=({datasets:n,outlier:r})=>{var s,p,l,i;const o=g(n==null?void 0:n.map(a=>{var m,u;if(a.length===0)return;const N=a.map(c=>c[2]).filter(Number.isFinite);if(r){const c=a.map(h=>h[2]).filter(Number.isFinite).sort();return{min:f(c,.05),max:f(N,.95)}}else return{min:(m=Math.min(...N))!=null?m:0,max:(u=Math.max(...N))!=null?u:0}})),e=(p=(s=_(o,a=>a.min))==null?void 0:s.min)!=null?p:0,t=(i=(l=x(o,a=>a.max))==null?void 0:l.max)!=null?i:0;if(!(e===0&&t===0))return{min:e>0?e*.9:e*1.1,max:t>0?t*1.1:t*.9}},nearestPoint=(n,r,o,e,t)=>{const s=[];return n.forEach((p,l)=>{const i=o[l];let a=Number.POSITIVE_INFINITY,N=t;for(let m=0;m<p.length;m++){const u=p[m][e];if(Number.isFinite(u)){const c=Math.abs(u-t);a>c&&(a=c,N=u)}}s.push(...p.reduce((m,u,c)=>(u[e]===N&&m.push({run:i,item:u,rawItem:r[l][c]}),m),[]))}),s},parseSmoothing=n=>{const r=Number.parseFloat(String(n));let o=.6;return Number.isFinite(r)&&r<1&&r>=0&&(o=Math.round(r*100)/100),o};
