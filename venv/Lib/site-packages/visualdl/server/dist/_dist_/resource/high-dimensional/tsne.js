class I{constructor(){this.returnV=!1,this.vVal=0}get value(){if(this.returnV)return this.returnV=!1,this.vVal;const t=2*Math.random()-1,s=2*Math.random()-1,i=t*t+s*s;if(i===0||i>1)return this.value;const e=Math.sqrt(-2*Math.log(i)/i);return this.vVal=s*e,this.returnV=!0,t*e}}export default class M{constructor(t){var s,i;this.epsilon=10,this.perplexity=30,this.Random=new I,this.data=new Float32Array,this.P=new Float32Array,this.Y=[],this.gains=[],this.yStep=[],this.D=0,this.N=0,this.iter=0,this.dimension=t.dimension,this.perplexity=(s=t.perplexity)!=null?s:this.perplexity,this.epsilon=(i=t.epsilon)!=null?i:this.epsilon}get solution(){return this.Y}get step(){return this.iter}L2(t,s){if(t.length!==s.length)throw new Error("Cannot compare vectors with different length");const i=t.length;let e=0;for(let r=0;r<i;r++){const n=t[r],c=s[r];e+=(n-c)*(n-c)}return e}randn2d(t){const s=t!=null,i=[];for(let e=0;e<this.N;e++){const r=[];for(let n=0;n<this.dimension;n++)s?r.push(t):r.push(this.Random.value*1e-4);i.push(r)}return i}sliceDataRow(t){return this.data.slice(t*this.D,(t+1)*this.D)}xtod(){const t=new Float32Array(this.N*this.N);for(let s=0;s<this.N;s++)for(let i=0;i<this.N;i++){const e=this.L2(this.sliceDataRow(s),this.sliceDataRow(i));t[s*this.N+i]=e,t[i*this.N+s]=e}return t}d2p(t,s=1e-4){const i=Math.sqrt(t.length),e=Math.floor(i);if(i!==e)throw new Error("Distance is not a square matrix");const r=Math.log(this.perplexity),n=new Float32Array(e*e),c=new Float32Array(e);for(let h=0;h<e;h++){let u=Number.NEGATIVE_INFINITY,o=Number.POSITIVE_INFINITY,a=1;const f=50;let m=0;for(;m<f;){let l=0;for(let d=0;d<e;d++){let g=Math.exp(-t[h*e+d]*a);h===d&&(g=0),c[d]=g,l+=g}let w=0;for(let d=0;d<e;d++){const g=l===0?0:c[d]/l;c[d]=g,g>1e-7&&(w-=g*Math.log(g))}if(w>r?(u=a,o===Number.POSITIVE_INFINITY?a*=2:a=(a+o)/2):(o=a,u===Number.NEGATIVE_INFINITY?a/=2:a=(a+u)/2),m++,Math.abs(w-r)<s)break}for(let l=0;l<e;l++)n[h*e+l]=c[l]}const p=new Float32Array(e*e),N=e*2;for(let h=0;h<e;h++)for(let u=0;u<e;u++)p[h*e+u]=Math.max((n[h*e+u]+n[u*e+h])/N,Number.EPSILON);return p}costGrad(){const t=this.Y,s=this.N,i=this.dimension,e=this.P,r=s*s,n=this.iter<100?4:1,c=new Float32Array(r);let p=0;for(let o=0;o<s;o++)for(let a=o+1;a<s;a++){let f=0;for(let l=0;l<i;l++){const w=t[o][l]-t[a][l];f+=w*w}const m=1/(1+f);c[o*s+a]=m,c[a*s+o]=m,p+=2*m}const N=new Float32Array(r);for(let o=0;o<r;o++)N[o]=Math.max(c[o]/p,Number.EPSILON);let h=0;const u=[];for(let o=0;o<s;o++){const a=Array.from({length:i}).fill(0);for(let f=0;f<s;f++){h+=-e[o*s+f]*Math.log(N[o*s+f]);const m=4*(n*e[o*s+f]-N[o*s+f])*c[o*s+f];for(let l=0;l<i;l++)a[l]+=m*(t[o][l]-t[f][l])}u.push(a)}return{cost:h,grad:u}}setData(t,s){if(t.length&&s&&t.length%s!=0)throw Error("Wrong data shape");if(t.length===0||s===0)return;this.data=t,this.D=s,this.N=t.length/s;const i=this.xtod();this.P=this.d2p(i),this.Y=this.randn2d(),this.gains=this.randn2d(1),this.yStep=this.randn2d(0),this.iter=0}setPerplexity(t){this.perplexity=t}setEpsilon(t){this.epsilon=t}run(){this.iter++;const t=this.N,{cost:s,grad:i}=this.costGrad(),e=new Float32Array(this.dimension);for(let r=0;r<t;r++)for(let n=0;n<this.dimension;n++){const c=i[r][n],p=this.yStep[r][n],N=this.gains[r][n];let h=Math.sign(c)===Math.sign(p)?N*.8:N+.2;h<.01&&(h=.01),this.gains[r][n]=h;const o=(this.iter<250?.5:.8)*p-this.epsilon*h*i[r][n];this.yStep[r][n]=o,this.Y[r][n]+=o,e[n]+=this.Y[r][n]}for(let r=0;r<t;r++)for(let n=0;n<this.dimension;n++)this.Y[r][n]-=e[n]/t;return s}}
