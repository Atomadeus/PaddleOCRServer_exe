import*as f from"../../__snowpack__/env.js";import g from"../../__snowpack__/pkg/i18next.js";import E from"../../__snowpack__/pkg/query-string.js";import{toast as m}from"../../__snowpack__/pkg/react-toastify.js";import h from"../../__snowpack__/pkg/axios.js";const l=f.SNOWPACK_PUBLIC_API_TOKEN_KEY;export const API_URL=f.SNOWPACK_PUBLIC_API_URL;console.log("API_URL",l);const y="X-VisualDL-Instance-ID",d=l?E.parse(window.location.search)[l]:"";export function getApiToken(){return d!=null?d:null}function x(s){const a=getApiToken();if(!l||!a)return s;const{headers:t,...i}=s||{},p=new Headers(t);return Array.isArray(a)?a.forEach(r=>p.append(y,r)):p.append(y,a),{...i,headers:p}}function A(){return new Promise(s=>{g.changeLanguage(void 0).then(a=>s(a))})}function c(s){return f.MODE==="development"&&console.error(s),A()}export async function fetcher(s,a){var p;let t;try{t=await fetch(API_URL+s,x(a))}catch(r){const e=await c(r);throw new Error(e("errors:network-error"))}if(!t.ok){const r=await c(t);throw new Error(r([`errors:response-error.${t.status}`,"errors:response-error.unknown"]))}const i=(p=t.headers.get("content-type"))!=null?p:"";if(i.includes("application/json")){let r;try{r=await t.json()}catch(e){const n=await c(e);throw new Error(n("errors:parse-error"))}if(r&&"status"in r)if(r.status!==0){const e=await c(r);throw m.error(r.msg),new Error(r.msg||e("errors:error"))}else return r.data;return r}else if(i.startsWith("text/")){let r;try{r=await t.text()}catch(e){const n=await c(e);throw new Error(n("errors:parse-error"))}return r}else{let r;try{r=await t.blob()}catch(o){const w=await c(o);throw new Error(w("errors:parse-error"))}const e=t.headers.get("Content-Disposition");r.arrayBuffer||(r.arrayBuffer=async()=>new Promise((o,w)=>{const u=new FileReader;u.addEventListener("load",_=>_.target?o(_.target.result):w()),u.readAsArrayBuffer(r)}));let n=null;if(e&&e.indexOf("attachment")!==-1){const o=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(e);o!=null&&o[1]&&(n=o[1].replace(/['"]/g,""))}return{data:r,type:t.headers.get("Content-Type"),filename:n}}}export async function axios_fetcher(s,a,t){var r;let i;try{a.method==="POST"?i=await h.post(API_URL+s,a.body,t):a.method==="GET"?i=await h.get(API_URL+s,t):i=await h(API_URL+s)}catch(e){const n=await c(e);throw new Error(n("errors:network-error"))}const p=(r=i.headers.get("content-type"))!=null?r:"";if(p.includes("application/json")){let e;try{e=i.data}catch(n){const o=await c(n);throw new Error(o("errors:parse-error"))}if(e&&"status"in e)if(e.status!==0){const n=await c(e);throw m.error(e.msg),new Error(e.msg||n("errors:error"))}else return e.data;return e}else if(p.startsWith("text/")){let e;try{e=i.data}catch(n){const o=await c(n);throw new Error(o("errors:parse-error"))}return e}else{let e;e=i.data;let n=null;const o=i.headers.get("Content-Disposition");if(o&&o.indexOf("attachment")!==-1){const w=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(o);w!=null&&w[1]&&(n=w[1].replace(/['"]/g,""))}return{data:e,type:i.headers.get("Content-Type"),filename:n}}}export const cycleFetcher=async(s,a)=>await Promise.all(s.map(t=>fetcher(t,a)));
